<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringSecurity查看过滤器链</title>
      <link href="/2024/03/27/SpringSecurity/SpringSecurity%E6%9F%A5%E7%9C%8B%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE/"/>
      <url>/2024/03/27/SpringSecurity/SpringSecurity%E6%9F%A5%E7%9C%8B%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="配置-application-properties"><a href="#配置-application-properties" class="headerlink" title="配置 application.properties"></a>配置 application.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#logging.level.org.springframework.security.web.FilterChainProxy=DEBUG</span><br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>控制台打印出过滤器链信息</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Spring/SpringSecurity/202403271456032.png" alt="image-20240327145512474"></p>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Mybatis 向 Postgresql 插入 UUID 字段</title>
      <link href="/2024/03/27/Postgresql/%E4%BD%BF%E7%94%A8%20Mybatis%20%E5%90%91%20Postgresql%20%E6%8F%92%E5%85%A5%20UUID%20%E5%AD%97%E6%AE%B5/"/>
      <url>/2024/03/27/Postgresql/%E4%BD%BF%E7%94%A8%20Mybatis%20%E5%90%91%20Postgresql%20%E6%8F%92%E5%85%A5%20UUID%20%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><code>id</code> 字段设置为 character varying</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Postgresql/202403271403692.png" alt="image-20240327135705194" style="zoom: 67%;" /><h2 id="User-对象"><a href="#User-对象" class="headerlink" title="User 对象"></a>User 对象</h2><p><code>id</code> 设置为 <code>String</code> 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.entity;<br><br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String id; <br><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">//返回用户的角色列表，有助于管理权限</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> List.of();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建-User-对象"><a href="#创建-User-对象" class="headerlink" title="创建 User 对象"></a>创建 User 对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> User <span class="hljs-title function_">signup</span><span class="hljs-params">(RegisterUserDto input)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    <span class="hljs-comment">//将 UUID 转换成字符串格式，将破折号替换为空格</span><br>    user.setId(UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br>    user.setUserName(input.getUserName());<br>    user.setPassword(passwordEncoder.encode(input.getPassword()));<br>    userMapper.insertUser(user);<br>    <span class="hljs-comment">//返回当前用户</span><br>    <span class="hljs-keyword">return</span> userMapper.findByUserName(user.getUsername()).get();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UserMapper-声明插入方法"><a href="#UserMapper-声明插入方法" class="headerlink" title="UserMapper 声明插入方法"></a>UserMapper 声明插入方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span>&#123;<br>    Optional&lt;User&gt; <span class="hljs-title function_">findByUserName</span><span class="hljs-params">(String userName)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="user-mapper-xml"><a href="#user-mapper-xml" class="headerlink" title="user-mapper.xml"></a>user-mapper.xml</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">insert</span> id<span class="hljs-operator">=</span>&quot;insertUser&quot; parameterType<span class="hljs-operator">=</span>&quot;com.example.springsecurity.entity.User&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> user_acc (user_name, password)<br>    <span class="hljs-keyword">values</span>(#&#123;id&#125;, #&#123;userName&#125;, #&#123;password&#125;)<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">insert</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Postgresql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot + Postgresql 实现 JWT 身份验证</title>
      <link href="/2024/03/24/SpringSecurity/Spring%20boot%20+%20Postgresql%20%E5%AE%9E%E7%8E%B0%20JWT%20%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
      <url>/2024/03/24/SpringSecurity/Spring%20boot%20+%20Postgresql%20%E5%AE%9E%E7%8E%B0%20JWT%20%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在不断发展的 Web 开发和应用程序安全领域，对强大身份验证机制的需求从未如此迫切。向公众公开 API 时，确保只有授权人员才能访问资源至关重要。</p><p>JSON Web Tokens (JWT) 是现代 Web 应用程序中最流行、最有效的身份验证方法之一。它提供了一种灵活、无状态的方式来验证用户身份并保护 API 端点；它也被称为基于 Token 的身份验证。</p><p>在本文中，我们将探讨在 Spring Boot 3 应用程序中实现 JWT 身份验证。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>API 必须公开一些无需身份验证即可访问的路由，而另一些则需要身份验证。下表列举了这些路由：</p><table><thead><tr><th>AP 路由</th><th>访问状态</th><th>描述</th></tr></thead><tbody><tr><td>[POST] &#x2F;auth&#x2F;login</td><td>未受保护</td><td>注册新用户</td></tr><tr><td>[POST] &#x2F;auth&#x2F;signup</td><td>未受保护</td><td>验证用户身份</td></tr><tr><td>[GET] &#x2F;user</td><td>受保护</td><td>检索当前经过身份验证的用户</td></tr></tbody></table><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>JDK 21</li><li>Postgresql 16.2</li><li>SpringBoot 3.2.3</li><li>Mybatis</li><li>Maven</li><li>Spring Security 6.2.3</li></ul><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringSecurity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>SpringSecurity<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>SpringSecurity<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zaxxer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>HikariCP<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-jackson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="资源配置"><a href="#资源配置" class="headerlink" title="资源配置"></a>资源配置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># ServerProperties</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8060</span><br><span class="hljs-comment">#server.servlet.context-path=/Backend</span><br><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:postgresql://localhost:5432/sia?characterEncoding=utf-8&amp;useSSL=false</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">postgres</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">sia123</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">org.postgresql.Driver</span><br><br><span class="hljs-attr">security.jwt.secret-key</span>=<span class="hljs-string">3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b</span><br><span class="hljs-comment"># 1h in millisecond</span><br><span class="hljs-attr">security.jwt.expiration-time</span>=<span class="hljs-string">3600000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># MybatisProperties</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.example.springsecurity.entity</span><br><span class="hljs-attr">mybatis.configuration.useGeneratedKeys</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">mybatis.configuration.mapUnderscoreToCamelCase</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h2 id="创建用户实体"><a href="#创建用户实体" class="headerlink" title="创建用户实体"></a>创建用户实体</h2><p>在包 <code>entities</code> 内创建一个文件 <code>User.java</code> 并添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.entity;<br><br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br><span class="hljs-comment">//Getter and Setter</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>在包 <code>dao</code> 内创建一个文件 <code>UserMapper.java</code>，它代表用户实体的数据访问层。添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.dao;<br><br><span class="hljs-keyword">import</span> com.example.springsecurity.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span>&#123;<br>    Optional&lt;User&gt; <span class="hljs-title function_">findByUserName</span><span class="hljs-params">(String userName)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用身份验证详细信息扩展用户实体"><a href="#使用身份验证详细信息扩展用户实体" class="headerlink" title="使用身份验证详细信息扩展用户实体"></a>使用身份验证详细信息扩展用户实体</h2><p>为了管理与身份验证相关的用户详细信息，Spring Security 提供了一个名为<code>UserDetails</code> 的接口，其中包含用户实体必须重写实现的属性和方法。</p><p>更新文件 <code>User.java</code> 以实现 <code>UserDetails</code> 接口；以下是该文件的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.entity;<br><br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-keyword">private</span> String password;<br><span class="hljs-comment">//返回用户的角色列表；它有助于管理权限。我们返回一个空列表，因为目前我们不涉及基于角色的访问控制</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> List.of();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><span class="hljs-comment">//返回用户名，它是有关用户的唯一信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">确保方法 isAccountNonExpired()、isAccountNonLocked()、isCredentialsNonExpired() 和 isEnabled() 返回“true”，否则身份验证将失败。可以自定义这些方法的逻辑以满足您的需求。</span><br><span class="hljs-comment">*/</span>         <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建JWT服务"><a href="#创建JWT服务" class="headerlink" title="创建JWT服务"></a>创建JWT服务</h2><p>要生成、解码或验证 <code>JSON Web</code> 令牌，我们必须公开使用我们之前安装的库的相关方法。我们将它们分组到名为 <code>JwtService</code> 的服务类中。</p><p>创建一个包 <code>security</code>，然后添加文件 <code>JwtService.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.security;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.io.Decoders;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.security.Keys;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.security.Key;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtService</span> &#123;<br><br>        <span class="hljs-meta">@Value(&quot;$&#123;security.jwt.secret-key&#125;&quot;)</span><br>        <span class="hljs-keyword">private</span> String secretKey;<br><br>        <span class="hljs-meta">@Value(&quot;$&#123;security.jwt.expiration-time&#125;&quot;)</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> jwtExpiration;<br><br>        <span class="hljs-comment">//从token中获取用户名</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">extractUsername</span><span class="hljs-params">(String token)</span> &#123;<br>            <span class="hljs-keyword">return</span> extractClaim(token, Claims::getSubject);<br>        &#125;<br><br>        <span class="hljs-comment">//从 JWT 中提取指定声明</span><br>        <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">extractClaim</span><span class="hljs-params">(String token, Function&lt;Claims, T&gt; claimsResolver)</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> extractAllClaims(token);<br>            <span class="hljs-keyword">return</span> claimsResolver.apply(claims);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(UserDetails userDetails)</span> &#123;<br>            <span class="hljs-keyword">return</span> generateToken(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), userDetails);<br>        &#125;<br><br>        <span class="hljs-comment">//生成带有额外声明的 JWT</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(Map&lt;String, Object&gt; extraClaims, UserDetails userDetails)</span> &#123;<br>            <span class="hljs-keyword">return</span> buildToken(extraClaims, userDetails, jwtExpiration);<br>        &#125;<br><br>        <span class="hljs-comment">//获取 JWT 的过期时间</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getExpirationTime</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> jwtExpiration;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> String <span class="hljs-title function_">buildToken</span><span class="hljs-params">(</span><br><span class="hljs-params">                Map&lt;String, Object&gt; extraClaims,</span><br><span class="hljs-params">                UserDetails userDetails,</span><br><span class="hljs-params">                <span class="hljs-type">long</span> expiration</span><br><span class="hljs-params">        )</span> &#123;<br>            <span class="hljs-keyword">return</span> Jwts<br>                    .builder()<br>                    .setClaims(extraClaims)<br>                    .setSubject(userDetails.getUsername())<br>                    .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>                    .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expiration))<br>                    .signWith(getSignInKey(), SignatureAlgorithm.HS256)<br>                    .compact();<br>        &#125;<br><br>        <span class="hljs-comment">//验证 JWT 是否有效</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTokenValid</span><span class="hljs-params">(String token, UserDetails userDetails)</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> extractUsername(token);<br>            <span class="hljs-keyword">return</span> (username.equals(userDetails.getUsername())) &amp;&amp; !isTokenExpired(token);<br>        &#125;<br><br>        <span class="hljs-comment">//检查 JWT 是否过期</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTokenExpired</span><span class="hljs-params">(String token)</span> &#123;<br>            <span class="hljs-keyword">return</span> extractExpiration(token).before(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        &#125;<br><br>        <span class="hljs-comment">//从 JWT 中提取过期时间</span><br>        <span class="hljs-keyword">private</span> Date <span class="hljs-title function_">extractExpiration</span><span class="hljs-params">(String token)</span> &#123;<br>            <span class="hljs-keyword">return</span> extractClaim(token, Claims::getExpiration);<br>        &#125;<br><br>        <span class="hljs-comment">//从 JWT 中提取所有声明</span><br>        <span class="hljs-keyword">private</span> Claims <span class="hljs-title function_">extractAllClaims</span><span class="hljs-params">(String token)</span> &#123;<br>            <span class="hljs-keyword">return</span> Jwts<br>                    .parserBuilder()<br>                    .setSigningKey(getSignInKey())<br>                    .build()<br>                    .parseClaimsJws(token)<br>                    .getBody();<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> Key <span class="hljs-title function_">getSignInKey</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">byte</span>[] keyBytes = Decoders.BASE64.decode(secretKey);<br>            <span class="hljs-keyword">return</span> Keys.hmacShaKeyFor(keyBytes);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将要使用的方法是 <code>generateToken()</code> 、<code>isTokenValid()</code> 和 <code>getExpirationTime()</code>。</p><p>要生成 <code>JWT</code> 令牌，我们需要一个密钥和令牌过期时间；这些值是使用注释 <code>@Value</code> 从应用程序配置属性文件中读取的。</p><p>在 <code>application.properties</code> 中对应：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">security.jwt.secret-key</span>=<span class="hljs-string">3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b</span><br><span class="hljs-comment"># 1h in millisecond</span><br><span class="hljs-attr">security.jwt.expiration-time</span>=<span class="hljs-string">3600000</span><br></code></pre></td></tr></table></figure><p>密钥必须是 256 位的 HMAC 哈希字符串（<a href="https://www.devglan.com/online-tools/hmac-sha256-online">生成网站</a>），否则，令牌生成将抛出错误，令牌过期时间以毫秒表示。</p><h2 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h2><ul><li><p>通过在我们的数据库中查找用户来执行身份验证。</p></li><li><p>认证成功后生成JWT token。</p></li></ul><p>创建一个包 <code>config</code>，添加文件 <code>ApplicationConfiguration.java</code> 并添加下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.config;<br><br><span class="hljs-keyword">import</span> com.example.springsecurity.dao.UserMapper;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationProvider;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.dao.DaoAuthenticationProvider;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationConfiguration</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserMapper userMapper;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ApplicationConfiguration</span><span class="hljs-params">(UserMapper userMapper)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userMapper = userMapper;<br>    &#125;<br><br>    <span class="hljs-comment">//使用UserMapper 检索用户</span><br>    <span class="hljs-meta">@Bean</span><br>    UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username -&gt; userMapper.findByUserName(username)<br>                .orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;User not found&quot;</span>));<br>    &#125;<br><span class="hljs-comment">//创建 BCryptPasswordEncoder() 的实例，用于对普通用户密码进行编码。</span><br>    <span class="hljs-meta">@Bean</span><br>    BCryptPasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(AuthenticationConfiguration config)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> config.getAuthenticationManager();<br>    &#125;<br><span class="hljs-comment">//设置新的策略来执行身份验证</span><br>    <span class="hljs-meta">@Bean</span><br>    AuthenticationProvider <span class="hljs-title function_">authenticationProvider</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DaoAuthenticationProvider</span> <span class="hljs-variable">authProvider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaoAuthenticationProvider</span>();<br><br>        authProvider.setUserDetailsService(userDetailsService());<br>        authProvider.setPasswordEncoder(passwordEncoder());<br><br>        <span class="hljs-keyword">return</span> authProvider;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建身份验证中间件"><a href="#创建身份验证中间件" class="headerlink" title="创建身份验证中间件"></a>创建身份验证中间件</h2><p>对于每个请求，我们都希望检索标头 <code>Authorization</code> 中的 <code>JWT</code> 令牌，并验证它：</p><ul><li><p>如果 <code>token</code> 无效，则拒绝请求，否则继续。</p></li><li><p>如果令牌有效，则提取用户名，在数据库中找到相关用户，并将其设置在身份验证上下文中，以便可以在任何应用程序层访问它。</p></li></ul><p>在包中 <code>security</code> 中创建一个文件 <code>JwtAuthenticationFilter.java</code> 并添加下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.security;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.FilterChain;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletException;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.springframework.lang.NonNull;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.WebAuthenticationDetailsSource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HandlerExceptionResolver handlerExceptionResolver;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JwtService jwtService;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JwtAuthenticationFilter</span><span class="hljs-params">(</span><br><span class="hljs-params">            JwtService jwtService,</span><br><span class="hljs-params">            UserDetailsService userDetailsService,</span><br><span class="hljs-params">            HandlerExceptionResolver handlerExceptionResolver</span><br><span class="hljs-params">    )</span> &#123;<br>        <span class="hljs-built_in">this</span>.jwtService = jwtService;<br>        <span class="hljs-built_in">this</span>.userDetailsService = userDetailsService;<br>        <span class="hljs-built_in">this</span>.handlerExceptionResolver = handlerExceptionResolver;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> HttpServletRequest request,</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> HttpServletResponse response,</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> FilterChain filterChain</span><br><span class="hljs-params">    )</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">authHeader</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (authHeader == <span class="hljs-literal">null</span> || !authHeader.startsWith(<span class="hljs-string">&quot;Bearer &quot;</span>)) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> authHeader.substring(<span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> jwtService.extractUsername(jwt);<br><br>            <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br><br>            <span class="hljs-keyword">if</span> (userName != <span class="hljs-literal">null</span> &amp;&amp; authentication == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.userDetailsService.loadUserByUsername(userName);<br><br>                <span class="hljs-keyword">if</span> (jwtService.isTokenValid(jwt, userDetails)) &#123;<br>                    <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(<br>                            userDetails,<br>                            <span class="hljs-literal">null</span>,<br>                            userDetails.getAuthorities()<br>                    );<br><br>                    authToken.setDetails(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));<br>                    SecurityContextHolder.getContext().setAuthentication(authToken);<br>                &#125;<br>            &#125;<br><br>            filterChain.doFilter(request, response);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>            <span class="hljs-comment">//使用 HandlerExceptionResolver 将错误转发到全局异常处理程序</span><br>            handlerExceptionResolver.resolveException(request, response, <span class="hljs-literal">null</span>, exception);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置应用程序请求者过滤器"><a href="#配置应用程序请求者过滤器" class="headerlink" title="配置应用程序请求者过滤器"></a>配置应用程序请求者过滤器</h2><p>自定义身份验证已准备就绪，剩下的就是定义传入请求在转发到应用程序中间件之前必</p><p>须满足哪些条件。我们想要以下标准：</p><ul><li><p>不需要提供 <code>CSRF</code> 令牌。</p></li><li><p>请求 <code>URL</code> 路径匹配 <code>/auth/signup</code>，<code>/auth/login</code> 时不需要认证。</p></li><li><p>任何其他请求 <code>URL</code> 路径都必须经过验证。</p></li><li><p>请求是无状态的，这意味着每个请求都必须被视为一个新的请求，即使它来自同一个客户端或之前已经收到过。</p></li><li><p>必须使用自定义身份验证提供程序，并且必须在身份验证中间件之前执行。</p></li><li><p><code>CORS</code> 配置必须仅允许 <code>POST</code> 和 <code>GET</code> 请求。</p></li></ul><p>在包中 <code>config</code> 中创建一个文件 <code>SecurityConfiguration.java</code> 并添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.config;<br><br><span class="hljs-keyword">import</span> com.example.springsecurity.security.JwtAuthenticationFilter;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationProvider;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthenticationProvider authenticationProvider;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JwtAuthenticationFilter jwtAuthenticationFilter;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityConfiguration</span><span class="hljs-params">(</span><br><span class="hljs-params">            JwtAuthenticationFilter jwtAuthenticationFilter,</span><br><span class="hljs-params">            AuthenticationProvider authenticationProvider</span><br><span class="hljs-params">    )</span> &#123;<br>        <span class="hljs-built_in">this</span>.authenticationProvider = authenticationProvider;<br>        <span class="hljs-built_in">this</span>.jwtAuthenticationFilter = jwtAuthenticationFilter;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf()<br>                .disable()<br>                .authorizeHttpRequests()<br>                .requestMatchers(<span class="hljs-string">&quot;/auth/**&quot;</span>)<br>                .permitAll()<br>                .anyRequest()<br>                .authenticated()<br>                .and()<br>                .sessionManagement()<br>                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>                .and()<br>                .authenticationProvider(authenticationProvider)<br>                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);<br><br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    CorsConfigurationSource <span class="hljs-title function_">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br><br>        configuration.setAllowedOrigins(List.of(<span class="hljs-string">&quot;http://localhost:8060&quot;</span>));<br>        configuration.setAllowedMethods(List.of(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>));<br>        configuration.setAllowedHeaders(List.of(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-string">&quot;Content-Type&quot;</span>));<br><br>        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br><br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>,configuration);<br><br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建身份验证服务"><a href="#创建身份验证服务" class="headerlink" title="创建身份验证服务"></a>创建身份验证服务</h2><p>该服务将包含注册新用户和验证现有用户的逻辑。</p><p>创建一个包含这两个操作的 <code>dto</code>包。</p><p>创建文件 <code>RegisterUserDto.java</code> 并添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.dto;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterUserDto</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建文件<code>LoginUserDto.java</code>并添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.dto;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUserDto</span> &#123;<br><br>    <span class="hljs-keyword">private</span>  String userName;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在包中<code>service</code>创建一个文件<code>AuthenticationService.java</code>并添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.service;<br><br><span class="hljs-keyword">import</span> com.example.springsecurity.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.example.springsecurity.dto.LoginUserDto;<br><span class="hljs-keyword">import</span> com.example.springsecurity.dto.RegisterUserDto;<br><span class="hljs-keyword">import</span> com.example.springsecurity.entity.User;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserMapper userMapper;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PasswordEncoder passwordEncoder;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthenticationManager authenticationManager;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AuthenticationService</span><span class="hljs-params">(</span><br><span class="hljs-params">            UserMapper userMapper,</span><br><span class="hljs-params">            AuthenticationManager authenticationManager,</span><br><span class="hljs-params">            PasswordEncoder passwordEncoder</span><br><span class="hljs-params">    )</span> &#123;<br>        <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;<br>        <span class="hljs-built_in">this</span>.userMapper = userMapper;<br>        <span class="hljs-built_in">this</span>.passwordEncoder = passwordEncoder;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">signup</span><span class="hljs-params">(RegisterUserDto input)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUserName(input.getUserName());<br>        user.setPassword(passwordEncoder.encode(input.getPassword()));<br>        userMapper.insertUser(user);<br><br>        <span class="hljs-keyword">return</span> userMapper.findByUserName(user.getUsername()).get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">authenticate</span><span class="hljs-params">(LoginUserDto input)</span> &#123;<br>        authenticationManager.authenticate(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(<br>                        input.getUserName(),<br>                        input.getPassword()<br>                )<br>        );<br><br>        <span class="hljs-keyword">return</span> userMapper.findByUserName(input.getUserName())<br>                .orElseThrow();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建用户注册和身份验证路由"><a href="#创建用户注册和身份验证路由" class="headerlink" title="创建用户注册和身份验证路由"></a>创建用户注册和身份验证路由</h2><p>我们现在可以分别为用户注册和身份验证创建路由<code>/auth/signup</code>和<code>/auth/login</code>。</p><p>创建一个包<code>controller</code>，添加文件<code>AuthenticationController.java</code>并添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.controller;<br><br><span class="hljs-keyword">import</span> com.example.springsecurity.service.AuthenticationService;<br><span class="hljs-keyword">import</span> com.example.springsecurity.dto.LoginUserDto;<br><span class="hljs-keyword">import</span> com.example.springsecurity.dto.RegisterUserDto;<br><span class="hljs-keyword">import</span> com.example.springsecurity.entity.User;<br><span class="hljs-keyword">import</span> com.example.springsecurity.security.JwtService;<br><span class="hljs-keyword">import</span> com.example.springsecurity.security.responses.LoginResponse;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-meta">@RequestMapping(&quot;/auth&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JwtService jwtService;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthenticationService authenticationService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AuthenticationController</span><span class="hljs-params">(JwtService jwtService, AuthenticationService authenticationService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.jwtService = jwtService;<br>        <span class="hljs-built_in">this</span>.authenticationService = authenticationService;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/signup&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;User&gt; <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> RegisterUserDto registerUserDto)</span> &#123;<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">registeredUser</span> <span class="hljs-operator">=</span> authenticationService.signup(registerUserDto);<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(registeredUser);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;LoginResponse&gt; <span class="hljs-title function_">authenticate</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginUserDto loginUserDto)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">authenticatedUser</span> <span class="hljs-operator">=</span> authenticationService.authenticate(loginUserDto);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwtToken</span> <span class="hljs-operator">=</span> jwtService.generateToken(authenticatedUser);<br><br>        <span class="hljs-type">LoginResponse</span> <span class="hljs-variable">loginResponse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginResponse</span>();<br>        loginResponse.setToken(jwtToken);<br>        loginResponse.setExpiresIn(jwtService.getExpirationTime());<br><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(loginResponse);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>身份验证请求返回一个 <code>LoginReponse</code>实例；下面是该文件的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.security.responses;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginResponse</span> &#123;<br>    <span class="hljs-keyword">private</span> String token;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> expiresIn;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getToken</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setToken</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-built_in">this</span>.token = token;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getExpiresIn</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> expiresIn;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setExpiresIn</span><span class="hljs-params">(<span class="hljs-type">long</span> expiresIn)</span> &#123;<br>        <span class="hljs-built_in">this</span>.expiresIn = expiresIn;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>打开 <code>PostMan</code>，发送 <code>POST</code> 请求，注册成功，数据库插入新用户</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Spring/SpringSecurity/202403242145716.png" alt="image-20240324212733396" style="zoom:50%;" /><p>现在，让我们尝试对我们注册的用户进行身份验证。发送一个 POST 请求，<code>/auth/login</code>并在请求正文中包含信息。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Spring/SpringSecurity/202403242145717.png" alt="image-20240324212811607" style="zoom:50%;" /><h2 id="创建受限端点以检索用户"><a href="#创建受限端点以检索用户" class="headerlink" title="创建受限端点以检索用户"></a>创建受限端点以检索用户</h2><p>端点<code>/user</code> 从提供的 <code>JWT</code> 令牌返回经过身份验证的用户。</p><p>创建文件<code>UserController.java</code>并添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.controller;<br><br><span class="hljs-keyword">import</span> com.example.springsecurity.entity.User;<br><span class="hljs-keyword">import</span> com.example.springsecurity.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;User&gt; <span class="hljs-title function_">authenticatedUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> (User) authentication.getPrincipal();<br><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(currentUser);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在前文的 <code>JwtAuthenticationFilter.java</code> 中，我们从文件设置的安全上下文中检索已经过身份验证的用户 。</p><h2 id="测试实现"><a href="#测试实现" class="headerlink" title="测试实现"></a>测试实现</h2><p>重新运行该应用程序并按照以下场景进行操作：</p><ol><li><code>/user</code>发送 <code>GET</code> 请求，收到 403 错误</li><li>使用 <code>POST</code> 请求进行身份验证<code>/auth/login</code>并获取 JWT 令牌。</li><li>将 <code>JWT</code> 令牌放在<code>/user</code>请求的授权标头中，将获得带有数据的 <code>HTTP</code> 响应代码 200。</li></ol><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Spring/SpringSecurity/202403242145718.png" alt="image-20240324213246301" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Spring/SpringSecurity/202403242145719.png" alt="image-20240324213329391" style="zoom:50%;" /><h2 id="自定义身份验证错误消息"><a href="#自定义身份验证错误消息" class="headerlink" title="自定义身份验证错误消息"></a>自定义身份验证错误消息</h2><p>该 <code>API</code> 会阻止未经身份验证的用户访问，或在身份验证凭据无效时返回状态错误。</p><p>我们希望通过不同的身份验证来返回更明确的消息。下表列举了这些身份验证：</p><table><thead><tr><th align="left">授权错误</th><th align="left">抛出异常</th><th align="left">HTTP 状态代码</th></tr></thead><tbody><tr><td align="left">错误的登录凭据</td><td align="left">错误凭证异常</td><td align="left">401</td></tr><tr><td align="left">帐户被锁定</td><td align="left">账户状态异常</td><td align="left">403</td></tr><tr><td align="left">无权访问资源</td><td align="left">访问被拒绝异常</td><td align="left">403</td></tr><tr><td align="left">JWT 无效</td><td align="left">签名异常</td><td align="left">401</td></tr><tr><td align="left">JWT 已过期</td><td align="left">ExpiredJwtException</td><td align="left">401</td></tr></tbody></table><p>为了处理这些错误，我们必须使用 Spring 全局异常处理程序来捕获抛出的异常并定制要发送给客户端的响应。</p><p>创建一个包<code>exception</code>，然后创建一个名为的文件<code>GlobalExceptionHandler.java</code>并添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springsecurity.exception;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.ExpiredJwtException;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.security.SignatureException;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatusCode;<br><span class="hljs-keyword">import</span> org.springframework.http.ProblemDetail;<br><span class="hljs-keyword">import</span> org.springframework.security.access.AccessDeniedException;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AccountStatusException;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.BadCredentialsException;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> ProblemDetail <span class="hljs-title function_">handleSecurityException</span><span class="hljs-params">(Exception exception)</span> &#123;<br>        <span class="hljs-type">ProblemDetail</span> <span class="hljs-variable">errorDetail</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        exception.printStackTrace();<br><br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> BadCredentialsException) &#123;<br>            errorDetail = ProblemDetail.forStatusAndDetail(HttpStatusCode.valueOf(<span class="hljs-number">401</span>), exception.getMessage());<br>            errorDetail.setProperty(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;The username or password is incorrect&quot;</span>);<br><br>            <span class="hljs-keyword">return</span> errorDetail;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> AccountStatusException) &#123;<br>            errorDetail = ProblemDetail.forStatusAndDetail(HttpStatusCode.valueOf(<span class="hljs-number">403</span>), exception.getMessage());<br>            errorDetail.setProperty(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;The account is locked&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> AccessDeniedException) &#123;<br>            errorDetail = ProblemDetail.forStatusAndDetail(HttpStatusCode.valueOf(<span class="hljs-number">403</span>), exception.getMessage());<br>            errorDetail.setProperty(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;You are not authorized to access this resource&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> SignatureException) &#123;<br>            errorDetail = ProblemDetail.forStatusAndDetail(HttpStatusCode.valueOf(<span class="hljs-number">403</span>), exception.getMessage());<br>            errorDetail.setProperty(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;The JWT signature is invalid&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ExpiredJwtException) &#123;<br>            errorDetail = ProblemDetail.forStatusAndDetail(HttpStatusCode.valueOf(<span class="hljs-number">403</span>), exception.getMessage());<br>            errorDetail.setProperty(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;The JWT token has expired&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (errorDetail == <span class="hljs-literal">null</span>) &#123;<br>            errorDetail = ProblemDetail.forStatusAndDetail(HttpStatusCode.valueOf(<span class="hljs-number">500</span>), exception.getMessage());<br>            errorDetail.setProperty(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;Unknown internal server error.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> errorDetail;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新运行应用程序并尝试使用无效凭据进行身份验证，发送带有过期 JWT 或无效 JWT 的请求等</p><p><strong>Token 错误</strong></p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Spring/SpringSecurity/202403242145721.png" alt="image-20240324213557138" style="zoom:50%;" /><p><strong>密码错误</strong></p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Spring/SpringSecurity/202403242145722.png" alt="image-20240324213650097" style="zoom:50%;" /><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本文中，我们了解了如何在 Spring Boot 应用程序中实现 JSON Web Token 身份验证。以下是此过程的主要步骤：</p><ul><li>JWT 身份验证过滤器从请求标头中提取并验证令牌。</li><li>将一些 API 路由列入白名单并保护那些需要令牌的路由。</li><li>执行身份验证，生成 JWT，并设置过期时间。</li><li>使用生成的 JWT 访问受保护的路由。</li><li>捕获身份验证异常以定制发送给客户端的响应。</li></ul><h3 id="困难解决"><a href="#困难解决" class="headerlink" title="困难解决"></a>困难解决</h3><h4 id="SpringBoot启动报错"><a href="#SpringBoot启动报错" class="headerlink" title="SpringBoot启动报错"></a>SpringBoot启动报错</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Error starting ApplicationContext. To display the condition evaluation report re-run your application with <span class="hljs-string">&#x27;debug&#x27;</span> enabled.<br><span class="hljs-number">2024</span>-<span class="hljs-number">03</span>-24T15:<span class="hljs-number">17</span>:<span class="hljs-number">57.060</span>+08:<span class="hljs-number">00</span> ERROR <span class="hljs-number">9748</span> --- [main] o.s.boot.SpringApplication: Application run failed<br>java.lang.IllegalArgumentException: Invalid value type <span class="hljs-keyword">for</span> attribute <span class="hljs-string">&#x27;factoryBeanObjectType&#x27;</span>: java.lang.String at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getTypeForFactoryBeanFromAttributes(FactoryBeanRegistrySupport.java:<span class="hljs-number">86</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">837</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>] at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:<span class="hljs-number">621</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:<span class="hljs-number">575</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:<span class="hljs-number">534</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>] at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:<span class="hljs-number">138</span>) ~[spring-context-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>] at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:<span class="hljs-number">788</span>) ~[spring-context-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="hljs-number">606</span>) ~[spring-context-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:<span class="hljs-number">146</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:<span class="hljs-number">754</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:<span class="hljs-number">456</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>] at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="hljs-number">334</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>] at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="hljs-number">1354</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="hljs-number">1343</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]at com.example.springsecurity.SpringSecurityApplication.main(SpringSecurityApplication.java:<span class="hljs-number">10</span>) ~[classes/:na]<br></code></pre></td></tr></table></figure><p>解决：修改 <code>application.properties</code></p><h4 id="Mybatis解析错误"><a href="#Mybatis解析错误" class="headerlink" title="Mybatis解析错误"></a>Mybatis解析错误</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs java">Error starting ApplicationContext. To display the condition evaluation report re-run your application with <span class="hljs-string">&#x27;debug&#x27;</span> enabled.<br><span class="hljs-number">2024</span>-<span class="hljs-number">03</span>-24T15:<span class="hljs-number">47</span>:<span class="hljs-number">39.034</span>+08:<span class="hljs-number">00</span> ERROR <span class="hljs-number">15164</span> --- [           main] o.s.boot.SpringApplication               : Application run failed<br><br>org.springframework.context.ApplicationContextException: Unable to start web server<br>at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:<span class="hljs-number">165</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="hljs-number">618</span>) ~[spring-context-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:<span class="hljs-number">146</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:<span class="hljs-number">754</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:<span class="hljs-number">456</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="hljs-number">334</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="hljs-number">1354</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="hljs-number">1343</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at com.example.springsecurity.SpringSecurityApplication.main(SpringSecurityApplication.java:<span class="hljs-number">11</span>) ~[classes/:na]<br>Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat<br>at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:<span class="hljs-number">145</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.&lt;init&gt;(TomcatWebServer.java:<span class="hljs-number">105</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:<span class="hljs-number">499</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:<span class="hljs-number">218</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:<span class="hljs-number">188</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:<span class="hljs-number">162</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>... <span class="hljs-number">8</span> common frames omitted<br>Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name <span class="hljs-string">&#x27;jwtAuthenticationFilter&#x27;</span> defined in file [D:\Sia\Project\SpringSecurity\target\classes\com\example\springsecurity\security\JwtAuthenticationFilter.class]: Unsatisfied dependency expressed through constructor parameter <span class="hljs-number">1</span>: Error creating bean with name <span class="hljs-string">&#x27;applicationConfiguration&#x27;</span> defined in file [D:\Sia\Project\SpringSecurity\target\classes\com\example\springsecurity\config\ApplicationConfiguration.class]: Unsatisfied dependency expressed through constructor parameter <span class="hljs-number">0</span>: Error creating bean with name <span class="hljs-string">&#x27;userMapper&#x27;</span> defined in file [D:\Sia\Project\SpringSecurity\target\classes\com\example\springsecurity\dao\UserMapper.class]: Cannot resolve reference to bean <span class="hljs-string">&#x27;sqlSessionTemplate&#x27;</span> <span class="hljs-keyword">while</span> setting bean property <span class="hljs-string">&#x27;sqlSessionTemplate&#x27;</span><br>at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:<span class="hljs-number">795</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:<span class="hljs-number">237</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1355</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1192</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">562</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">522</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class="hljs-number">0</span>(AbstractBeanFactory.java:<span class="hljs-number">326</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="hljs-number">234</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="hljs-number">324</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="hljs-number">205</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:<span class="hljs-number">210</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:<span class="hljs-number">173</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:<span class="hljs-number">168</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:<span class="hljs-number">153</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:<span class="hljs-number">86</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:<span class="hljs-number">266</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:<span class="hljs-number">240</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:<span class="hljs-number">52</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:<span class="hljs-number">4866</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="hljs-number">171</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:<span class="hljs-number">1332</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:<span class="hljs-number">1322</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:<span class="hljs-number">317</span>) ~[na:na]<br>at java.base/java.util.concurrent.FutureTask.run(FutureTask.java) ~[na:na]<br>at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:<span class="hljs-number">75</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:<span class="hljs-number">145</span>) ~[na:na]<br>at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:<span class="hljs-number">866</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:<span class="hljs-number">845</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="hljs-number">171</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:<span class="hljs-number">1332</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:<span class="hljs-number">1322</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:<span class="hljs-number">317</span>) ~[na:na]<br>at java.base/java.util.concurrent.FutureTask.run(FutureTask.java) ~[na:na]<br>at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:<span class="hljs-number">75</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:<span class="hljs-number">145</span>) ~[na:na]<br>at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:<span class="hljs-number">866</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:<span class="hljs-number">240</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="hljs-number">171</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.core.StandardService.startInternal(StandardService.java:<span class="hljs-number">433</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="hljs-number">171</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:<span class="hljs-number">921</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="hljs-number">171</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.apache.catalina.startup.Tomcat.start(Tomcat.java:<span class="hljs-number">437</span>) ~[tomcat-embed-core-<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>.jar:<span class="hljs-number">10.1</span><span class="hljs-number">.19</span>]<br>at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:<span class="hljs-number">126</span>) ~[spring-boot-<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>.jar:<span class="hljs-number">3.2</span><span class="hljs-number">.4</span>]<br>... <span class="hljs-number">13</span> common frames omitted<br>Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name <span class="hljs-string">&#x27;applicationConfiguration&#x27;</span> defined in file [D:\Sia\Project\SpringSecurity\target\classes\com\example\springsecurity\config\ApplicationConfiguration.class]: Unsatisfied dependency expressed through constructor parameter <span class="hljs-number">0</span>: Error creating bean with name <span class="hljs-string">&#x27;userMapper&#x27;</span> defined in file [D:\Sia\Project\SpringSecurity\target\classes\com\example\springsecurity\dao\UserMapper.class]: Cannot resolve reference to bean <span class="hljs-string">&#x27;sqlSessionTemplate&#x27;</span> <span class="hljs-keyword">while</span> setting bean property <span class="hljs-string">&#x27;sqlSessionTemplate&#x27;</span><br>at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:<span class="hljs-number">795</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:<span class="hljs-number">237</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1355</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1192</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">562</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">522</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class="hljs-number">0</span>(AbstractBeanFactory.java:<span class="hljs-number">326</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="hljs-number">234</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="hljs-number">324</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="hljs-number">200</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:<span class="hljs-number">409</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1335</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1165</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">562</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">522</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class="hljs-number">0</span>(AbstractBeanFactory.java:<span class="hljs-number">326</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="hljs-number">234</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="hljs-number">324</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="hljs-number">200</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:<span class="hljs-number">254</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:<span class="hljs-number">1443</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:<span class="hljs-number">1353</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:<span class="hljs-number">904</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:<span class="hljs-number">782</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>... <span class="hljs-number">56</span> common frames omitted<br>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="hljs-string">&#x27;userMapper&#x27;</span> defined in file [D:\Sia\Project\SpringSecurity\target\classes\com\example\springsecurity\dao\UserMapper.class]: Cannot resolve reference to bean <span class="hljs-string">&#x27;sqlSessionTemplate&#x27;</span> <span class="hljs-keyword">while</span> setting bean property <span class="hljs-string">&#x27;sqlSessionTemplate&#x27;</span><br>at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:<span class="hljs-number">377</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:<span class="hljs-number">135</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1685</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1434</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">599</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">522</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class="hljs-number">0</span>(AbstractBeanFactory.java:<span class="hljs-number">326</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="hljs-number">234</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="hljs-number">324</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="hljs-number">200</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:<span class="hljs-number">254</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:<span class="hljs-number">1443</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:<span class="hljs-number">1353</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:<span class="hljs-number">904</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:<span class="hljs-number">782</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>... <span class="hljs-number">79</span> common frames omitted<br>Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name <span class="hljs-string">&#x27;sqlSessionTemplate&#x27;</span> defined in <span class="hljs-keyword">class</span> <span class="hljs-title class_">path</span> resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method <span class="hljs-string">&#x27;sqlSessionTemplate&#x27;</span> parameter <span class="hljs-number">0</span>: Error creating bean with name <span class="hljs-string">&#x27;sqlSessionFactory&#x27;</span> defined in <span class="hljs-keyword">class</span> <span class="hljs-title class_">path</span> resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method <span class="hljs-string">&#x27;sqlSessionFactory&#x27;</span> threw exception with message: Failed to parse mapping resource: <span class="hljs-string">&#x27;file [D:\Sia\Project\SpringSecurity\target\classes\mapper\user-mapper.xml]&#x27;</span><br>at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:<span class="hljs-number">795</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:<span class="hljs-number">542</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1335</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1165</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">562</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">522</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class="hljs-number">0</span>(AbstractBeanFactory.java:<span class="hljs-number">326</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="hljs-number">234</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="hljs-number">324</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="hljs-number">200</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:<span class="hljs-number">365</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>... <span class="hljs-number">93</span> common frames omitted<br>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="hljs-string">&#x27;sqlSessionFactory&#x27;</span> defined in <span class="hljs-keyword">class</span> <span class="hljs-title class_">path</span> resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method <span class="hljs-string">&#x27;sqlSessionFactory&#x27;</span> threw exception with message: Failed to parse mapping resource: <span class="hljs-string">&#x27;file [D:\Sia\Project\SpringSecurity\target\classes\mapper\user-mapper.xml]&#x27;</span><br>at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:<span class="hljs-number">648</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:<span class="hljs-number">636</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1335</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">1165</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">562</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">522</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class="hljs-number">0</span>(AbstractBeanFactory.java:<span class="hljs-number">326</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="hljs-number">234</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="hljs-number">324</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="hljs-number">200</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:<span class="hljs-number">254</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:<span class="hljs-number">1443</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:<span class="hljs-number">1353</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:<span class="hljs-number">904</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:<span class="hljs-number">782</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>... <span class="hljs-number">103</span> common frames omitted<br>Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method <span class="hljs-string">&#x27;sqlSessionFactory&#x27;</span> threw exception with message: Failed to parse mapping resource: <span class="hljs-string">&#x27;file [D:\Sia\Project\SpringSecurity\target\classes\mapper\user-mapper.xml]&#x27;</span><br>at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:<span class="hljs-number">177</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:<span class="hljs-number">644</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>... <span class="hljs-number">117</span> common frames omitted<br>Caused by: java.io.IOException: Failed to parse mapping resource: <span class="hljs-string">&#x27;file [D:\Sia\Project\SpringSecurity\target\classes\mapper\user-mapper.xml]&#x27;</span><br>at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:<span class="hljs-number">700</span>) ~[mybatis-spring-<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>.jar:<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>]<br>at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:<span class="hljs-number">577</span>) ~[mybatis-spring-<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>.jar:<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>]<br>at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:<span class="hljs-number">720</span>) ~[mybatis-spring-<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>.jar:<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>]<br>at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:<span class="hljs-number">189</span>) ~[mybatis-spring-boot-autoconfigure-<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>.jar:<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>]<br>at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:<span class="hljs-number">103</span>) ~[na:na]<br>at java.base/java.lang.reflect.Method.invoke(Method.java:<span class="hljs-number">580</span>) ~[na:na]<br>at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:<span class="hljs-number">140</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.5</span>]<br>... <span class="hljs-number">118</span> common frames omitted<br>Caused by: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is <span class="hljs-string">&#x27;file [D:\Sia\Project\SpringSecurity\target\classes\mapper\user-mapper.xml]&#x27;</span>. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias <span class="hljs-string">&#x27;UserResultMap&#x27;</span>.  Cause: java.lang.ClassNotFoundException: Cannot find class: UserResultMap<br>at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:<span class="hljs-number">127</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:<span class="hljs-number">100</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:<span class="hljs-number">698</span>) ~[mybatis-spring-<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>.jar:<span class="hljs-number">3.0</span><span class="hljs-number">.3</span>]<br>... <span class="hljs-number">124</span> common frames omitted<br>Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias <span class="hljs-string">&#x27;UserResultMap&#x27;</span>.  Cause: java.lang.ClassNotFoundException: Cannot find class: UserResultMap<br>at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:<span class="hljs-number">103</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:<span class="hljs-number">105</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:<span class="hljs-number">143</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:<span class="hljs-number">135</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:<span class="hljs-number">125</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>... <span class="hljs-number">126</span> common frames omitted<br>Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias <span class="hljs-string">&#x27;UserResultMap&#x27;</span>.  Cause: java.lang.ClassNotFoundException: Cannot find class: UserResultMap<br>at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:<span class="hljs-number">128</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:<span class="hljs-number">132</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:<span class="hljs-number">101</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>... <span class="hljs-number">130</span> common frames omitted<br>Caused by: java.lang.ClassNotFoundException: Cannot find class: UserResultMap<br>at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:<span class="hljs-number">226</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:<span class="hljs-number">103</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.io.Resources.classForName(Resources.java:<span class="hljs-number">322</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:<span class="hljs-number">124</span>) ~[mybatis-<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>.jar:<span class="hljs-number">3.5</span><span class="hljs-number">.14</span>]<br>... <span class="hljs-number">132</span> common frames omitted<br></code></pre></td></tr></table></figure><p>修改为 <code>resultMap</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.springsecurity.entity.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserName&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserResultMap&quot;</span>&gt;</span> <br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectFields&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    from user_acc<br>    where user_name = #&#123;userName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="数据库插入用户错误"><a href="#数据库插入用户错误" class="headerlink" title="数据库插入用户错误"></a>数据库插入用户错误</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Error updating database.  Cause: org.postgresql.util.PSQLException: 错误: 语法错误 在 <span class="hljs-string">&quot;user&quot;</span> 或附近的<br>  位置：<span class="hljs-number">13</span><br>### The error may exist in file [D:\Sia\Project\SpringSecurity\target\classes\mapper\user-mapper.xml]<br>### The error may involve com.example.springsecurity.dao.UserMapper.insertUser-Inline<br>### The error occurred <span class="hljs-keyword">while</span> setting parameters<br>### SQL: insert into <span class="hljs-title function_">user</span> <span class="hljs-params">(          user_name, password      )</span>         values(?, ?)<br>### Cause: org.postgresql.util.PSQLException: 错误: 语法错误 在 <span class="hljs-string">&quot;user&quot;</span> 或附近的<br>  位置：<span class="hljs-number">13</span><br>; bad SQL grammar []] with root cause<br></code></pre></td></tr></table></figure><p><code>user</code> 为 <code>Postgresql</code> 的关键字，修改表名称为 <code>user_acc</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Error updating database.  Cause: org.postgresql.util.PSQLException: 错误: <span class="hljs-literal">null</span> value in column <span class="hljs-string">&quot;id&quot;</span> of relation <span class="hljs-string">&quot;user&quot;</span> violates not-<span class="hljs-literal">null</span> constraint<br>  详细：失败, 行包含(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, $2a$<span class="hljs-number">10</span>$V9qsmYkZJbXeL8ZpEhh9out56ljGDbXLlLgSuy4gNLJndqfrXRsvi).<br>### The error may exist in file [D:\Sia\Project\SpringSecurity\target\classes\mapper\user-mapper.xml]<br>### The error may involve com.example.springsecurity.dao.UserMapper.insertUser-Inline<br>### The error occurred <span class="hljs-keyword">while</span> setting parameters<br>### SQL: insert into <span class="hljs-string">&quot;user&quot;</span> (          user_name, password      )         values(?, ?)<br>### Cause: org.postgresql.util.PSQLException: 错误: <span class="hljs-literal">null</span> value in column <span class="hljs-string">&quot;id&quot;</span> of relation <span class="hljs-string">&quot;user&quot;</span> violates not-<span class="hljs-literal">null</span> constraint<br>  详细：失败, 行包含(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, $2a$<span class="hljs-number">10</span>$V9qsmYkZJbXeL8ZpEhh9out56ljGDbXLlLgSuy4gNLJndqfrXRsvi).<br>; 错误: <span class="hljs-literal">null</span> value in column <span class="hljs-string">&quot;id&quot;</span> of relation <span class="hljs-string">&quot;user&quot;</span> violates not-<span class="hljs-literal">null</span> constraint<br>  详细：失败, 行包含(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, $2a$<span class="hljs-number">10</span>$V9qsmYkZJbXeL8ZpEhh9out56ljGDbXLlLgSuy4gNLJndqfrXRsvi).] with root cause<br></code></pre></td></tr></table></figure><p><code>id</code> 默认为 <code>Not NULL</code></p><p>添加序列实现自动增加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> SEQUENCE seq <span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> <span class="hljs-number">1</span> INCREMENT <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>  <span class="hljs-keyword">NO</span> MINVALUE  <span class="hljs-keyword">NO</span> MAXVALUE  CACHE <span class="hljs-number">1</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> user_acc <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> id <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> nextval(<span class="hljs-string">&#x27;seq&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Chapter1</title>
      <link href="/2024/03/16/Angular/Angular_Chapter1/"/>
      <url>/2024/03/16/Angular/Angular_Chapter1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-设计原则和方法"><a href="#1-1-设计原则和方法" class="headerlink" title="1.1 设计原则和方法"></a>1.1 设计原则和方法</h2><p>YAGNI </p><ul><li><p>You Aren’t Gonna Need It</p></li><li><p>不写不需要的代码</p></li></ul><p>DRY</p><ul><li>Don’t Repeat Yourself</li><li>不要重复你自己的代码</li></ul><p>OCP</p><ul><li>OPen Close Principle</li><li>开闭原则，对扩展开放，对修改封闭</li></ul><p>Low Coupling, High Cohesion</p><ul><li>高聚合，低耦合</li></ul><p>Dimeter Law</p><ul><li>迪米特法则，“最少知识” 法则</li><li>一个对象&#x2F;组件只负责必须的少量功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Chapter2</title>
      <link href="/2024/03/16/Angular/Angular_Chapter2/"/>
      <url>/2024/03/16/Angular/Angular_Chapter2/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-Angular-概述"><a href="#2-1-Angular-概述" class="headerlink" title="2.1 Angular 概述"></a>2.1 Angular 概述</h2><p>AngularJS v1.x 官网：<a href="https://angularjs.org/">https://angularjs.org/</a></p><p>Angular v2.x~v8.x 官网：<a href="https://angular.io/">https://angular.io/</a></p><p>Angular中文镜像网站：<a href="https://angular.cn/">https://angular.cn/</a></p><h3 id="搭建Angular开发环境"><a href="#搭建Angular开发环境" class="headerlink" title="搭建Angular开发环境"></a>搭建Angular开发环境</h3><p>前提：Node.js V10.x  以上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\lenovo&gt;node -v<br>v18<span class="hljs-number">.19</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><h4 id="下载并安装脚手架工具"><a href="#下载并安装脚手架工具" class="headerlink" title="下载并安装脚手架工具"></a>下载并安装脚手架工具</h4><p>默认仓库：<code>registry.npmjs.com</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm i -g <span class="hljs-meta">@angular</span>/cli<br></code></pre></td></tr></table></figure><h4 id="运行脚手架工具创建空白项目"><a href="#运行脚手架工具创建空白项目" class="headerlink" title="运行脚手架工具创建空白项目"></a>运行脚手架工具创建空白项目</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ng <span class="hljs-keyword">new</span> <span class="hljs-title class_">myngapp01</span><br></code></pre></td></tr></table></figure><p>最新版没有生成<code>app.module.ts</code>，修改命令</p><p><a href="https://github.com/angular/angular/issues/52751">https://github.com/angular/angular/issues/52751</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">D:\Angular_Learning\Project&gt;ng <span class="hljs-keyword">new</span> <span class="hljs-title class_">myngapp01</span> --no-standalone --routing --ssr=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="进入空白项目并运行开发服务器"><a href="#进入空白项目并运行开发服务器" class="headerlink" title="进入空白项目并运行开发服务器"></a>进入空白项目并运行开发服务器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cd myngapp01<br>npm start<br></code></pre></td></tr></table></figure><h4 id="客户端访问测试"><a href="#客户端访问测试" class="headerlink" title="客户端访问测试"></a>客户端访问测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//127.0.0.1:端口号</span><br></code></pre></td></tr></table></figure><h2 id="2-2-搭建开发环境"><a href="#2-2-搭建开发环境" class="headerlink" title="2.2 搭建开发环境"></a>2.2 搭建开发环境</h2><h3 id="使用第三方NPM下载仓库"><a href="#使用第三方NPM下载仓库" class="headerlink" title="使用第三方NPM下载仓库"></a>使用第三方NPM下载仓库</h3><p>查看当前NPM默认的下载仓库地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\lenovo&gt;npm config get registry<br>https:<span class="hljs-comment">//registry.npmjs.org/</span><br></code></pre></td></tr></table></figure><p>修改NPM默认的下载仓库地址为国内镜像网站</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\lenovo&gt;npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br><br>C:\Users\lenovo&gt;npm config get registry<br>https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p>安装脚手架工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\lenovo&gt;npm i -g <span class="hljs-meta">@angular</span>/cli<br>npm ERR! code CERT_HAS_EXPIRED<br>npm ERR! errno CERT_HAS_EXPIRED<br>npm ERR! request to https:<span class="hljs-comment">//registry.npm.taobao.org/@angular%2fcli failed, reason: certificate has expired</span><br><br>npm ERR! A complete log of <span class="hljs-built_in">this</span> run can be found in: C:\Users\lenovo\AppData\Local\npm-cache\_logs\<span class="hljs-number">2024</span>-<span class="hljs-number">03</span>-15T08_44_01_384Z-debug-<span class="hljs-number">0.</span>log<br></code></pre></td></tr></table></figure><p>解决</p><p><a href="https://blog.csdn.net/maoge_666/article/details/136038003">https://blog.csdn.net/maoge_666/article/details/136038003</a></p><p>淘宝镜像过期，更换新镜像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\lenovo&gt;npm config list<br>; <span class="hljs-string">&quot;builtin&quot;</span> config from D:\Nodejs\node_modules\npm\<span class="hljs-type">npmrc</span><br><br><span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\lenovo\\AppData\\Roaming\\npm&quot;</span><br><br>; <span class="hljs-string">&quot;user&quot;</span> config from C:\Users\lenovo\.<span class="hljs-type">npmrc</span><br><br><span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://registry.npm.taobao.org&quot;</span><br><br>; node <span class="hljs-type">bin</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> D:\Nodejs\node.exe<br>; <span class="hljs-type">node</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> v18<span class="hljs-number">.19</span><span class="hljs-number">.0</span><br>; npm <span class="hljs-type">local</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> C:\Users\lenovo<br>; <span class="hljs-type">npm</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.2</span><span class="hljs-number">.3</span><br>; cwd = C:\Users\lenovo<br>; HOME = C:\Users\lenovo<br>; Run `npm config ls -l` to show all defaults.<br><br>C:\Users\lenovo&gt;npm cache clean --force<br>npm WARN using --force Recommended protections disabled.<br><br>C:\Users\lenovo&gt;npm config set registry https:<span class="hljs-comment">//registry.npmmirror.com</span><br><br>C:\Users\lenovo&gt;npm config list<br>; <span class="hljs-string">&quot;builtin&quot;</span> config from D:\Nodejs\node_modules\npm\<span class="hljs-type">npmrc</span><br><br><span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\lenovo\\AppData\\Roaming\\npm&quot;</span><br><br>; <span class="hljs-string">&quot;user&quot;</span> config from C:\Users\lenovo\.<span class="hljs-type">npmrc</span><br><br><span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://registry.npmmirror.com&quot;</span><br><br>; node <span class="hljs-type">bin</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> D:\Nodejs\node.exe<br>; <span class="hljs-type">node</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> v18<span class="hljs-number">.19</span><span class="hljs-number">.0</span><br>; npm <span class="hljs-type">local</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> C:\Users\lenovo<br>; <span class="hljs-type">npm</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.2</span><span class="hljs-number">.3</span><br>; cwd = C:\Users\lenovo<br>; HOME = C:\Users\lenovo<br>; Run `npm config ls -l` to show all defaults.<br><br>C:\Users\lenovo&gt;npm i -g <span class="hljs-meta">@angular</span>/cli<br><br>added <span class="hljs-number">232</span> packages in 11s<br></code></pre></td></tr></table></figure><h3 id="运行脚手架工具创建空白项目-1"><a href="#运行脚手架工具创建空白项目-1" class="headerlink" title="运行脚手架工具创建空白项目"></a>运行脚手架工具创建空白项目</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">D:\Angular_Learning\Project&gt;ng <span class="hljs-keyword">new</span> <span class="hljs-title class_">myngapp01</span><br>? Which stylesheet format would you like to use? CSS<br>? Do you want to enable Server-Side <span class="hljs-title function_">Rendering</span> <span class="hljs-params">(SSR)</span> and Static Site <span class="hljs-title function_">Generation</span> <span class="hljs-params">(SSG/Prerendering)</span>? Yes<br>CREATE myngapp01/angular.json (<span class="hljs-number">2853</span> bytes)<br>CREATE myngapp01/<span class="hljs-keyword">package</span>.json (<span class="hljs-number">1272</span> bytes)<br>CREATE myngapp01/README.md (<span class="hljs-number">1090</span> bytes)<br>CREATE myngapp01/tsconfig.json (<span class="hljs-number">936</span> bytes)<br>CREATE myngapp01/.editorconfig (<span class="hljs-number">290</span> bytes)<br>CREATE myngapp01/.gitignore (<span class="hljs-number">590</span> bytes)<br></code></pre></td></tr></table></figure><h2 id="2-3-搭建环境"><a href="#2-3-搭建环境" class="headerlink" title="2.3 搭建环境"></a>2.3 搭建环境</h2><h3 id="进入并启动项目"><a href="#进入并启动项目" class="headerlink" title="进入并启动项目"></a>进入并启动项目</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cd myngapp01<br>npm start<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Angular202403162222839.png" alt="image-20240316131534143" style="zoom:50%;" /><p>官方组件<code>appcomponent.ts</code>，定义在<code>app.component.html</code></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Chapter3</title>
      <link href="/2024/03/16/Angular/Angular_Chapter3/"/>
      <url>/2024/03/16/Angular/Angular_Chapter3/</url>
      
        <content type="html"><![CDATA[<h2 id="3-1-模块"><a href="#3-1-模块" class="headerlink" title="3.1 模块"></a>3.1 模块</h2><h3 id="Angular项目启动过程分析"><a href="#Angular项目启动过程分析" class="headerlink" title="Angular项目启动过程分析"></a>Angular项目启动过程分析</h3><ul><li><p><code>angular.json</code>：NG 项目的配置</p><ul><li><code>index</code>：<code>./src/index.html</code>      <code>&lt;app-root&gt;&lt;/app-root&gt;</code></li><li><code>brower</code>：<code>./scr/main.ts</code></li></ul></li><li><p><code>main.ts</code>：<code>bootstrapModule(AppModule)</code></p></li><li><p><code>app.module.ts</code>：bootstrap：<code>AppComponent</code></p></li><li><p><code>app.component.ts</code> ：<code>selector:&#39;app-root&#39;</code></p><p>​                                 <code>templateUrl:&#39;app.component.html</code></p></li><li><p><code>app.component.html</code>：HTML片段</p></li></ul><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Angular202403162223408.png" alt="image-20240316134327607" style="zoom:50%;" /><h2 id="3-2-组件"><a href="#3-2-组件" class="headerlink" title="3.2 组件"></a>3.2 组件</h2><h3 id="Angular-核心概念（一）：模块"><a href="#Angular-核心概念（一）：模块" class="headerlink" title="Angular 核心概念（一）：模块"></a>Angular 核心概念（一）：模块</h3><ul><li>Module：不同于Node.js 或 ES6中的模块，NG 中的模块就是一个抽象的容器，用于对组件进行分组。</li><li>整个应用初始时有且只有一个主组件：AppModule</li></ul><h3 id="Angular-核心概念（二）：组件"><a href="#Angular-核心概念（二）：组件" class="headerlink" title="Angular 核心概念（二）：组件"></a>Angular 核心概念（二）：组件</h3><ul><li>组件：是一段可以反复使用的页面片段，如页头、轮播、手风琴</li><li>组件（Component）包括：模板（Template），脚本（Script），样式（Style）</li><li>NG中任何一个组件必须申明在模块中</li></ul><h4 id="自定义组件步骤"><a href="#自定义组件步骤" class="headerlink" title="自定义组件步骤"></a>自定义组件步骤</h4><h5 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h5><ul><li>新建 <code>./app/myc01.ts</code></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@angular/core&quot;</span>;<br><span class="hljs-comment">//装饰器（Decorator）--用于指定class的用途</span><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h2&gt;我的组件C01&lt;/h2&gt;&lt;hr&gt;&#x27;</span>,<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;myc01&#x27;</span> <span class="hljs-comment">//当做元素使用</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyC01Component</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="在某个模块中注册组件class：-x2F-app-x2F-app-module-ts"><a href="#在某个模块中注册组件class：-x2F-app-x2F-app-module-ts" class="headerlink" title="在某个模块中注册组件class：.&#x2F;app&#x2F;app.module.ts"></a>在某个模块中注册组件class：.&#x2F;app&#x2F;app.module.ts</h5><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-meta">@NgModule</span>(&#123;<br>  <span class="hljs-attr">declarations</span>: [<br>    <span class="hljs-title class_">AppComponent</span>,<br>    <span class="hljs-title class_">MyC01Component</span><br>  ],<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">BrowserModule</span>,<br>    <span class="hljs-title class_">AppRoutingModule</span><br>  ],<br>  <span class="hljs-attr">providers</span>: [],<br>  <span class="hljs-attr">bootstrap</span>: [<span class="hljs-title class_">AppComponent</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123; &#125;<br></code></pre></td></tr></table></figure><h5 id="使用已经注册过的组件：appcomponent-html"><a href="#使用已经注册过的组件：appcomponent-html" class="headerlink" title="使用已经注册过的组件：appcomponent.html"></a>使用已经注册过的组件：<code>appcomponent.html</code></h5><p>其他模板中可以调用组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的Angular项目01<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">myc01</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">myc01</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Angular202403162223409.png" alt="image-20240316153448740" style="zoom:50%;" /><h3 id="创建一个自定义组件-myc02"><a href="#创建一个自定义组件-myc02" class="headerlink" title="创建一个自定义组件 myc02"></a>创建一个自定义组件 <code>myc02</code></h3><h4 id="myc02-component-ts"><a href="#myc02-component-ts" class="headerlink" title="myc02.component.ts"></a>myc02.component.ts</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@angular/core&quot;</span>;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-myc02&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./myc02.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./myc02.component.css&#x27;</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Myc02Component</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建-myc02-component-html"><a href="#创建-myc02-component-html" class="headerlink" title="创建 myc02.component.html"></a>创建 myc02.component.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;succ&quot;</span>&gt;</span>我的组件C02<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="创建-myc02-component-css"><a href="#创建-myc02-component-css" class="headerlink" title="创建 myc02.component.css"></a>创建 myc02.component.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span>&#123;<br>  <span class="hljs-attribute">font-style</span>: italic;<br>&#125;<br><br><span class="hljs-selector-class">.succ</span>&#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#383</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注册到模块：app-module-ts"><a href="#注册到模块：app-module-ts" class="headerlink" title="注册到模块：app.module.ts"></a>注册到模块：app.module.ts</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@NgModule</span>(&#123;<br>  <span class="hljs-attr">declarations</span>: [<br>    <span class="hljs-title class_">AppComponent</span>,<br>    <span class="hljs-title class_">MyC01Component</span>,<br>    <span class="hljs-title class_">Myc02Component</span>,<br>  ],<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">BrowserModule</span>,<br>    <span class="hljs-title class_">AppRoutingModule</span><br>  ],<br>  <span class="hljs-attr">providers</span>: [],<br>  <span class="hljs-attr">bootstrap</span>: [<span class="hljs-title class_">AppComponent</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123; &#125;<br></code></pre></td></tr></table></figure><h4 id="使用创建的组件：app-component-html"><a href="#使用创建的组件：app-component-html" class="headerlink" title="使用创建的组件：app.component.html"></a>使用创建的组件：app.component.html</h4><p>可以在<code>app-root</code>中调用，但不能自己调用自己（浏览器崩溃，栈溢出）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的Angular项目01<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">myc01</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">myc01</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">app-myc02</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-myc02</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Angular202403162222309.png" alt="image-20240316161246569" style="zoom:50%;" /><h2 id="3-3-npm"><a href="#3-3-npm" class="headerlink" title="3.3 npm"></a>3.3 npm</h2><ul><li>Angular 没有根标签个数限制</li><li>组件自己的css内的样式只能该组件自己使用</li></ul><h3 id="创建组件的简化工具"><a href="#创建组件的简化工具" class="headerlink" title="创建组件的简化工具"></a>创建组件的简化工具</h3><p>在当前项目根目录下执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">D:\Angular_Learning\Project\myngapp01&gt; ng g component myc04<br>CREATE src/app/myc04/myc04.component.html (<span class="hljs-number">21</span> bytes)<br>CREATE src/app/myc04/myc04.component.spec.ts (<span class="hljs-number">617</span> bytes)<br>CREATE src/app/myc04/myc04.component.ts (<span class="hljs-number">205</span> bytes)<br>CREATE src/app/myc04/myc04.component.css (<span class="hljs-number">0</span> bytes)<br>UPDATE src/app/app.<span class="hljs-keyword">module</span>.ts (<span class="hljs-number">707</span> bytes)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Angular202403162223410.png" alt="image-20240316195003636" style="zoom:50%;" /><h2 id="3-4-HTML绑定"><a href="#3-4-HTML绑定" class="headerlink" title="3.4 HTML绑定"></a>3.4 HTML绑定</h2><p>Angular 核心概念（三）：数据绑定</p><ul><li>HTML 绑定：<code>&#123;&#123;NG 表达式&#125;&#125;</code></li><li>属性绑定</li><li>指令绑定</li><li>事件绑定</li><li>双向数据绑定</li></ul><p>HTML 绑定，NG表达式可以执行算术、比较、逻辑、三目运算，调用函数，不能创建对象、JSON序列化</p><h3 id="myc05-component-ts"><a href="#myc05-component-ts" class="headerlink" title="myc05.component.ts"></a>myc05.component.ts</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-myc05&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./myc05.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrl</span>: <span class="hljs-string">&#x27;./myc05.component.css&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Myc05Component</span> &#123;<br>  uname = <span class="hljs-string">&#x27;ding dang&#x27;</span><br>  age = <span class="hljs-number">20</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">JSON</span> = <span class="hljs-title class_">JSON</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="myc05-component-html"><a href="#myc05-component-html" class="headerlink" title="myc05.component.html"></a>myc05.component.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>myc05 works!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>用户名：&#123;&#123;uname&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>后年年龄：&#123;&#123;age+2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>成年了吗：&#123;&#123;age&gt;=18&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>成年了吗：&#123;&#123;age&gt;=18?&#x27;成年&#x27;:&#x27;未成年&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>在法定工作年龄吗：&#123;&#123;age&gt;=18 &amp;&amp; age&lt;60&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>用户名长度：&#123;&#123;uname.length&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>用户名大写形式：&#123;&#123;uname.toUpperCase()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>用户名中下标为2的字符：&#123;&#123;uname[2]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 不能创建对象 &lt;div&gt;当前时间：&#123;&#123;new Date()&#125;&#125;&lt;/div--&gt;</span><br><span class="hljs-comment">&lt;!--&lt;div&gt;JSON字符串：&#123;&#123;JSON.stringify(&#123;&#125;)&#125;&#125;&lt;/div&gt;--&gt;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Angular202403162223412.png" alt="image-20240316201347228" style="zoom: 67%;" /><h2 id="3-5-属性绑定"><a href="#3-5-属性绑定" class="headerlink" title="3.5 属性绑定"></a>3.5 属性绑定</h2><h3 id="myc05-component-html-1"><a href="#myc05-component-html-1" class="headerlink" title="myc05.component.html"></a>myc05.component.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--形式1--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&#123;&#123;uname&#125;&#125;&quot;</span>&gt;</span>asjhfjsnfjsh<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--形式2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> [<span class="hljs-attr">title</span>]=<span class="hljs-string">&quot;uname&quot;</span>&gt;</span>asjhfjsnfjsh<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Angular202403162223413.png" alt="image-20240316202457851"></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手撕代码</title>
      <link href="/2024/03/15/Java/%E7%AE%97%E6%B3%95/%E7%89%B9%E6%AE%8A%E7%AE%97%E6%B3%95/%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/"/>
      <url>/2024/03/15/Java/%E7%AE%97%E6%B3%95/%E7%89%B9%E6%AE%8A%E7%AE%97%E6%B3%95/%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Algorithm/202403162241576.png" alt="Momenta" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 特殊算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2024/02/27/Java/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/02/27/Java/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="147-对链表进行插入排序"><a href="#147-对链表进行插入排序" class="headerlink" title="147. 对链表进行插入排序"></a>147. 对链表进行插入排序</h2><blockquote><p>Problem: <a href="https://leetcode.cn/problems/insertion-sort-list/description/">147. 对链表进行插入排序</a></p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>维护有序链表,开始时只有一个头节点。</li><li>哑节点dommuy.next &#x3D; head，便于在头节点前插入节点</li><li>有序链表最后一个节点lastSorted</li><li>待插入节点cur</li><li>while循环对cur遍历<ul><li>如果lastSorted &lt;&#x3D; cur,将lastSorted和cur均向后移动一个节点</li><li>否则，需要将cur插入到有序链表中。定义prev为有序链表中cur节点的邻近前节点。初始化prev为哑节点（不是头节点，要用prev.next比较）。<ul><li>如果prev的后节点小于等于cur，prev向后移动一位</li><li>否则。说明找到了插入位置，改变lastSorted，cur，prev的next指针，将cur插入到有序链表中。</li></ul></li><li>将cur更新为<code>lastSorted.next</code></li></ul></li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">insertionSortList</span><span class="hljs-params">(ListNode head)</span> &#123;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dommuy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        dommuy.next = head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">lastSorted</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(lastSorted.val &lt;= cur.val)&#123;<br>                lastSorted = lastSorted.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> dommuy;<span class="hljs-comment">//不是head，头节点也要比较</span><br>                <span class="hljs-keyword">while</span>(prev.next.val &lt;= cur.val)&#123;<br>                    prev = prev.next;<br>                &#125;<br>                lastSorted.next = cur.next;<br>                cur.next = prev.next;<br>                prev.next = cur;<br>            &#125;<br>            cur = lastSorted.next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dommuy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a>160. 相交链表</h2><blockquote><p>Problem: <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/description/">160. 相交链表</a></p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><a href="https://blog.csdn.net/qq_46724069/article/details/123818453">https://blog.csdn.net/qq_46724069/article/details/123818453</a><br>相同节点：地址和值都相等。</p><ul><li>先将链表A中的元素存入HashSet。</li><li>遍历B中的每个节点，如果找到地址和值均相同的节点，说明此节点为相交节点，返回次节点；如果暂时没找到，则比较下一个节点。</li><li>如果直到链表B末尾还没找到相交节点，返回null。</li></ul><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度:$O(m+n)$，其中$m$和$n$分别是链表$A$和链表$B$的长度。两个链表均需遍历一次。</li><li>空间复杂度:$O(m)$，其中$m$是链表$A$的长度，需要将链表$A$中的全部节点存入哈希集合中。</li></ul><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        Set&lt;ListNode&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmpA</span> <span class="hljs-operator">=</span> headA;<br>        <span class="hljs-keyword">while</span>(tmpA != <span class="hljs-literal">null</span>)&#123;<br>            set.add(tmpA);<br>            tmpA = tmpA.next;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmpB</span> <span class="hljs-operator">=</span> headB;<br>        <span class="hljs-keyword">while</span>(tmpB != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(set.contains(tmpB))&#123;<br>                <span class="hljs-keyword">return</span> tmpB;<br>            &#125;<br>            tmpB = tmpB.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h2><blockquote><p>Problem: <a href="https://leetcode.cn/problems/reverse-linked-list/description/">206. 反转链表</a></p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; null 反转后为 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; null &lt;&#x3D;&gt; null &lt;- 1 &lt;- 2 &lt;- 3 &lt;- 4 &lt;- 5</p><ul><li>当前节点cur，初始化为head</li><li>前一个节点pre，初始化时表示原链表末尾</li><li>暂存下一个节点tmp</li><li>循环：<ul><li>将当前节点指向前一个节点</li><li>暂存当前节点到pre</li><li>访问下一个节点</li></ul></li><li>返回pre</li></ul><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度: $O(n)$，遍历链表使用线性大小时间。</li><li>空间复杂度: $O(1)$，变量 <code>pre</code> 和 <code>cur</code> 使用常数大小额外空间</li></ul><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2024/02/27/Java/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
      <url>/2024/02/27/Java/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h2><blockquote><p>Problem: <a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/">34. 在排序数组中查找元素的第一个和最后一个位置</a></p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>两次二分查找，分别找到等于$target$ 的元素的最左位置和最右位置</p><p>初始化最左位置 $first &#x3D; -1$，最右位置 $last &#x3D; -1$。</p><p>找最左位置：</p><ul><li>如果$nums[mid]$ 等于 $target$，暂时认为此时的位置是最左位置，令$first &#x3D; mid$。再让 $right &#x3D; mid - 1$，尝试查找更左的位置是否还有与 $target$ 相同的元素。</li><li>如果 $nums[mid]$ 小于 $target$，查找 $mid$ 右侧的元素</li><li>如果 $nums[mid]$ 大于 $target$，查找 $mid$ 左侧的元素。</li></ul><p>找最右位置同理：</p><ul><li>如果$nums[mid]$ 等于 $target$，暂时认为此时的位置是最右位置，令$last &#x3D; mid$。再让 $left &#x3D; mid + 1$，尝试查找更右的位置是否还有与 $target$ 相同的元素。</li><li>如果 $nums[mid]$ 小于 $target$，查找 $mid$ 右侧的元素</li><li>如果 $nums[mid]$ 大于 $target$，查找 $mid$ 左侧的元素。</li></ul><p>返回数组 $[first, last]$</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li><p>时间复杂度: $O(logn)$，其中$n$为数组的长度。二分查找的时间复杂度为$O(logn)$，一共会执行两次，因此总时间复杂度为$O(logn)$。</p></li><li><p>空间复杂度: $O(1)$。只需要常数空间存放若干变量。</p></li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] searchRange(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid] == target)&#123;<br>                first = mid;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        left = <span class="hljs-number">0</span>;<br>        right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid] == target)&#123;<br>                last = mid;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;first, last&#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a>48. 旋转图像</h2><blockquote><p>Problem: <a href="https://leetcode.cn/problems/rotate-image/description/">48. 旋转图像</a></p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>每次选四个元素A，B，C，D顺时针旋转90°，A为左上角元素</li><li>D -&gt; A, C -&gt; D, B -&gt; C, A -&gt; B</li><li>由于A一开始被D覆盖，为完成A -&gt; B这一步，需要先用tmp保存A</li><li>对于每个元素matrix[i] [j]，旋转前后有规律matrix[i] [j] -&gt; matrix[j] [n-i-1]<ul><li>设A &#x3D; matrix[i] [j]，可推导出规律</li><li>B &#x3D; matrix[j] [n-i-1]</li><li>C &#x3D; matrix[n-i-1] [n-j-1]</li><li>D &#x3D; matrix[n-j-1] [i]</li></ul></li><li>以矩阵左上角四分之一部分的每个元素为起点执行旋转操作<ul><li>当矩阵大小n为偶数时，取前n&#x2F;2行、前n&#x2F;2列元素为起始点</li><li>当n为奇数时，取前n&#x2F;2行，前(n+1)&#x2F;2列为起始点</li></ul></li></ul><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度: $O(n^2)$，其中$n$是$matrix$的边长，我们需要枚举的子矩阵大小为$O([n&#x2F;2]×[(n+1)&#x2F;2])&#x3D;O(n^2)$</li><li>空间复杂度: $O(1)$。为原地旋转。</li></ul><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> matrix.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n / <span class="hljs-number">2</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; j++)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> matrix[i][j];<br>                matrix[i][j] = matrix[n - j - <span class="hljs-number">1</span>][i];<br>                matrix[n - j - <span class="hljs-number">1</span>][i] = matrix[n - i - <span class="hljs-number">1</span>][n - j - <span class="hljs-number">1</span>];<br>                matrix[n - i - <span class="hljs-number">1</span>][n - j - <span class="hljs-number">1</span>] = matrix[j][n - i - <span class="hljs-number">1</span>];<br>                matrix[j][n - i - <span class="hljs-number">1</span>] = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="88-合并有序数组"><a href="#88-合并有序数组" class="headerlink" title="88 合并有序数组"></a>88 合并有序数组</h2><blockquote><p>Problem: <a href="https://leetcode.cn/problems/merge-sorted-array/description/">88. 合并两个有序数组</a></p></blockquote><h3 id="思路：双指针法"><a href="#思路：双指针法" class="headerlink" title="思路：双指针法"></a>思路：双指针法</h3><ul><li>定义整数a, b作为指针，开始时，指针a指向nums1的首元素，指针b指向nums2的首元素。定义一个<code>ArrayList</code>，名为<code>res</code>，作为结果。</li><li>当a与b均小于等于数组的长度时，比较nums1和nums2当前的元素大小</li><li>当nums1的元素小于等于nums2的元素时，将nums1的元素放入res中；否则，将nums2元素存入res。</li><li>循环结束后，再次通过while循环判断a是否小于m，如果是，说明num1中有序元素个数大于nums2中有序元素个数，将nums1中剩余元素放入res。</li><li>同理，对b做同样的判断。</li><li>最后将res中的结果存入nums1.</li></ul><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> n)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(a &lt; m &amp;&amp; b &lt; n)&#123;<br>            <span class="hljs-keyword">if</span>(nums1[a] &lt;= nums2[b])&#123;<br>                res.add(nums1[a]);<br>                a++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                res.add(nums2[b]);<br>                b++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>(a &lt; m)&#123;<br>                res.add(nums1[a]);<br>                a++;<br>            &#125;<br>        <span class="hljs-keyword">while</span>(b &lt; n)&#123;<br>            res.add(nums2[b]);<br>            b++;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; res.size(); i++)&#123;<br>            nums1[i] = res.get(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实现</title>
      <link href="/2024/02/27/Java/%E7%AE%97%E6%B3%95/%E7%89%B9%E6%AE%8A%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/02/27/Java/%E7%AE%97%E6%B3%95/%E7%89%B9%E6%AE%8A%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="手写Deque"><a href="#手写Deque" class="headerlink" title="手写Deque"></a>手写Deque</h2><h2 id="筛选排序去重list"><a href="#筛选排序去重list" class="headerlink" title="筛选排序去重list"></a>筛选排序去重list</h2><p>我用stream流写了，然后让我不用stream流写</p><h2 id="从一个User列表，筛选出女性、20岁以上的user然后再按照年龄排序"><a href="#从一个User列表，筛选出女性、20岁以上的user然后再按照年龄排序" class="headerlink" title="从一个User列表，筛选出女性、20岁以上的user然后再按照年龄排序"></a>从一个User列表，筛选出女性、20岁以上的user然后再按照年龄排序</h2><p>用 .stream().filter().sorted().toList() 来完成，但要考虑健壮性，比如要先判断是否合法，还要判断年龄性别是否为null</p>]]></content>
      
      
      <categories>
          
          <category> 特殊算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2024/02/25/Java/%E7%AE%97%E6%B3%95/Leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2024/02/25/Java/%E7%AE%97%E6%B3%95/Leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora导出pdf文件</title>
      <link href="/2024/02/20/Typora/Typora%E5%AF%BC%E5%87%BAword%E6%96%87%E6%A1%A3%E5%8F%8Apdf%E6%96%87%E4%BB%B6/"/>
      <url>/2024/02/20/Typora/Typora%E5%AF%BC%E5%87%BAword%E6%96%87%E6%A1%A3%E5%8F%8Apdf%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="安装pandoc"><a href="#安装pandoc" class="headerlink" title="安装pandoc"></a>安装pandoc</h2><p>安装路径：<a href="https://github.com/jgm/pandoc/releases/tag/3.1.11.1">https://github.com/jgm/pandoc/releases/tag/3.1.11.1</a></p><h2 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h2><p>打开偏好设置，配置Pandoc路径</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Typora/Tutorial/202402202356545.png" alt="image-20240220235418559" style="zoom: 50%;" />]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用教程</title>
      <link href="/2024/02/20/Typora/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/02/20/Typora/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u012948161/article/details/125370209">Typora Beta版过期解决</a></p><p><a href="https://blog.csdn.net/weixin_62028569/article/details/128050496">Typora安装与免费使用</a></p><h2 id="一：下载安装"><a href="#一：下载安装" class="headerlink" title="一：下载安装"></a>一：下载安装</h2><p>链接：<a href="https://pan.baidu.com/s/1_jxeMBQN2txQTiLaKo6AUg">https://pan.baidu.com/s/1_jxeMBQN2txQTiLaKo6AUg</a><br>提取码：5u8l</p><p>下载安装包，双击开始安装：</p><p>​                                <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252053731.png" alt="image-20230725204000174" style="zoom: 50%;" /></p><p> 这里可以更改安装路径</p><p>​                       <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252053342.png" alt="image-20230725204131843" style="zoom:50%;" /></p><p> 创建桌面快捷方式</p><p>​                    <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252053920.png" alt="image-20230725204150741" style="zoom:50%;" /></p><p>​                 <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252053738.png" alt="image-20230725204228009" style="zoom:50%;" /></p><p> 关闭立即启动</p><p>​<img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252053778.png" alt="image-20230725204254963" style="zoom:50%;" /></p><h2 id="二：注册表修改"><a href="#二：注册表修改" class="headerlink" title="二：注册表修改"></a>二：注册表修改</h2><p>先双击Typora，不然注册表内可能没有Typora选项，影响后续操作。尝试运行后发现打不开。</p><p>Win+R 输入regedit  打开注册表</p><p>​              <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252053658.png" alt="image-20230725204443731" style="zoom:50%;" /></p><p>依次展开计算机\HKEY_CURRENT_USER\Software\Typora，打开Typora路径</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252053146.png" alt="image-20230725204534549" style="zoom:50%;" /><p> 右键修改，将数据值修改为11&#x2F;18&#x2F;2077</p><p>​                                <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252054128.png" alt="image-20230725204607935" style="zoom:50%;" /></p><p> 然后在Typora上右键，点权限，选中Administrtors，把权限全部设置为拒绝。</p><p>​                                         <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252054955.png" alt="image-20230725204654787" style="zoom:67%;" /></p><p>​                           <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307271036200.png" alt="image-20230725204730778" style="zoom:50%;" /></p><p>打开Typora，发现可以正常使用了。再打开文件-偏好设置，关闭自动更新。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252054246.png" alt="image-20230725204932807" style="zoom:50%;" /><p>​                       <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Typora/Tutorial/202307252054912.png" alt="image-20230725204848970" style="zoom:50%;" /> </p><h2 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h2><p><a href="https://blog.csdn.net/u012948161/article/details/125370209">Typora Beta版过期解决</a></p><p><a href="https://blog.csdn.net/weixin_62028569/article/details/128050496">Typora安装与免费使用</a></p><p><a href="https://blog.csdn.net/xiaoxianer321/article/details/124388016">笔记神器Markdown之完美实现图床（Typora+PicGo+Github)</a></p><p><a href="https://blog.csdn.net/dc_12138/article/details/124263439">typora的基本使用方法（快捷键和基础设置)</a></p><p><a href="https://blog.csdn.net/yangyangdt/article/details/121358515?ops_request_misc=&request_id=&biz_id=102&utm_term=typora%E5%AE%89%E8%A3%85%E5%90%8E%E9%85%8D%E7%BD%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-121358515.142%5Ev88%5Econtrol,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">Typora使用教程</a></p><p><a href="https://blog.csdn.net/yinsefeixingchuan/article/details/123748913?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168897698316782427489718%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168897698316782427489718&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-123748913-null-null.142%5Ev88%5Econtrol,239%5Ev2%5Einsert_chatgpt&utm_term=pandoc&spm=1018.2226.3001.4187">Typora基础用法：pandoc安装，导入导出word文档,pdf文件。设置图片目录</a></p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+PicGo上传图片至Github</title>
      <link href="/2024/02/20/Typora/Typora+PicGo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%87%B3Github/"/>
      <url>/2024/02/20/Typora/Typora+PicGo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%87%B3Github/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-PicGo上传图片至Github"><a href="#Typora-PicGo上传图片至Github" class="headerlink" title="Typora+PicGo上传图片至Github"></a>Typora+PicGo上传图片至Github</h1><h2 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h2><p>下载地址：<a href="https://molunerfinn.com/PicGo/">PicGo</a> （比较慢）</p><p>镜像下载地址：<a href="https://github.com/Molunerfinn/picgo/releases%EF%BC%88%E6%AF%94%E8%BE%83%E5%BF%AB%EF%BC%89">https://github.com/Molunerfinn/picgo/releases（比较快）</a></p><h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><p>登录Github，在右上角的+号点击New repository,填写相关信息即可。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301754413.png" alt="image-20240130174121665" style="zoom:50%;" /><h2 id="设置token私人令牌"><a href="#设置token私人令牌" class="headerlink" title="设置token私人令牌"></a>设置token私人令牌</h2><p>token的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。当用户第一次登录后，服务器生成一个token并将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。简单token的组成；uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露）</p><p>github在主页的头像下有个Settings选项，具体的地址是：<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><h2 id="填写配置信息"><a href="#填写配置信息" class="headerlink" title="填写配置信息"></a>填写配置信息</h2><p>打开PicGo</p><h3 id="上传区"><a href="#上传区" class="headerlink" title="上传区"></a>上传区</h3><p>选择URL</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301754415.png" alt="image-20240130172735344" style="zoom:50%;" /><h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><p>上传成功的图片</p><h3 id="图床设置"><a href="#图床设置" class="headerlink" title="图床设置"></a>图床设置</h3><p>选择Github</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301754416.png" alt="11" style="zoom:50%;" /><h3 id="设置自定义域名"><a href="#设置自定义域名" class="headerlink" title="设置自定义域名"></a>设置自定义域名</h3><p>我们用jsDelivr（是一个免费、开源的加速CDN公共服务，比如有时候我们开发网页的时候，引入jquery，其实就有这个东西）</p><p><a href="https://cdn.jsdelivr.net/gh/github%E8%B4%A6%E5%8F%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/github账号名/仓库名</a></p><p>例如：<a href="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse">https://cdn.jsdelivr.net/gh/techniquenotes/photohouse</a></p><h3 id="打开时间戳重名"><a href="#打开时间戳重名" class="headerlink" title="打开时间戳重名"></a>打开时间戳重名</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301754417.png" alt="image-20240130174851705" style="zoom:50%;" /><h2 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h2><p>打开偏好设置</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301754418.png" alt="image-20240130174953391" style="zoom:50%;" /><h2 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h2><p>在图片上右键，点击上传图片，PicGo显示上传成功，PicGo相册处显示上传的图片，github仓库处出现图片</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301754420.png" alt="image-20240130175305577" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301754421.png" alt="image-20240130175335270" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch_Practice_3</title>
      <link href="/2024/02/20/PyTorch/PyTorch_Practice/PyTorch_Practice_3/"/>
      <url>/2024/02/20/PyTorch/PyTorch_Practice/PyTorch_Practice_3/</url>
      
        <content type="html"><![CDATA[<h1 id="11-Advanced-CNN"><a href="#11-Advanced-CNN" class="headerlink" title="11 Advanced CNN"></a>11 Advanced CNN</h1><h2 id="GooLeNet"><a href="#GooLeNet" class="headerlink" title="GooLeNet"></a>GooLeNet</h2><p>减少代码冗余：函数&#x2F;类</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012020299.png" alt="image-20230731214851557" style="zoom:50%;" /><h2 id="Inception-Module"><a href="#Inception-Module" class="headerlink" title="Inception Module"></a>Inception Module</h2><p>Concatenate:拼接张量</p><p>每种方式都使用，通过训练找到最优组合，调整权重。</p><p>Average Polling平均池化</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012020931.png" alt="image-20230731215133866" style="zoom:50%;" /><h2 id="What-is-1×1-convolution"><a href="#What-is-1×1-convolution" class="headerlink" title="What is 1×1 convolution?"></a>What is 1×1 convolution?</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021001.png" alt="image-20230731215603352" style="zoom:50%;" /><p>可以改变通道数量，降低运算量</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021786.png" alt="image-20230731220045106" style="zoom:50%;" /><h2 id="Implementation-of-Inception-Module"><a href="#Implementation-of-Inception-Module" class="headerlink" title="Implementation of Inception Module"></a>Implementation of Inception Module</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021899.png" alt="image-20230801100442972" style="zoom:50%;" /><p>沿着通道维度拼接</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021279.png" alt="image-20230801100511245" style="zoom:50%;" /><p>dim&#x3D;1因为张量维度顺序是B,C,W,H</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021285.png" alt="image-20230801100558201" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inception</span>(nn.Module):<br>    <span class="hljs-comment"># 初始通道可以在构造时指明</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels</span>):<br>        <span class="hljs-built_in">super</span>(Incetion, self).__init_()<br>        self.branch1x1 = nn.Conv2d(in_channels, <span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">1</span>)<br>        <br>        self.branch5x5_1 = nn.Conv2d(in_channels, <span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">1</span>)<br>        self.branch5x5_2 = nn.Conv2d(<span class="hljs-number">16</span>, <span class="hljs-number">24</span>, kernel_size=<span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        <br>        self.branch3x3_1 = nn.Conv2d(in_channels, <span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">1</span>)<br>        self.branch3x3_2 = nn.Conv2d(<span class="hljs-number">16</span>, <span class="hljs-number">24</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)<br>        self.branch3x3_3 = nn.Conv2d(<span class="hljs-number">24</span>, <span class="hljs-number">24</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)<br>               <br>        self.branch_pool = nn.Conv2d(in_channels, <span class="hljs-number">24</span>, kernel_size=<span class="hljs-number">1</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        branch1x1 = self.branch1x1(x)<br>        <br>        branch5x5 = self.branch5x5_1(x)<br>        branch5x5 = self.branch5x5_2(branch5x5)<br>        <br>        branch3x3 = self.branch3x3_1(x)<br>        branch3x3 = self.branch3x3_2(branch3x3)<br>        branch3x3 = self.branch3x3_3(branch3x3)<br>        <br>        branch_pool = F.avg_pool2d(x, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br>        branch_pool = self.branch_pool(branch_pool)<br>        <br>        outputs = [branch1x1, branch5x5, branch3x3, branch_pool]<br>        <span class="hljs-comment"># 张量连接。输出通道是88</span><br>        <span class="hljs-keyword">return</span> torch.cat(outputs, dim=<span class="hljs-number">1</span>)<br>          <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.conv2 = nn.Conv2d(<span class="hljs-number">88</span>, <span class="hljs-number">20</span>, kernel_size=<span class="hljs-number">5</span>)<br>        <br>        self.incep1 = InceptionA(in_channels=<span class="hljs-number">10</span>)<br>        self.incep2 = InceptionA(in_channels=<span class="hljs-number">20</span>)<br>        <br>        self.mp = nn.MaxPoll2d(<span class="hljs-number">2</span>)<br>        self.fc = nn.Linear(<span class="hljs-number">1408</span>, <span class="hljs-number">10</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        in_size = x.size(<span class="hljs-number">0</span>)<br>        x = F.relu(self.mp(self.conv1(x)))<br>        x = self.incep1(x)<br>        x = F.relu(self.mp(self.conv2(x)))<br>        x = self.incep2(x)<br>        x = x.view(in_size, -<span class="hljs-number">1</span>)<br>        x = self.fc(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h2 id="Results-of-using-Incuption-Module"><a href="#Results-of-using-Incuption-Module" class="headerlink" title="Results of using Incuption Module"></a>Results of using Incuption Module</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021169.png" alt="image-20230801102229724" style="zoom:50%;" /><h2 id="Can-we-stack-layers-to-go-deeper"><a href="#Can-we-stack-layers-to-go-deeper" class="headerlink" title="Can we stack layers to go deeper?"></a>Can we stack layers to go deeper?</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021196.png" alt="image-20230801103350171" style="zoom:50%;" /><h2 id="Deep-Residual-Learning-深度残差学习"><a href="#Deep-Residual-Learning-深度残差学习" class="headerlink" title="Deep Residual Learning 深度残差学习"></a>Deep Residual Learning 深度残差学习</h2><p>增加跳连接，能解决梯度消失问题</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021043.png" alt="image-20230801103605004" style="zoom:50%;" /><h2 id="Residual-Network"><a href="#Residual-Network" class="headerlink" title="Residual Network"></a>Residual Network</h2><p>虚线表示输入和输出维度不同，需要特殊处理</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021289.png" alt="image-20230801103825204" style="zoom:50%;" /><h2 id="Implementation-of-Simple-Residual-Network"><a href="#Implementation-of-Simple-Residual-Network" class="headerlink" title="Implementation of Simple Residual Network"></a>Implementation of Simple Residual Network</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021089.png" alt="image-20230801103926997" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ResidualBlock</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, channels</span>):<br>        <span class="hljs-built_in">super</span>(ResidualBlock, self).__init__()<br>        self.channels = channels<br>        self.conv1 = nn.Con2d(channels, channels, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)<br>        self.conv2 = nn.Con2d(channels, channels, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        y = F.relu(self.conv1(x))<br>        y = self.conv2(y)<br>        <span class="hljs-comment"># 先求和后激活</span><br>        <span class="hljs-keyword">return</span> F.relu(x + y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.conv2 = nn.Conv2d(<span class="hljs-number">16</span>, <span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.mp = nn.MaxPool2d(<span class="hljs-number">2</span>)<br>        <br>        self.rblock1 = RessidualBlock(<span class="hljs-number">16</span>)<br>    self.rblock2 = RessidualBlock(<span class="hljs-number">32</span>) <br>    <br>        self.fc = nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">10</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        in_size = x.size(<span class="hljs-number">0</span>)<br>        x = self.mp(F.relu(self.conv1(x)))<br>        x = self.rblock1(x)<br>        x = self.mp(F.relu(self.conv2(x)))<br>        x = self.rblock2(x)<br>        x = x.view(in_size, -<span class="hljs-number">1</span>)<br>        x = self.fc(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021704.png" alt="image-20230801104811498" style="zoom:50%;" /><h1 id="12-Basic-RNN"><a href="#12-Basic-RNN" class="headerlink" title="12 Basic RNN"></a>12 Basic RNN</h1><p>处理序列关系的数据：自然语言处理</p><h2 id="Wht-is-RNNs"><a href="#Wht-is-RNNs" class="headerlink" title="Wht is RNNs?"></a>Wht is RNNs?</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012023914.png" alt="image-20230801112709675" style="zoom:50%;" /><h2 id="What-is-RNN-Cell"><a href="#What-is-RNN-Cell" class="headerlink" title="What is RNN Cell?"></a>What is RNN Cell?</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021616.png" alt="image-20230801113417696" style="zoom:50%;" /><h2 id="RNN-Cell-in-PyTorch"><a href="#RNN-Cell-in-PyTorch" class="headerlink" title="RNN Cell in PyTorch"></a>RNN Cell in PyTorch</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012021054.png" alt="image-20230801113715094" style="zoom:50%;" /><h2 id="How-to-use-RNNCell"><a href="#How-to-use-RNNCell" class="headerlink" title="How to use RNNCell"></a>How to use RNNCell</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022828.png" alt="image-20230801113902119" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-comment"># Parameters</span><br>barch_size = <span class="hljs-number">1</span><br>seq_len = <span class="hljs-number">3</span><br>input_size = <span class="hljs-number">4</span><br>hidden_size = <span class="hljs-number">2</span><br><br><span class="hljs-comment"># Construct RNNCell</span><br>cell = torch.nn.RNNCell(input_size=input_size, hidden_size=hidden_size)<br><span class="hljs-comment"># Wrapping the sequence into: (seq, batch, features)</span><br>dataset = torch.randn(seq_len, batch_size, input_size)<br><span class="hljs-comment"># Initializing the hidden to zero</span><br>hidden = torch.zeros(batch_size, hidden_size)<br><br><span class="hljs-keyword">for</span> idx, <span class="hljs-built_in">input</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataset):<br>    <span class="hljs-comment"># 将字符串 &#x27;=&#x27; 重复 20 次</span><br>    <span class="hljs-comment"># ==================== idx ====================</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=&#x27;</span> * <span class="hljs-number">20</span>, idx, <span class="hljs-string">&#x27;=&#x27;</span> * <span class="hljs-number">20</span>)<br>    <span class="hljs-comment"># The shape of input is: (batchSize, inputSize)</span><br>    <span class="hljs-comment"># Input size: torch.Size([1, 4])</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Input size:&#x27;</span>, <span class="hljs-built_in">input</span>,shape)<br>    <span class="hljs-comment"># The shape of hidden is: (batchSize, hiddenSize)</span><br>    <span class="hljs-comment"># hidden size: torch.Size([1, 2])</span><br>    hidden = cell(<span class="hljs-built_in">input</span>, hidden)<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;outputs size:&#x27;</span>, hidden.shape)<br>    <span class="hljs-built_in">print</span>(hidden)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022029.png" alt="image-20230801114732803" style="zoom:67%;" /><h2 id="How-to-use-RNN"><a href="#How-to-use-RNN" class="headerlink" title="How to use RNN"></a>How to use RNN</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022858.png" alt="image-20230801114840018" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022935.png" alt="image-20230801114941527" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022579.png" alt="image-20230801115320410" style="zoom:50%;" /><h3 id="numLayers"><a href="#numLayers" class="headerlink" title="numLayers"></a>numLayers</h3><p>RNN的层数，不是RNNCell的个数</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022743.png" alt="image-20230801115524529" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-comment"># Parameters</span><br>barch_size = <span class="hljs-number">1</span><br>seq_len = <span class="hljs-number">3</span><br>input_size = <span class="hljs-number">4</span><br>hidden_size = <span class="hljs-number">2</span><br><span class="hljs-comment"># Construction of RNN</span><br>cell = torch.nn.RNN(input_size=input_size, hidden_size=hidden_size, num_layers=numlayers)<br><span class="hljs-comment"># Wrapping the sequence into:(seqLen, batchSize, inputSize)</span><br>inputs = torch.randn(seq_len, batch_size, input_size)<br><span class="hljs-comment"># Initializing the hidden to zero</span><br>hidden = torch.zeros(num_layers, batch_size, hidden_size)<br><br><span class="hljs-comment"># The shape of output is:(seqSize, batchSize, hiddenSize)</span><br>out, hidden = cell(inputs, hidden)<br><br>pring(<span class="hljs-string">&#x27;Output size:&#x27;</span>, out.shape)<br>pring(<span class="hljs-string">&#x27;Output:&#x27;</span>, out)<br>pring(<span class="hljs-string">&#x27;Hidden size:&#x27;</span>, hidden.shape)<br>pring(<span class="hljs-string">&#x27;Hidden:&#x27;</span>, hidden)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022305.png" alt="image-20230801120047460" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022381.png" alt="image-20230801120130020" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022394.png" alt="image-20230801120149661" style="zoom:50%;" /><h2 id="Example-Using-RNNCell"><a href="#Example-Using-RNNCell" class="headerlink" title="Example: Using RNNCell"></a>Example: Using RNNCell</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022472.png" alt="image-20230801120257220" style="zoom:50%;" /><p>独热向量：One-Hot Vector</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022083.png" alt="image-20230801120521874" style="zoom:50%;" /><p>分类问题</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022754.png" alt="image-20230801120803499" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012022845.png" alt="image-20230801120855605" style="zoom:50%;" /><h3 id="Pramenters"><a href="#Pramenters" class="headerlink" title="Pramenters"></a>Pramenters</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>input_size = <span class="hljs-number">4</span><br>hidden_size = <span class="hljs-number">4</span><br>batch_size = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="Prepare-Data"><a href="#Prepare-Data" class="headerlink" title="Prepare Data"></a>Prepare Data</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># The dictionary</span><br>idx2char = [<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>]<br><span class="hljs-comment"># &#x27;hello&#x27; The input sequence</span><br>x_data = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-comment"># The output sequence</span><br>y_data = [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]<br><br>one_hot_lookup = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                 [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                 [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>                 [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]<br><span class="hljs-comment"># Convert indices into one-hot vector</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">x会变成</span><br><span class="hljs-string">[</span><br><span class="hljs-string">  [0, 1, 0, 0],   # 对应索引 1</span><br><span class="hljs-string">  [1, 0, 0, 0],   # 对应索引 0</span><br><span class="hljs-string">  [0, 0, 1, 0],   # 对应索引 2</span><br><span class="hljs-string">  [0, 0, 1, 0],   # 对应索引 2</span><br><span class="hljs-string">  [0, 0, 0, 1]    # 对应索引 3</span><br><span class="hljs-string">]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>x_one_hot = [one_hot_lookup[x] <span class="hljs-keyword">for</span> x x_data]<br><span class="hljs-comment"># Reshape the inputs to (seqLen, batchSize, inputSize)</span><br>inputs = torch.Tensor(x_one_hot).view(-<span class="hljs-number">1</span>, batch_size, input_size)<br><span class="hljs-comment"># Reshape the label to (seqLen, 1)</span><br>labels = torch.LongTensor(y_data).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="Design-Model"><a href="#Design-Model" class="headerlink" title="Design Model"></a>Design Model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">delf, input_size, hidden_size, barch_size</span>):<br>        <span class="hljs-built_in">super</span>(Model, self).__init__()<br>        self.batch_size = batch_size<br>        self.input_size = input_size<br>        self.hidden_size = hidden_size<br>        self.rnncell = torch.nn.RNNCell(input_size=self.input_size, hidden_size = self.hidden_size)<br>      <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, hidden</span>):<br>        hidden = self.rnncell(<span class="hljs-built_in">input</span>, hidden)<br>        <span class="hljs-keyword">return</span> hidden<br>    <span class="hljs-comment"># Provide initial hidden</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_hidden</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> torch.zero(self.batch_size, self.hidden_size)<br>    <br>net = Model(input_size, hidden_size, batch_size)<br>    <br></code></pre></td></tr></table></figure><h3 id="Loss-and-Optimizer"><a href="#Loss-and-Optimizer" class="headerlink" title="Loss and Optimizer"></a>Loss and Optimizer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">criterion = torch.nn.CrossEntroyLoss()<br>optimizer = torch.optim.Adam(net.parameters(), lr = <span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><h3 id="Training-Cycle"><a href="#Training-Cycle" class="headerlink" title="Training Cycle"></a>Training Cycle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    loss = <span class="hljs-number">0</span><br>    optimizer.zero_grad()<br>    <span class="hljs-comment"># h0</span><br>    hidden = net.init.hidden()<br>    pring(<span class="hljs-string">&#x27;Predicted string:&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">input</span>, label <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(inputs, labels):<br>        hidden = net(<span class="hljs-built_in">input</span>, hidden)<br>        <span class="hljs-comment"># 没有用item()，需要构造计算图</span><br>        loss += criterion(hidden, label)<br>        _, idx = hiddenmax(dim=<span class="hljs-number">1</span>)<br>        pring(idx2char[idx.item()], end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    loss.backward()<br>    optimizer.step()<br>    pring(<span class="hljs-string">&#x27;, Epoch [%d/15] loss=%.4f&#x27;</span> % (epoch+<span class="hljs-number">1</span>, loss.item()))<br></code></pre></td></tr></table></figure><h3 id="Results-1"><a href="#Results-1" class="headerlink" title="Results"></a>Results</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012023178.png" alt="image-20230801142111100" style="zoom:50%;" /><h2 id="Using-Rnn-Module"><a href="#Using-Rnn-Module" class="headerlink" title="Using Rnn Module"></a>Using Rnn Module</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">criterion = torch.nn.CrossEntroyLoss()<br>optimizer = torch.optim.Adam(net.parameters(), lr = <span class="hljs-number">0.1</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    optimizer.zero_grad()<br>    outputs = net(inputs)<br>    loss = criterion(outputs labels)<br>    loss.backward()<br>    optimizer.step()<br>    <br>    _, idx = outputs.<span class="hljs-built_in">max</span>(dim=<span class="hljs-number">1</span>)<br>    idx = idx.data.numpy()<br>    pring(<span class="hljs-string">&#x27;Predicted:&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>.join([idx2char[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> idx]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    pring(<span class="hljs-string">&#x27;, Epoch [%d/15] loss=%.3f&#x27;</span> % (epoch+<span class="hljs-number">1</span>, loss.item()))<br></code></pre></td></tr></table></figure><h3 id="Change-Model"><a href="#Change-Model" class="headerlink" title="Change Model"></a>Change Model</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012023312.png" alt="image-20230801142629611" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012023572.png" alt="image-20230801142649600" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012023974.png" alt="image-20230801142659522" style="zoom:50%;" /><h3 id="Change-Data"><a href="#Change-Data" class="headerlink" title="Change Data"></a>Change Data</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012023369.png" alt="image-20230801142743846" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012023736.png" alt="image-20230801142752433" style="zoom:50%;" /><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012023336.png" alt="image-20230801142805311" style="zoom:50%;" /><h2 id="Associate-a-vector-with-a-word-x2F-character"><a href="#Associate-a-vector-with-a-word-x2F-character" class="headerlink" title="Associate a vector with a word&#x2F;character"></a>Associate a vector with a word&#x2F;character</h2><p>One-hot encoding of words and characters</p><ul><li>The one-hot vectors are high-dimension.</li><li>The one-hot vectors are sparse.</li><li>The one-hot vectors are hardcoded.</li></ul><p>Do we have a way to associate a vector with a word&#x2F;character<br>with following specification:</p><ul><li>Lower-dimension</li><li>Dense</li><li>Learned from data</li></ul><p>A popular and powerful way is called EMBEDDING.</p><h2 id="One-hot-vs-Embedding"><a href="#One-hot-vs-Embedding" class="headerlink" title="One-hot vs Embedding"></a>One-hot vs Embedding</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024258.png" alt="image-20230801143041912" style="zoom:50%;" /><h2 id="Embedding-in-Pytorch"><a href="#Embedding-in-Pytorch" class="headerlink" title="Embedding in Pytorch"></a>Embedding in Pytorch</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024776.png" alt="image-20230801143105045" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024347.png" alt="image-20230801143220150" style="zoom:50%;" /><h2 id="Using-embedding-and-linear-layer"><a href="#Using-embedding-and-linear-layer" class="headerlink" title="Using embedding and linear layer"></a>Using embedding and linear layer</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024923.png" alt="image-20230801143303899" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024603.png" alt="image-20230801143324273" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024913.png" alt="image-20230801143341497" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024177.png" alt="image-20230801143403186" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024902.png" alt="image-20230801143417790" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024326.png" alt="image-20230801143446928" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024445.png" alt="image-20230801143458797" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024549.png" alt="image-20230801143511192" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024782.png" alt="image-20230801143547001" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024449.png" alt="image-20230801143600876" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012024580.png" alt="image-20230801143611462" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025681.png" alt="image-20230801143625949" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025074.png" alt="image-20230801143639069" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025545.png" alt="image-20230801143654465" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025968.png" alt="image-20230801143705608" style="zoom:50%;" /><h1 id="13-RNN-Classifier"><a href="#13-RNN-Classifier" class="headerlink" title="13 RNN Classifier"></a>13 RNN Classifier</h1><h2 id="Name-Claffication"><a href="#Name-Claffication" class="headerlink" title="Name Claffication"></a>Name Claffication</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025312.png" alt="image-20230801144747857" style="zoom:50%;" /><h2 id="Our-Model"><a href="#Our-Model" class="headerlink" title="Our Model"></a>Our Model</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025977.png" alt="image-20230801155330623" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025370.png" alt="image-20230801185116343" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025446.png" alt="image-20230801185220761" style="zoom:50%;" /><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Main-Cycle"><a href="#Main-Cycle" class="headerlink" title="Main Cycle"></a>Main Cycle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># instantiate the classifier model</span><br>    <span class="hljs-comment"># 字母表大小，隐藏维度，国家，GRU层数</span><br>    classifier = RNNClassifier(N_CHARS, HIDDEN_SIZE, N_COUNTRY, N_LAYER)<br>    <span class="hljs-comment"># Whether use GPU for training model</span><br>    <span class="hljs-keyword">if</span> USE_GPU:<br>        device = torch.devoce(<span class="hljs-string">&quot;cuda:0&quot;</span>)<br>        classifier.to(device)<br>    <span class="hljs-comment"># Using cross entropy loss as loss function</span><br>    <span class="hljs-comment"># Using Adam optimizer</span><br>    criterion = torch.nn.CrossEntropyLoss()<br>    optimizer = torch.optim.Adam(classifier.parameters(), lr=<span class="hljs-number">0.001</span>)<br>    <span class="hljs-comment"># For printing elapsed time</span><br>    start = time.time()<br>    pring(<span class="hljs-string">&quot;Training for %d epochs...&quot;</span> % N_EPOCHS)<br>    acc_list[]<br>    <span class="hljs-comment"># In every epoch , trzining and testing the model once</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N_EPOCHS + <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># Train cycle</span><br>        trainModel()<br>        acc = testModel()<br>        acc_list.append(acc)<br></code></pre></td></tr></table></figure><h3 id="Preparing-Data"><a href="#Preparing-Data" class="headerlink" title="Preparing Data"></a>Preparing Data</h3><p>将字符串转换成列表，求每个字符对应的ASCII值</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025925.png" alt="image-20230801190104026" style="zoom:50%;" /><p>padding：使得字符的长度对齐，方便构成张量</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025230.png" alt="image-20230801190156940" style="zoom:50%;" /><p>将国家名宇索引对应</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025755.png" alt="image-20230801190250602" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NameDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, is_train_set=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-comment"># Reading data from .gz file with package gzip and csv</span><br>        filename = <span class="hljs-string">&#x27;data/names_train.csv.gz&#x27;</span> <span class="hljs-keyword">if</span> is_train_set <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;data/names_test.csv.gz&#x27;</span><br>        <span class="hljs-keyword">with</span> gzip.<span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            reader = csv.reader(f)<br>            rows = <span class="hljs-built_in">list</span>(reader)<br>        <span class="hljs-comment"># Save names and countries in list</span><br>        self.names = [row[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows]<br>        self.<span class="hljs-built_in">len</span> = <span class="hljs-built_in">len</span>(self.names)<br>        self.countries = [row[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows]<br>        <span class="hljs-comment"># Save countries and its index in list and dictionary</span><br>        <span class="hljs-comment"># set去重</span><br>        self.country_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(self.countries)))<br>        self.country_dict = self.getCountrDict()<br>        self.country_num = <span class="hljs-built_in">len</span>(self.country_list)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-comment"># 得到名字和国家索引</span><br>        <span class="hljs-keyword">return</span> self.names[index], slef.country_dict[self.countries[index]]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># Return the length of dataset</span><br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">len</span>   <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NameDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    ......<br>    <span class="hljs-comment"># Convert list to dictionary</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getCountryDict</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 空字典</span><br>        country_dict = <span class="hljs-built_in">dict</span>()<br>        <span class="hljs-keyword">for</span> idx, country_name <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.country_list, <span class="hljs-number">0</span>):<br>            <span class="hljs-comment"># 键值对</span><br>            country_dict[country_name] = idx<br>        <span class="hljs-keyword">return</span> country_dict<br>    <span class="hljs-comment"># Return country name giving index</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">idx2country</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">return</span> self.country_list[index]<br>    <span class="hljs-comment"># Return the number of country</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getCountriesNum</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.country_num<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">trainset = NameDataset(is_train_set=<span class="hljs-literal">True</span>)<br>trainloader = DataLoader(trainset, batch_size=BATCH_SIZE, shuffle=<span class="hljs-literal">True</span>)<br>testset = NameDataset(is_train_set=<span class="hljs-literal">False</span>)<br>testloader = DataLoader(testset, batch_size=BATCH_SIZE, shuffle=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># output size of out model</span><br>N_COUNTRY = trainset.getCountriesNum()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Paramenters</span><br>HIDDEN_SIZE = <span class="hljs-number">100</span><br>BATCH_SIZE = <span class="hljs-number">256</span><br>N_LAYER = <span class="hljs-number">2</span><br>N_EPOCHS = <span class="hljs-number">100</span><br>N_CHARS = <span class="hljs-number">128</span><br>USE_GPU = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="Model-Design"><a href="#Model-Design" class="headerlink" title="Model Design"></a>Model Design</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RNNClassifier</span>(torch.nnModule):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, input_size, hidden_size, output_size, n_layers=<span class="hljs-number">1</span>, bidirectional=<span class="hljs-literal">True</span></span>)<br>    <span class="hljs-built_in">super</span>(RNNClassifier, self).__init__()<br>        <span class="hljs-comment"># Parameters og GRU layers</span><br>        self.hidden_size = hidden_size<br>        self.n_layers = n_layers<br>        <span class="hljs-comment"># 双向或单相RNN</span><br>        self.n_directions = <span class="hljs-number">2</span> <span class="hljs-keyword">if</span> bidirectional <span class="hljs-keyword">else</span> <span class="hljs-number">1</span><br>        <span class="hljs-comment"># Parameters of GRU</span><br>        self.embedding = torch.nn.Embedding(input_size, hidden_size)<br>        self.gru = torch.nn.GRU(hidden_size, hidden_size, n_layers, bidirectional = bidirectional)<br>        self.fc = torch.nn Linear(hidden_size * self.n_directions, output_size)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_init_hidden</span>(<span class="hljs-params">self, batch_size</span>):<br>        hidden = torch.zeros(self.n_layers * self.n_directions, batch_size, self.hidden_size)<br>        <span class="hljs-keyword">return</span> creatr_tensor(hidden)<br></code></pre></td></tr></table></figure><h3 id="Bi-direction-RNN-x2F-LSTM-x2F-GRU"><a href="#Bi-direction-RNN-x2F-LSTM-x2F-GRU" class="headerlink" title="Bi-direction RNN&#x2F;LSTM&#x2F;GRU"></a>Bi-direction RNN&#x2F;LSTM&#x2F;GRU</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025200.png" alt="image-20230801195039113" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025386.png" alt="image-20230801195210256" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012025304.png" alt="image-20230801195221942" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026959.png" alt="image-20230801195234278" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RNNClassifier</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span>, seq_lengths</span>):<br>        <span class="hljs-comment"># input shape: B × S-&gt; S × B</span><br>        <span class="hljs-comment"># 转秩</span><br>        <span class="hljs-built_in">input</span> = <span class="hljs-built_in">input</span>.t()<br>        <span class="hljs-comment"># Save batch_size for make intial hidden</span><br>        batch_size = <span class="hljs-built_in">input</span>.size(<span class="hljs-number">1</span>)<br>        hidden = self._init_hidden(batch_size)<br>        embedding = self.embedding(<span class="hljs-built_in">input</span>)<br>        <br>        <span class="hljs-comment"># pack them up</span><br>        <span class="hljs-comment"># returns a PackSquence object</span><br>        gru_input = pack_padded_sequence(embedding, seq_lengths)<br>        <br>        output, hidden = self.gru(gru_input, hidden)<br>        <span class="hljs-keyword">if</span> self.n_directions = <span class="hljs-number">2</span><br>        hidden_cat = torch.cat([hidden[-<span class="hljs-number">1</span>], hidden[-<span class="hljs-number">2</span>]], dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            hidden_cat = hidden[-<span class="hljs-number">1</span>]<br>        fc_output = self.fc(hidden_cat)<br>        <span class="hljs-keyword">return</span> fc_ouput<br></code></pre></td></tr></table></figure><p> pack_padded_sequence(embedding, seq_lengths)：</p><p>先根据序列长度排序，再只放非0的序列</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026199.png" alt="image-20230801200310584" style="zoom:50%;" /><h3 id="Convert-name-to-tensor"><a href="#Convert-name-to-tensor" class="headerlink" title="Convert name to tensor"></a>Convert name to tensor</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026237.png" alt="image-20230801200526161" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026925.png" alt="image-20230801200539001" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026998.png" alt="image-20230801200557249" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026973.png" alt="image-20230801200618797" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026047.png" alt="image-20230801200634873" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_tensors</span>(<span class="hljs-params">names, countries</span>):<br>    sequences_and_lengths = [name2list(name) <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names]<br>    name_sequences = [s1[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> s1 <span class="hljs-keyword">in</span> sequences_and_lengths]<br>    seq_lengths = torch.LongTensor([s1[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> s1 <span class="hljs-keyword">in</span> sequences_and_lengths])<br>    countries = countries.long()<br>    <br>    <span class="hljs-comment"># make tensor of name, BatchSize x SeqLen</span><br>    seq_tensor = torch.zeros(<span class="hljs-built_in">len</span>(name_sequences), seq_lengths.<span class="hljs-built_in">max</span>().long())<br>    <span class="hljs-keyword">for</span> idx, (seq, seq_len) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">zip</span>(name_sequences, seq_lengths), <span class="hljs-number">0</span>)<br>    seq_tensor[idx, :seq_len] = torch.LongTensor(seq)<br>        <br>    <span class="hljs-comment"># sort by length to use park_padded_sequences</span><br>    seq_lengths, perm_idx = seq_lengths.sort(dim=<span class="hljs-number">0</span>, descending=<span class="hljs-literal">True</span>)<br>    seq_tensor = seq_tensor[perm_idx]<br>    countries = countries[perm_idx]<br>    <br>    <span class="hljs-keyword">return</span> create_tensor(seq_tensor),<br>  create_tensor(seq_lengths),<br>          create_tensor(countries)<br></code></pre></td></tr></table></figure><h3 id="One-Epoch-Training"><a href="#One-Epoch-Training" class="headerlink" title="One Epoch Training"></a>One Epoch Training</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026702.png" alt="image-20230801201450252" style="zoom:50%;" /><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026942.png" alt="image-20230801201551200" style="zoom:50%;" /><h3 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202308012026951.png" alt="image-20230801201640737" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch_Practice_2</title>
      <link href="/2024/02/20/PyTorch/PyTorch_Practice/PyTorch_Practice_2/"/>
      <url>/2024/02/20/PyTorch/PyTorch_Practice/PyTorch_Practice_2/</url>
      
        <content type="html"><![CDATA[<h1 id="7-Multiple-Dimension-Input"><a href="#7-Multiple-Dimension-Input" class="headerlink" title="7 Multiple Dimension Input"></a>7 Multiple Dimension Input</h1><h2 id="Diabetes-Dataset-糖尿病数据集"><a href="#Diabetes-Dataset-糖尿病数据集" class="headerlink" title="Diabetes Dataset 糖尿病数据集"></a>Diabetes Dataset 糖尿病数据集</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312202938.png" alt="image-20230731140753854" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312202318.png" alt="image-20230731140806704" style="zoom:50%;" /><h2 id="Multiple-Dimension-Logistic-Regression-Model"><a href="#Multiple-Dimension-Logistic-Regression-Model" class="headerlink" title="Multiple Dimension Logistic Regression Model"></a>Multiple Dimension Logistic Regression Model</h2><p>n指第几个特征</p><p>i指第几个样本</p><p>x与w想乘结果是标量，转秩后自身</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312202688.png" alt="image-20230731141544788" style="zoom:50%;" /><h2 id="Mini-Batch-N-samples"><a href="#Mini-Batch-N-samples" class="headerlink" title="Mini-Batch(N samples)"></a>Mini-Batch(N samples)</h2><p>element-wise 按元素依次计算，可用于向量计算</p><p>转换成矩阵运算，可以利用GPU进行并行计算</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312202369.png" alt="image-20230731141920472" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(torch.nn.Module):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Model, self).__init__()<br>        <span class="hljs-comment"># 输入维度8，输出维度1</span><br>        self.linear = torch.nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.sigmoid(self.linear(x))<br>        <span class="hljs-keyword">return</span> x<br>model = Model()<br></code></pre></td></tr></table></figure><h2 id="Linear-Layer"><a href="#Linear-Layer" class="headerlink" title="Linear Layer"></a>Linear Layer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.linear = torch.nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312202329.png" alt="image-20230731142515269" style="zoom:50%;" /><p>输出维度为2，将8维空间降到2维。相当于原来八维中的某几个元素通过矩阵映射到二维中的某个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.linear = torch.nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312202398.png" alt="image-20230731142930935" style="zoom:50%;" /><p>将矩阵看成空间变换的函数</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312202376.png" alt="image-20230731142740099" style="zoom:50%;" /><h2 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h2><p>多次维度改变</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312202420.png" alt="image-20230731143623553" style="zoom:50%;" /><h2 id="Example-Artificiall-Neural-Network"><a href="#Example-Artificiall-Neural-Network" class="headerlink" title="Example: Artificiall Neural Network"></a>Example: Artificiall Neural Network</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312202417.png" alt="image-20230731143809376" style="zoom:50%;" /><h2 id="Example-Diabetes-Prediction"><a href="#Example-Diabetes-Prediction" class="headerlink" title="Example: Diabetes Prediction"></a>Example: Diabetes Prediction</h2><p>Y表示病情是否会加重</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203715.png" alt="image-20230731143956806" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># 逗号分隔读取，数据类型是float32</span><br>xy = np.loadtxt(<span class="hljs-string">&#x27;diabetes.csv.gz&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>, dtype=np.float32)<br><span class="hljs-comment"># 将一个 NumPy 数组的部分切片转换成 PyTorch 中的 Tensor 对象。</span><br><span class="hljs-comment"># 所有行，所有列（除去最后一列）</span><br>x_data = torch.from_numpy(xy[:,:-<span class="hljs-number">1</span>])<br><span class="hljs-comment"># 取最后一列，有中括号代表是矩阵不是向量</span><br>y_data = toech.from_numpy(xy[:, [-<span class="hljs-number">1</span>]])<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_34621022/article/details/103558098">python中x[:],x[:-1],x[:,]x[:,-1]等操作含义解析</a></p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203585.png" alt="image-20230731145046471" style="zoom:50%;" /><h3 id="Define-Model"><a href="#Define-Model" class="headerlink" title="Define Model"></a>Define Model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Model, self).__init__()<br>        self.linear1 = torch.nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>)<br>        self.linear2 = torch.nn.Linear(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>)<br>        self.linear3 = torch.nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 没有参数，只需要定义一次</span><br>        self.sigmoid = torch.nn.Sigmoid()<br>        <br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.sigmoid(self.linear1(x))<br>        x = self.sigmoid(self.linear2(x))<br>        x = self.sigmoid(self.linear3(x))<br>        <span class="hljs-keyword">return</span> x<br>    <br>    model = Model() <br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203935.png" alt="image-20230731145634375" style="zoom:50%;" /><h3 id="Construct-Loss-ans-Optimizer"><a href="#Construct-Loss-ans-Optimizer" class="headerlink" title="Construct Loss ans Optimizer"></a>Construct Loss ans Optimizer</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203584.png" alt="image-20230731145702518" style="zoom:50%;" /><h3 id="Training-Cycle"><a href="#Training-Cycle" class="headerlink" title="Training Cycle"></a>Training Cycle</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203686.png" alt="image-20230731145739735" style="zoom:50%;" /><h3 id="使用Relu作为激活函数"><a href="#使用Relu作为激活函数" class="headerlink" title="使用Relu作为激活函数"></a>使用Relu作为激活函数</h3><p>Relu取值是[0, 1]，计算y_hat时需要使用sigmoid，防止对数取到0.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Model, self).__init__()<br>        self.linear1 = torch.nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>)<br>        self.linear2 = torch.nn.Linear(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>)<br>        self.linear3 = torch.nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br>        self.activate = torch.nn.ReLU()<br>        <br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.activate(self.linear1(x))<br>        x = self.activate(self.linear2(x))<br>        <span class="hljs-comment"># 计算y_hat时需要使用sigmoid，防止对数取到0.</span><br>        x = self.sigmoid(self.linear3(x))<br>        <span class="hljs-keyword">return</span> x<br>    <br>    model = Model() <br></code></pre></td></tr></table></figure><h1 id="8-Dataset-and-DataLoader"><a href="#8-Dataset-and-DataLoader" class="headerlink" title="8 Dataset and DataLoader"></a>8 Dataset and DataLoader</h1><h2 id="Termininology-Epoch-Batch-Size-Iterations"><a href="#Termininology-Epoch-Batch-Size-Iterations" class="headerlink" title="Termininology: Epoch, Batch-Size, Iterations"></a>Termininology: Epoch, Batch-Size, Iterations</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Training cycle</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(training_epochs)<br><span class="hljs-comment">#Loop over all batches</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(total_batch):<br></code></pre></td></tr></table></figure><h3 id="Definition-Epoch"><a href="#Definition-Epoch" class="headerlink" title="Definition:Epoch"></a>Definition:Epoch</h3><p>One forward pass and one backward pass of all the training examples. </p><h3 id="Definition-Batch-Size"><a href="#Definition-Batch-Size" class="headerlink" title="Definition:Batch-Size"></a>Definition:Batch-Size</h3><p>The number of training examples in one forward backward pass.</p><h3 id="Definition-Iteration"><a href="#Definition-Iteration" class="headerlink" title="Definition:Iteration"></a>Definition:Iteration</h3><p>Number of passes,each pass using [batch size]<br>number of examples.batch-size取了多少次。</p><p>Iteration × Batch-Size &#x3D; The number of Smaples</p><h2 id="DataLoader-batch-size-x3D-2-shuffle-x3D-True"><a href="#DataLoader-batch-size-x3D-2-shuffle-x3D-True" class="headerlink" title="DataLoader: batch_size &#x3D; 2, shuffle &#x3D; True"></a>DataLoader: batch_size &#x3D; 2, shuffle &#x3D; True</h2><p>shuffle:打乱顺序，使每一个epoch取得batch不同</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203404.png" alt="image-20230731152343406" style="zoom:50%;" /><h2 id="How-to-define-your-Dateset"><a href="#How-to-define-your-Dateset" class="headerlink" title="How to define your Dateset"></a>How to define your Dateset</h2><p>Dataset是抽象类，不能实例化，需要自己继承它创建自己的类，DataLoader是类，可以直接实例化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># Dataset is an abstract class.We can define our class inherited from this class.</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-comment"># DataLoader is a class to help us loading data in PyTorch.</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-comment"># DiabetesDataset is inherited from abstract class Dataset.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DiabetesDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># The expression,dataset[index] will call this magic function.</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># This magic function returns length of dataset.</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># Construct DiabetesDataset object</span><br>dataset = DiabetesDataset()<br><span class="hljs-comment"># Initialize loader with batch-size, shuffle,process number(进程数).</span><br>train_loader = DataLoader(dataset=dataset, batch_size=<span class="hljs-number">32</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="ExtraL-num-workers-in-Windows"><a href="#ExtraL-num-workers-in-Windows" class="headerlink" title="ExtraL num_workers in Windows"></a>ExtraL num_workers in Windows</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">train_loader = DataLoader(dataset=dataset, batch_size=<span class="hljs-number">32</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">2</span>)<br>......<br><span class="hljs-comment"># enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader, <span class="hljs-number">0</span>):<br>        ......<br></code></pre></td></tr></table></figure><p>The implementation of multiprocessing is different on Windows,which uses <strong>spawn</strong> instead of <strong>fork</strong>.</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203477.png" alt="image-20230731153725397" style="zoom:67%;" /><p>So we have to <strong>wrap</strong> (包裹)the code with an if-clause to protect the code from executing multiple times.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">if_name_ == <span class="hljs-string">&#x27;_main_&#x27;</span>:<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader, <span class="hljs-number">0</span>):<br>        <span class="hljs-comment"># 1.Prepare data</span><br></code></pre></td></tr></table></figure><h2 id="Example-Diabetes-Dataset"><a href="#Example-Diabetes-Dataset" class="headerlink" title="Example: Diabetes Dataset"></a>Example: Diabetes Dataset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DiabetesDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, filepath</span>):<br>        xy = np.loadtxt(filepath, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>, dtype=np.float32)<br>        <span class="hljs-comment"># xy是N行9列，shape是(N,9)，取shape第0个元素N，即样本数</span><br>        self.<span class="hljs-built_in">len</span> = xy.shape[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># 数据都加载到内存，后面可以用索引取</span><br>        self.x_data = torch.from_numpy(xy[:, -<span class="hljs-number">1</span>])<br>        self.y_data = torch.from_numpy(xy[:, [-<span class="hljs-number">1</span>]])<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-comment"># return x, y表示返回元组(x, y)</span><br>        <span class="hljs-keyword">return</span> self.x_data[index], self.y_data[index]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">len</span><br>dataset = DiabetesDataset(<span class="hljs-string">&#x27;diabetes.csv.gz&#x27;</span>)<br>train_loader = DataLoader(dataset=dataset, batch_size=<span class="hljs-number">32</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="Using-DataLoader"><a href="#Using-DataLoader" class="headerlink" title="Using DataLoader"></a>Using DataLoader</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-comment"># data内有(x, y)</span><br>    <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader, <span class="hljs-number">0</span>):<br>        <span class="hljs-comment"># 1.Prepare data</span><br>        <span class="hljs-comment"># data会被DataLoader自动转化为张量</span><br>        inputs, labels = data<br>        <span class="hljs-comment"># 2 Forward</span><br>        y_pred = model(inputs)<br>        loss = criterion(y_pred, labels)<br>        <span class="hljs-built_in">print</span>(epoch, i, loss.item())<br>        <span class="hljs-comment"># 3 Backward</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        <span class="hljs-comment"># 4 Updata</span><br>        optimizer.step()<br></code></pre></td></tr></table></figure><h2 id="总过程"><a href="#总过程" class="headerlink" title="总过程"></a>总过程</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203770.png" alt="image-20230731155744933" style="zoom:50%;" /><h2 id="Avaiable-dataset-loaders"><a href="#Avaiable-dataset-loaders" class="headerlink" title="Avaiable dataset loaders"></a>Avaiable dataset loaders</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203601.png" alt="image-20230731155916025" style="zoom:50%;" /><h2 id="Example-MINST-Dataset"><a href="#Example-MINST-Dataset" class="headerlink" title="Example: MINST Dataset"></a>Example: MINST Dataset</h2><p>训练数据集需要shuffle，测试时不需要shuffle，方便观察记录</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312203211.png" alt="image-20230731160159346" style="zoom:50%;" /><h1 id="9-Softmax-Classifier"><a href="#9-Softmax-Classifier" class="headerlink" title="9 Softmax Classifier"></a>9 Softmax Classifier</h1><h2 id="Design-10-putputs-using-Sigmoid"><a href="#Design-10-putputs-using-Sigmoid" class="headerlink" title="Design 10 putputs using Sigmoid?"></a>Design 10 putputs using Sigmoid?</h2><p>10分类不能满足分布要求：概率总和为1</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204608.png" alt="image-20230731163619340" style="zoom:50%;" /><p>We hope the outputs is <strong>competitivel (竞争性)</strong> Actually we hope the neural network outputs a distribution.</p><h2 id="Output-a-Distribution-of-prediction-with-Softmax"><a href="#Output-a-Distribution-of-prediction-with-Softmax" class="headerlink" title="Output a Distribution of prediction with Softmax"></a>Output a Distribution of prediction with Softmax</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204524.png" alt="image-20230731164027511" style="zoom:50%;" /><h2 id="Softmax-Layer"><a href="#Softmax-Layer" class="headerlink" title="Softmax Layer"></a>Softmax Layer</h2><p>使用指数因为指数值域大于零</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204600.png" alt="image-20230731164324737" style="zoom:50%;" /><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204575.png" alt="image-20230731164504676" style="zoom:50%;" /><h2 id="Loss-function-Cross-Entropy"><a href="#Loss-function-Cross-Entropy" class="headerlink" title="Loss function - Cross Entropy"></a>Loss function - Cross Entropy</h2><p>NLLLOSS(Negative Log Likelihood Loss负对数似然损失)</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204507.png" alt="image-20230731164955770" style="zoom:50%;" /><h2 id="Cross-Entropy-in-Numpy"><a href="#Cross-Entropy-in-Numpy" class="headerlink" title="Cross Entropy in Numpy"></a>Cross Entropy in Numpy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>y = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br>z = np.array([<span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>, -<span class="hljs-number">0.1</span>])<br>y_pred = np.exp(z) / np.exp(z).<span class="hljs-built_in">sum</span>()<br>loss = (-y * np.log(y_pred)).<span class="hljs-built_in">sum</span>()<br><span class="hljs-built_in">print</span>(loss)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204227.png" alt="image-20230731165251125" style="zoom:50%;" /><h2 id="Cross-Entropy-in-Pytorch"><a href="#Cross-Entropy-in-Pytorch" class="headerlink" title="Cross Entropy in Pytorch"></a>Cross Entropy in Pytorch</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># 长整数型</span><br>y = torch.LongTensor([<span class="hljs-number">0</span>])<br>z = torch.Tensot([<span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>, -<span class="hljs-number">0.1</span>])<br>criterion = torch.nn.CrossEntropyLoss()<br>loss = critetion(z, y)<br><span class="hljs-built_in">print</span>(loss)<br></code></pre></td></tr></table></figure><h2 id="Mini-Batch-batch-size-x3D-3"><a href="#Mini-Batch-batch-size-x3D-3" class="headerlink" title="Mini-Batch: batch_size &#x3D; 3"></a>Mini-Batch: batch_size &#x3D; 3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>criterion = torch.nn.CrossEntropyLoss()<br>Y = torch.LongTensor([<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>Y_pred1 = torch.Tensor([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.9</span>],<br>                       [<span class="hljs-number">1.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>],<br>                       [<span class="hljs-number">0.2</span>, <span class="hljs-number">2.1</span>, <span class="hljs-number">0.1</span>]])<br>Y_pred2 = torch.Tensor([[<span class="hljs-number">0.8</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>],<br>                       [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>],<br>                       [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>]])<br>l1 = critetion(Y_pred1, Y)<br>l2 = criterion(Y+pred2, Y)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Batch Loss1 = &quot;</span>, l1.data, <span class="hljs-string">&quot;\nBatch Loss2=&quot;</span>, l2.data)<br></code></pre></td></tr></table></figure><p>每一行为一个样本，每一行的某一列是某个特征。某个特征值最大，代表属于这个分类。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204973.png" alt="image-20230731171330552" style="zoom:50%;" /><h2 id="Back-to-MNIST-Dataset"><a href="#Back-to-MNIST-Dataset" class="headerlink" title="Back to MNIST Dataset"></a>Back to MNIST Dataset</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204466.png" alt="image-20230731171416512" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204378.png" alt="image-20230731172827114" style="zoom:50%;" /><h2 id="Implementation-of-classifier-to-MNIST-dataset"><a href="#Implementation-of-classifier-to-MNIST-dataset" class="headerlink" title="Implementation of classifier to MNIST dataset"></a>Implementation of classifier to MNIST dataset</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204948.png" alt="image-20230731172856207" style="zoom:50%;" /><h3 id="Import-Package"><a href="#Import-Package" class="headerlink" title="Import Package"></a>Import Package</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># For constructing DataLoader</span><br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-comment"># For using function relu()</span><br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-comment"># For constructing Optimizer</span><br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br></code></pre></td></tr></table></figure><h3 id="Prepare-Dataset"><a href="#Prepare-Dataset" class="headerlink" title="Prepare Dataset"></a>Prepare Dataset</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">64</span><br>transform = transforms.Compose([<br>    <span class="hljs-comment"># Convert the PIL Image to Tensor</span><br>    transforms.ToTensor(),<br>    <span class="hljs-comment"># 归一化。The parameters are mean均值 and std标准差 respectively.</span><br>    <span class="hljs-comment"># 可以将输入的图像数据进行归一化处理，使得数据分布在均值为 0、标准差为 1 的范围内。这种预处理操作可以帮助训练过程更加稳定且收敛更快。</span><br>    <span class="hljs-comment"># 这里只有一个值 0.1307，意味着对图像的每个通道都要减去这个值。</span><br>    <span class="hljs-comment"># (0.1307, 0.5, 0.2) 表示对图像的第一个通道减去 0.1307，对第二个通道减去 0.5，对第三个通道减去 0.2。</span><br>    transforms.Normalize((<span class="hljs-number">0.1307</span>, ), (<span class="hljs-number">0.3801</span>, ))<br>])<br>train_dataset = dataset.MNIST(root=<span class="hljs-string">&#x27;../dataset/mnist/&#x27;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>, transform=transform)<br>train_loader = DataLoader(train_dataset, shuffle=<span class="hljs-literal">True</span>, batch_size=batch_size)<br><br>test_dataset = dataset.MNIST(root=<span class="hljs-string">&#x27;../dataset/mnist/&#x27;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>, transform=transform)<br>test_loader = DataLoader(test_dataset, shuffle=<span class="hljs-literal">False</span>, batch_size=batch_size)<br></code></pre></td></tr></table></figure><p>图像张量</p><p>Pytorch需要将(W,H,C)格式转换成(C,W,H)</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204072.png" alt="image-20230731173834875" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204724.png" alt="image-20230731173856872" style="zoom:50%;" /><p>归一化</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204788.png" alt="image-20230731174216398" style="zoom:67%;" /><h2 id="Design-Model"><a href="#Design-Model" class="headerlink" title="Design Model"></a>Design Model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 转换成二阶张量</span><br>x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">784</span>)<br><span class="hljs-comment"># 线性层</span><br>self.l1 = torch.nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">512</span>)<br>x = F.relu(self.l1(x))<br>self.l2 = torch.nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">256</span>)<br>x = F.relu(self.l2(x))<br>self.l3 = torch.nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">128</span>)<br>x = F.relu(self.l3(x))<br>self.l4 = torch.nn.Linear(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>)<br>x = F.relu(self.l4(x))<br>self.l5 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204022.png" alt="image-20230731175345253" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.l1 = torch.nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">512</span>)<br>        self.l2 = torch.nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">256</span>)<br>        self.l3 = torch.nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">128</span>)<br>        self.l4 = torch.nn.Linear(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>)<br>        self.l5 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        <br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">784</span>)<br>        x = F.relu(self.l1(x))<br>        x = F.relu(self.l2(x))  <br>        x = F.relu(self.l3(x))<br>        x = F.relu(self.l4(x))<br>        <span class="hljs-comment"># 最后一层不用激活，直接输入softmax</span><br>        <span class="hljs-keyword">return</span> self.l5(x)<br>model = Net()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312205481.png" alt="image-20230731175725281" style="zoom:50%;" /><h3 id="Construct-Loss-and-Optimizer"><a href="#Construct-Loss-and-Optimizer" class="headerlink" title="Construct Loss and Optimizer"></a>Construct Loss and Optimizer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">criterion = torch.nn.CrossEntropyLoss()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">momentum 参数可以被设定为一个[0, 1]的值。当该值较小（例如接近0）时，意味着过去的梯度对当前步骤的影响较小，更新步骤更加依赖于当前的梯度信息。当 momentum 较大（例如接近1）时，过去的梯度对当前步骤的影响更显著，更新步骤会更加保持一定的方向性。</span><br><span class="hljs-string">通过引入动量项，momentum 可以帮助加快训练速度、跳出局部最优点，并减少参数更新的波动性。它在处理具有高曲率或峡谷形状的损失函数时特别有用。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>optimizer = optim.SGD(model.paramenter(), lr=<span class="hljs-number">0.01</span>, momentum=<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312204050.png" alt="image-20230731180027058" style="zoom:50%;" /><h3 id="Train-and-Test"><a href="#Train-and-Test" class="headerlink" title="Train and Test"></a>Train and Test</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">epoch</span>):<br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> batch_idx, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader, <span class="hljs-number">0</span>):<br>        inputs, target = data<br>        optimizer.zero_grad()<br>        <span class="hljs-comment"># forward + backward + update</span><br>        outputs = model(inputs)<br>        loss = criterion(outputs, target)<br>        loss.backward()<br>        optimizer.step()<br>        <br>        running_loss += loss.item()<br>        <span class="hljs-comment"># 每300次训练输出loss</span><br>        <span class="hljs-keyword">if</span> batch_idx % <span class="hljs-number">300</span> == <span class="hljs-number">299</span>:<br>            <span class="hljs-comment"># 百分号 % 是格式化字符串的操作符，用于将括号中的变量值插入到整个字符串中的占位符位置。</span><br>            pring(<span class="hljs-string">&#x27;[%d, %5d] loss: %.3f&#x27;</span> % (epoch + <span class="hljs-number">1</span>, batch_idx + <span class="hljs-number">1</span>, running_loss / <span class="hljs-number">300</span>))<br>            running_loss = <span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    correct = <span class="hljs-number">0</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 不会计算梯度</span><br>    <span class="hljs-keyword">with</span> torch.no_grad()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader<br>        images, labels = data<br>            outputs = model(images)<br>            <span class="hljs-comment"># outputs是矩阵，dim=1代表按列方向取最大值,max返回最大值和最大值的下标，_代表忽略最大值，predicted是最大值的下标，即预测类别</span><br>            -, predicted = torch.<span class="hljs-built_in">max</span>(outputs.data, dim=<span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># labels是N×1的矩阵，size是元组(N,1),size(0)取第0个元素N。total就是训练到这一轮位置类别总数</span><br>            total += labels.size(<span class="hljs-number">0</span>)<br>            <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            比较 predicted 和 labels 两个张量中的每个元素是否相等。这将返回一个布尔值张量，其中对于相等的元素位置，对应的值为 True，否则为 False。</span><br><span class="hljs-string">接着，.sum() 对布尔值张量进行求和操作，统计出所有为 True 的元素的数量。最后，使用 .item() 将结果转换为 Python 中的标量值。</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>            correct += (predicted == labels).<span class="hljs-built_in">sum</span>().item()<br>            <span class="hljs-comment"># %%代表输出百分号%</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Accuracy on test set: %d %%&#x27;</span> % (<span class="hljs-number">100</span> * correct / total))<br>            <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        train(epoch)<br>        test()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206854.png" alt="image-20230731195933430" style="zoom:50%;" /><h1 id="10-Basic-CNN"><a href="#10-Basic-CNN" class="headerlink" title="10 Basic CNN"></a>10 Basic CNN</h1><p>线性层也称全连接层</p><h2 id="Convolutional-Neural-Network"><a href="#Convolutional-Neural-Network" class="headerlink" title="Convolutional Neural Network"></a>Convolutional Neural Network</h2><p>保留空间信息</p><p>下采样Subsampling</p><p>通道数不变，宽度和高度会变，减少数据量，降低运算需求。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206950.png" alt="image-20230731202545498" style="zoom:50%;" /><h2 id="Convolution"><a href="#Convolution" class="headerlink" title="Convolution"></a>Convolution</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206305.png" alt="image-20230731203713124" style="zoom:50%;" /><h3 id="Single-Input-Channel"><a href="#Single-Input-Channel" class="headerlink" title="Single Input Channel"></a>Single Input Channel</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206538.png" alt="image-20230731203913716" style="zoom:50%;" /><h3 id="3-Input-Channels"><a href="#3-Input-Channels" class="headerlink" title="3 Input Channels"></a>3 Input Channels</h3><p>输入通道数和卷积核通道数相同</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206440.png" alt="image-20230731204057900" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206005.png" alt="image-20230731204236742" style="zoom:50%;" /><h3 id="N-Input-Channels"><a href="#N-Input-Channels" class="headerlink" title="N Input Channels"></a>N Input Channels</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206351.png" alt="image-20230731204337825" style="zoom:50%;" /><h3 id="N-Input-Channels-and-M-Output-Channels"><a href="#N-Input-Channels-and-M-Output-Channels" class="headerlink" title="N Input Channels and M Output Channels"></a>N Input Channels and M Output Channels</h3><p>卷积核个数决定输出的特征图的通道</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206463.png" alt="image-20230731204501355" style="zoom:50%;" /><h3 id="Convolutional-Layer"><a href="#Convolutional-Layer" class="headerlink" title="Convolutional Layer"></a>Convolutional Layer</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206390.png" alt="image-20230731204604197" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>in_channels, out_channels = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br>width, height = <span class="hljs-number">100</span>, <span class="hljs-number">100</span><br>kernel_size = <span class="hljs-number">3</span><br>batch_size = <span class="hljs-number">1</span><br><span class="hljs-comment"># 正态分布随机采样</span><br><span class="hljs-built_in">input</span> = torch.randn(batch_size, in_channels, width, height)<br>conv_layer = torch.nn.Conv2d(in_channels, out_channels, kernel_size=kernel_size)<br>output = conv_layer(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape) <span class="hljs-comment"># torch.Size([1, 5, 100, 100])</span><br><span class="hljs-built_in">print</span>(output.shape) <span class="hljs-comment"># torch.Size([1, 10, 98, 98])</span><br><span class="hljs-comment"># 10是输出通道，5是输入通道</span><br><span class="hljs-built_in">print</span>(conv_layer.weight.shape) <span class="hljs-comment"># torch.Size([10, 5, 3, 3])</span><br></code></pre></td></tr></table></figure><h3 id="padding-x3D-1"><a href="#padding-x3D-1" class="headerlink" title="padding &#x3D;  1"></a>padding &#x3D;  1</h3><p>一般卷积核3×3一圈，5×5两圈</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206191.png" alt="image-20230731205624430" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-built_in">input</span> = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>,<br>        <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>,<br>        <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>,<br>        <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>,<br>        <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br><span class="hljs-comment"># B, C, W, H</span><br><span class="hljs-built_in">input</span> = torch.Tensor(<span class="hljs-built_in">input</span>).view(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>)<br><span class="hljs-comment"># padding = 1</span><br>conv_layer = torch.nn.Con2d(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 卷积核</span><br><span class="hljs-comment"># 输出通道数，输入通道数，宽度，高度</span><br>kernel = torch.Tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]).view(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>conv_layer.weight.data = kernel.data<br>output = conv_layer(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h3 id="stride-x3D-2"><a href="#stride-x3D-2" class="headerlink" title="stride &#x3D; 2"></a>stride &#x3D; 2</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206666.png" alt="image-20230731210128365" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-built_in">input</span> = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>,<br>        <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>,<br>        <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>,<br>        <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>,<br>        <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br><span class="hljs-comment"># B, C, W, H</span><br><span class="hljs-built_in">input</span> = torch.Tensor(<span class="hljs-built_in">input</span>).view(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>)<br><span class="hljs-comment"># padding = 1</span><br>conv_layer = torch.nn.Con2d(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, bias=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 卷积核</span><br><span class="hljs-comment"># 输出通道数，输入通道数，宽度，高度</span><br>kernel = torch.Tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]).view(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>conv_layer.weight.data = kernel.data<br>output = conv_layer(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h2 id="Max-Pooling-Layer"><a href="#Max-Pooling-Layer" class="headerlink" title="Max Pooling Layer"></a>Max Pooling Layer</h2><p>通道数量不变</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206974.png" alt="image-20230731210304557" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-built_in">input</span> = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span><br>        <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span><br>        <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span><br>        <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span><br>        ]<br><span class="hljs-built_in">input</span> = torch.Tensor(<span class="hljs-built_in">input</span>).view(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>)<br>maxpooling_layer = torch.nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>)<br>output = maxpooling_layer(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h2 id="A-Simple-Convolutional-Neural-Network"><a href="#A-Simple-Convolutional-Neural-Network" class="headerlink" title="A Simple Convolutional Neural Network"></a>A Simple Convolutional Neural Network</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206144.png" alt="image-20230731211408617" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206033.png" alt="image-20230731211712817" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = torch.nn.Con2d(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.conv2 = torch.nn.Conv2d(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.pooling = torch.nn.MaxPool2d(<span class="hljs-number">2</span>)<br>        self.fc = torch.nn.Linear(<span class="hljs-number">320</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># Flatten data from(n, 1, 28, 28) to (n, 784)</span><br>        <span class="hljs-comment"># 样本数量</span><br>        batch_size = x.size(<span class="hljs-number">0</span>)<br>        x = F.relu(self.pooling(self.conv1(x)))<br>        x = F.relu(self.pooling(self.conv2(x)))<br>        x = x.view(batch_size, -<span class="hljs-number">1</span>) <span class="hljs-comment"># flatten</span><br>        x = self.fc(x)<br>        <span class="hljs-keyword">return</span> x<br>    <br>model = Net()<br></code></pre></td></tr></table></figure><h2 id="How-to-use-GPU"><a href="#How-to-use-GPU" class="headerlink" title="How to use GPU"></a>How to use GPU</h2><h3 id="Move-Model-to-GPU"><a href="#Move-Model-to-GPU" class="headerlink" title="Move Model to GPU"></a>Move Model to GPU</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = torch.nn.Con2d(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.conv2 = torch.nn.Conv2d(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.pooling = torch.nn.MaxPool2d(<span class="hljs-number">2</span>)<br>        self.fc = torch.nn.Linear(<span class="hljs-number">320</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># Flatten data from(n, 1, 28, 28) to (n, 784)</span><br>        <span class="hljs-comment"># 样本数量</span><br>        batch_size = x.size(<span class="hljs-number">0</span>)<br>        x = F.relu(self.pooling(self.conv1(x)))<br>        x = F.relu(self.pooling(self.conv2(x)))<br>        x = x.view(batch_size, -<span class="hljs-number">1</span>) <span class="hljs-comment"># flatten</span><br>        x = self.fc(x)<br>        <span class="hljs-keyword">return</span> x<br>    <br>model = Net()<br><span class="hljs-comment"># Define device as the first visible cuda device if we have CUDA available.</span><br>device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br><span class="hljs-comment"># Convert parameters and buffers of all modules to CUDA Tensor.</span><br>model.to(device)<br></code></pre></td></tr></table></figure><h3 id="Move-Tensors-to-GPU"><a href="#Move-Tensors-to-GPU" class="headerlink" title="Move Tensors to GPU"></a>Move Tensors to GPU</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">epoch</span>):<br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> batch_idx, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader, <span class="hljs-number">0</span>):<br>        inputs, target = data<br>        <span class="hljs-comment"># Send the inputs and targets at every step to the GPU.</span><br>        inputs, target = inputs.to(device), target.to(device)<br>        optimizer.zero_grad()<br>        <span class="hljs-comment"># forward + backward + update</span><br>        outputs = model(inputs)<br>        loss = criterion(outputs, target)<br>        loss.backward()<br>        optimizer.step()<br>        <br>        running_loss += loss.item()<br>        <span class="hljs-keyword">if</span> batch_idx % <span class="hljs-number">300</span> == <span class="hljs-number">299</span>:<br>            pring(<span class="hljs-string">&#x27;[%d, %5d] loss: %.3f&#x27;</span> % (epoch + <span class="hljs-number">1</span>, batch_idx + <span class="hljs-number">1</span>, running_loss / <span class="hljs-number">300</span>))<br>            running_loss = <span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    correct = <span class="hljs-number">0</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader<br>        images, labels = data<br>             <span class="hljs-comment"># Send the inputs and targets at every step to the GPU.</span><br>        images, labels = images.to(device), labels.to(device)<br>            outputs = model(images)<br>            -, predicted = torch.<span class="hljs-built_in">max</span>(outputs.data, dim=<span class="hljs-number">1</span>)<br>            total += labels.size(<span class="hljs-number">0</span>)<br>            correct += (predicted == labels).<span class="hljs-built_in">sum</span>().item()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Accuracy on test set: %d %%&#x27;</span> % (<span class="hljs-number">100</span> * correct / total))<br>            <br></code></pre></td></tr></table></figure><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307312206415.png" alt="image-20230731213344785" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch_Practice_1</title>
      <link href="/2024/02/20/PyTorch/PyTorch_Practice/PyTorch_Practice_1/"/>
      <url>/2024/02/20/PyTorch/PyTorch_Practice/PyTorch_Practice_1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-OverView"><a href="#1-OverView" class="headerlink" title="1 OverView"></a>1 OverView</h1><h2 id="Goal-of-this-tutorial"><a href="#Goal-of-this-tutorial" class="headerlink" title="Goal of this tutorial"></a>Goal of this tutorial</h2><ul><li>How to implement learning system using PyTorch</li><li>Understand the basic of neural networks deep learning</li></ul><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>Algebra Probability</li><li>Python</li></ul><h2 id="Human-Intelligence"><a href="#Human-Intelligence" class="headerlink" title="Human Intelligence"></a>Human Intelligence</h2><h3 id="Infer-推理"><a href="#Infer-推理" class="headerlink" title="Infer 推理"></a>Infer 推理</h3><p>What to eat for dinner? 决策。根据已有信息（经济，个人偏好）推理。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302226143.png" alt="image-20230730142434853" style="zoom:50%;" /><h3 id="Prediction-预测"><a href="#Prediction-预测" class="headerlink" title="Prediction 预测"></a>Prediction 预测</h3><p>实体 -&gt; 抽象</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311258920.png" alt="image-20230730142756467" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302226998.png" alt="image-20230730142807343" style="zoom:50%;" /><h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><p>使用算法推理或预测</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302226423.png" alt="image-20230730142950891" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302226233.png" alt="image-20230730143053679" style="zoom:50%;" /><h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><p>使用标签数据集训练模型</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302226029.png" alt="image-20230730143134256" style="zoom:50%;" /><p>常规算法：</p><ul><li>穷举法</li><li>贪心法</li><li>分治法</li><li>动态规划</li></ul><p>机器学习的算法：</p><p>利用数据集找出算法</p><h2 id="Deep-Learning"><a href="#Deep-Learning" class="headerlink" title="Deep Learning"></a>Deep Learning</h2><p>MLP 多层感知机</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302226868.png" alt="image-20230730143713331" style="zoom:50%;" /><h2 id="How-to-develop-learning-system"><a href="#How-to-develop-learning-system" class="headerlink" title="How to develop learning system?"></a>How to develop learning system?</h2><h3 id="基于规则的系统"><a href="#基于规则的系统" class="headerlink" title="基于规则的系统"></a>基于规则的系统</h3><p>手工设计程序，规则会越来越多，不利于维护</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302226161.png" alt="image-20230730144243250" style="zoom:50%;" /><p>示例：求原函数</p><ul><li>构造知识库（函数的原函数）</li><li>定义规则</li><li>三角变换</li></ul><h3 id="经典机器学习"><a href="#经典机器学习" class="headerlink" title="经典机器学习"></a>经典机器学习</h3><p>手工进行特征提取：将输入变为向量。</p><p>建立向量和输出的映射：y&#x3D;f(x)</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302226654.png" alt="image-20230730144600338" style="zoom:50%;" /><h3 id="表示学习"><a href="#表示学习" class="headerlink" title="表示学习"></a>表示学习</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302226353.png" alt="image-20230730145357381" style="zoom:50%;" /><p><strong>维度诅咒</strong>：输入的特征数越多，即维度越高，需要采样的数量越多。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227165.png" alt="image-20230730144848619" style="zoom:50%;" /><p>线性映射：N维映射到3维</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227424.png" alt="image-20230730145120814" style="zoom:50%;" /><h4 id="Manifold-流形"><a href="#Manifold-流形" class="headerlink" title="Manifold 流形"></a>Manifold 流形</h4><p>示例：银河系</p><p>三维映射到二维</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227146.png" alt="image-20230730145342647" style="zoom:50%;" /><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><p>特征更简单。需要额外的层提取特征</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227523.png" alt="image-20230730145525280" style="zoom:50%;" /><h2 id="Rule-based-system-VS-Representation-Learning"><a href="#Rule-based-system-VS-Representation-Learning" class="headerlink" title="Rule-based system VS Representation Learning"></a>Rule-based system VS Representation Learning</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227066.png" alt="image-20230730145938708" style="zoom:50%;" /><h2 id="Traditional-machine-learning-strategy"><a href="#Traditional-machine-learning-strategy" class="headerlink" title="Traditional machine learning strategy"></a>Traditional machine learning strategy</h2><p>分类，聚类，回归，降维</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227993.png" alt="image-20230730150024271" style="zoom:50%;" /><h2 id="New-challenge"><a href="#New-challenge" class="headerlink" title="New challenge"></a>New challenge</h2><ul><li>Limit of hand-designed feature. 人工设计的特征限制</li><li>SVM can not handle big data set well. 大数据</li><li>More and more application need to handle unstructured data. 无结构数据（图像，文本，声音）</li></ul><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227856.png" alt="image-20230730150428109" style="zoom:50%;" /><h2 id="Brief-history-of-neural-networks"><a href="#Brief-history-of-neural-networks" class="headerlink" title="Brief history of neural networks"></a>Brief history of neural networks</h2><p>From neuroscience to mathematic &amp; engineering</p><h3 id="Back-Propagation-反向传播"><a href="#Back-Propagation-反向传播" class="headerlink" title="Back Propagation 反向传播"></a>Back Propagation 反向传播</h3><ul><li>计算图可以传播导数</li><li>链式法则求偏导</li><li>b的导数需要把所有路径的偏导数相加</li></ul><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227697.png" alt="image-20230730151352342" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227666.png" alt="image-20230730151439223" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227450.png" alt="image-20230730151532329" style="zoom:50%;" /><h1 id="2-Linear-Model"><a href="#2-Linear-Model" class="headerlink" title="2 Linear Model"></a>2 Linear Model</h1><h2 id="Machine-Learning-1"><a href="#Machine-Learning-1" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227636.png" alt="image-20230730153954181" style="zoom:50%;" /><h3 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h3><p>训练时知道x和y</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227563.png" alt="image-20230730154226138" style="zoom:50%;" /><p>过拟合：训练时误差很小，背景和噪声也学到了（不希望）。</p><p>泛化：对于没见过的图像也能正确识别</p><h3 id="数据集划分"><a href="#数据集划分" class="headerlink" title="数据集划分"></a>数据集划分</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227522.png" alt="image-20230730162544297" style="zoom:50%;" /><h2 id="Model-design"><a href="#Model-design" class="headerlink" title="Model design"></a>Model design</h2><ul><li><p>What would be the best model for the data?</p></li><li><p>Linear model?</p></li></ul><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227774.png" alt="image-20230730163018247" style="zoom:50%;" /><p>To simplify the model</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227341.png" alt="image-20230730163737406" style="zoom:50%;" /><h2 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302227477.png" alt="image-20230730163841407" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302228174.png" alt="image-20230730164143505" style="zoom:50%;" /><h2 id="Compute-Loss"><a href="#Compute-Loss" class="headerlink" title="Compute Loss"></a>Compute Loss</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302228127.png" alt="image-20230730164430801" style="zoom:50%;" /><h2 id="Loss-function-amp-Cost-function"><a href="#Loss-function-amp-Cost-function" class="headerlink" title="Loss function &amp; Cost function"></a>Loss function &amp; Cost function</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302228175.png" alt="image-20230730164741291" style="zoom:50%;" /><h2 id="Compute-Cost"><a href="#Compute-Cost" class="headerlink" title="Compute Cost"></a>Compute Cost</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302228984.png" alt="image-20230730164811433" style="zoom:50%;" /><h3 id="穷举找到最好的权重"><a href="#穷举找到最好的权重" class="headerlink" title="穷举找到最好的权重"></a>穷举找到最好的权重</h3><p>穷举w求出损失函数曲线，找到最低点</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302228826.png" alt="image-20230730164956525" style="zoom:50%;" /><h2 id="How-to-draw-the-graph"><a href="#How-to-draw-the-graph" class="headerlink" title="How to draw the graph"></a>How to draw the graph</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302228032.png" alt="image-20230730165102750" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302228075.png" alt="image-20230730165122542" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302228034.png" alt="image-20230730165154163" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302228011.png" alt="image-20230730165211232" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229175.png" alt="image-20230730165252969" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229688.png" alt="image-20230730165321237" style="zoom:50%;" /><p>此处没有求均值，只是求和</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229088.png" alt="image-20230730165448085" style="zoom:50%;" /><p>求均值得到MSE</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229251.png" alt="image-20230730165511957" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229803.png" alt="image-20230730165629240" style="zoom:50%;" /><h1 id="3-Gradient-Descent"><a href="#3-Gradient-Descent" class="headerlink" title="3 Gradient Descent"></a>3 Gradient Descent</h1><h2 id="分治思想"><a href="#分治思想" class="headerlink" title="分治思想"></a>分治思想</h2><p>先进行稀疏的搜索，先找16个点</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229966.png" alt="image-20230730172042768" style="zoom:50%;" /><p>也不行，因为实际cost function函数可能有多个局部最小值</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229954.png" alt="image-20230730172127573" style="zoom:50%;" /><p>凸函数：连接任意两点，线段上的点都在定义域内的函数上方。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229468.png" alt="image-20230730172206692" style="zoom:50%;" /><h2 id="Optimization-Problem"><a href="#Optimization-Problem" class="headerlink" title="Optimization Problem"></a>Optimization Problem</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229388.png" alt="image-20230730172328444" style="zoom:50%;" /><h2 id="Gradient-Descent-Algorithm"><a href="#Gradient-Descent-Algorithm" class="headerlink" title="Gradient Descent Algorithm"></a>Gradient Descent Algorithm</h2><p>贪心思想</p><p>更新时梯度取反</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229402.png" alt="image-20230730172801477" style="zoom:50%;" /><h3 id="非凸函数"><a href="#非凸函数" class="headerlink" title="非凸函数"></a>非凸函数</h3><p>任意两点划一条线，不能保证线段上的点都在对应定义域的函数上方。</p><p>使用梯度下降算法只能保证找到局部最优点，不能保证找到全局最优点</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229983.png" alt="image-20230730173116492" style="zoom:50%;" /><h3 id="鞍点"><a href="#鞍点" class="headerlink" title="鞍点"></a>鞍点</h3><p>梯度等于0，到达鞍点参数更新后还是原值。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229101.png" alt="image-20230730173400310" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229346.png" alt="image-20230730173754071" style="zoom:50%;" /><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229336.png" alt="image-20230730173909588" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229483.png" alt="image-20230730173922793" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302229386.png" alt="image-20230730173938890" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230447.png" alt="image-20230730174042028" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230583.png" alt="image-20230730174105837" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230386.png" alt="image-20230730174149032" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230830.png" alt="image-20230730174354104" style="zoom:50%;" /><h3 id="指数加权均值"><a href="#指数加权均值" class="headerlink" title="指数加权均值"></a>指数加权均值</h3><p>使函数更平滑</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230731.png" alt="image-20230730174649178" style="zoom:50%;" /><h3 id="训练发散可能原因"><a href="#训练发散可能原因" class="headerlink" title="训练发散可能原因"></a>训练发散可能原因</h3><p>学习率太大</p><h2 id="Stochastic-Gradient-Descent"><a href="#Stochastic-Gradient-Descent" class="headerlink" title="Stochastic Gradient Descent"></a>Stochastic Gradient Descent</h2><p>随机选择一个样本的损失函数对权重求导</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230168.png" alt="image-20230730175043472" style="zoom:50%;" /><p>使用随机梯度下降原因：</p><p>单个样本有随机噪声，能够跨越鞍点</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230225.png" alt="image-20230730175028462"></p><h2 id="Implementation-of-SGD"><a href="#Implementation-of-SGD" class="headerlink" title="Implementation of SGD"></a>Implementation of SGD</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230992.png" alt="image-20230730175158377" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230058.png" alt="image-20230730175211466" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230238.png" alt="image-20230730175258213" style="zoom:50%;" /><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>梯度下降可以并行计算，随机梯度下降不能并行，因为下一次的权重更新需要上一个样本更新后的权重。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230137.png" alt="image-20230730175747932" style="zoom:50%;" /><h3 id="折中方法：Mini-Batch，小批量随机梯度下降算法"><a href="#折中方法：Mini-Batch，小批量随机梯度下降算法" class="headerlink" title="折中方法：Mini-Batch，小批量随机梯度下降算法"></a>折中方法：Mini-Batch，小批量随机梯度下降算法</h3><p>每次用一组样本计算梯度然后更新权重</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302230192.png" alt="image-20230730180036885" style="zoom:50%;" /><h1 id="4-Back-Propagation"><a href="#4-Back-Propagation" class="headerlink" title="4 Back Propagation"></a>4 Back Propagation</h1><h2 id="Compute-gradient-in-simple-network"><a href="#Compute-gradient-in-simple-network" class="headerlink" title="Compute gradient in simple network"></a>Compute gradient in simple network</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231087.png" alt="image-20230730195406535" style="zoom:50%;" /><h2 id="What-about-the-complicated-network"><a href="#What-about-the-complicated-network" class="headerlink" title="What about the complicated network?"></a>What about the complicated network?</h2><p>参数很多解析式计算复杂</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231154.png" alt="image-20230730195632279" style="zoom:50%;" /><h2 id="Computational-Graph"><a href="#Computational-Graph" class="headerlink" title="Computational Graph"></a>Computational Graph</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231379.png" alt="image-20230730200053893" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231038.png" alt="image-20230730200148115" style="zoom:50%;" /><h2 id="What-problem-about-two-layer-neural-network"><a href="#What-problem-about-two-layer-neural-network" class="headerlink" title="What problem about two layer neural network?"></a>What problem about two layer neural network?</h2><p>线性变换会化简，模型复杂度无法提升</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231763.png" alt="image-20230730200416988" style="zoom:50%;" /><p>添加非线性函数</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231221.png" alt="image-20230730200559282" style="zoom:50%;" /><h2 id="The-composition-of-functions-and-Chain-Rule"><a href="#The-composition-of-functions-and-Chain-Rule" class="headerlink" title="The composition of functions and Chain Rule"></a>The composition of functions and Chain Rule</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231029.png" alt="image-20230730200720960" style="zoom:50%;" /><h2 id="Chain-Rule"><a href="#Chain-Rule" class="headerlink" title="Chain Rule"></a>Chain Rule</h2><h3 id="1-Create-Computional-Graph-Forward"><a href="#1-Create-Computional-Graph-Forward" class="headerlink" title="1.Create Computional Graph(Forward)"></a>1.Create Computional Graph(Forward)</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231100.png" alt="image-20230730200838805" style="zoom:50%;" /><h3 id="2-Local-Gradient-局部梯度"><a href="#2-Local-Gradient-局部梯度" class="headerlink" title="2.Local Gradient 局部梯度"></a>2.Local Gradient 局部梯度</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231044.png" alt="image-20230730200908028" style="zoom:50%;" /><h3 id="3-Given-gradient-from-succesive-node-连续节点"><a href="#3-Given-gradient-from-succesive-node-连续节点" class="headerlink" title="3.Given gradient from succesive node 连续节点"></a>3.Given gradient from succesive node 连续节点</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231823.png" alt="image-20230730201133808" style="zoom:50%;" /><h3 id="4-Use-chain-rule-to-compute-the-gradient"><a href="#4-Use-chain-rule-to-compute-the-gradient" class="headerlink" title="4. Use chain rule to compute the gradient"></a>4. Use chain rule to compute the gradient</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231828.png" alt="image-20230730201220910" style="zoom:50%;" /><h3 id="Examplle"><a href="#Examplle" class="headerlink" title="Examplle"></a>Examplle</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231941.png" alt="image-20230730201348872" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231897.png" alt="image-20230730201431096" style="zoom:50%;" /><h2 id="Computational-Graph-of-Linear-Model"><a href="#Computational-Graph-of-Linear-Model" class="headerlink" title="Computational Graph of Linear Model"></a>Computational Graph of Linear Model</h2><p>residual 残差项 r &#x3D; y_hat - y</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231395.png" alt="image-20230730202056353" style="zoom:50%;" /><p>有偏置时也要计算b的梯度</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231345.png" alt="image-20230730202305630" style="zoom:50%;" /><h2 id="Tensor-in-PyTorch"><a href="#Tensor-in-PyTorch" class="headerlink" title="Tensor in PyTorch"></a>Tensor in PyTorch</h2><ul><li>In PyTorch, <strong>Tensor</strong> is the important component in constructing dynamic computational graph.</li><li>It contains <strong>data</strong> and <strong>grad</strong>,which storage the value of node and gradient w.r.t(with respect to) loss respectively.</li></ul><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302231710.png" alt="image-20230730202548110" style="zoom:67%;" /><h2 id="Implementation-of-linear-model-with-PyTorch"><a href="#Implementation-of-linear-model-with-PyTorch" class="headerlink" title="Implementation of linear model with PyTorch"></a>Implementation of linear model with PyTorch</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>x_data = [<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>]<br>y_data = [<span class="hljs-number">2.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">6.0</span>]<br><br>w = torch.Tensor([<span class="hljs-number">1.0</span>])<br><span class="hljs-comment"># 需要计算梯度</span><br>w.requires_grad = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>If <strong>autograd mechanics</strong> are required,the element variable <strong>requires_grad</strong> of <strong>Tensor</strong> has to be set to True.</p><h3 id="Define-the-linear-model-and-loss-function"><a href="#Define-the-linear-model-and-loss-function" class="headerlink" title="Define the linear model and loss function"></a>Define the linear model and loss function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 此处乘法运算，x需要自动类型转换为tensor，然后进行tensor之间的运算</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x * w<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">x, y</span>):<br>    y_pred = forward(x)<br>    <span class="hljs-keyword">return</span> (y_pred - y) ** <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232555.png" alt="image-20230730202918889" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232426.png" alt="image-20230730203201806" style="zoom:67%;" /><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 4是作为参数传递给 forward() 函数的值,即x=4</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;predict (before training)&quot;</span>, <span class="hljs-number">4</span>, forward(d).item())<br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x_data, y_data):<br>        <span class="hljs-comment"># Forward, compute the loss</span><br>        l = loss(x, y)<br>        <span class="hljs-comment"># Backward,compute grad for Tensor whose requires_grad</span><br><span class="hljs-built_in">set</span> to <span class="hljs-literal">True</span><br>        l.backward()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\tgrad:&#x27;</span>, x, y, w.grad.item())<br>        <span class="hljs-comment"># The grad is utilized to update weight.</span><br>        <span class="hljs-comment">#grad也是张量，也需要取data。grad.data结果是张量的拷贝，但不会建立计算图</span><br>        <span class="hljs-comment"># grad.item()取的是grad的值，是标量</span><br>        w.data = w.data - <span class="hljs-number">0.01</span> * w.grad.data<br>        <span class="hljs-comment">#NOTICE:The grad computed by .backward()will be xaccumulated.So after pdate,remember set the grad to ZERO!!!</span><br>        w.grad.dataocr.zero_()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;progress:&quot;</span>, epoch, l.item())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;predict(after training)&quot;</span>, <span class="hljs-number">4</span>, forward(<span class="hljs-number">4</span>).item())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tensor进行计算会构建计算图，计算图会占用内存</span><br> <span class="hljs-built_in">sum</span> += l <span class="hljs-comment"># 不对</span><br> <span class="hljs-built_in">sum</span> += l.item() <span class="hljs-comment"># 损失是张量，应该取数值  </span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232880.png" alt="image-20230730210510986" style="zoom:50%;" /><h2 id="Forward-in-PyTorch"><a href="#Forward-in-PyTorch" class="headerlink" title="Forward in PyTorch"></a>Forward in PyTorch</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232777.png" alt="image-20230730210639060" style="zoom:50%;" /><h2 id="Backward-in-PyTorch"><a href="#Backward-in-PyTorch" class="headerlink" title="Backward in PyTorch"></a>Backward in PyTorch</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232016.png" alt="image-20230730210723319" style="zoom:50%;" /><h2 id="Update-weight-in-PyTorch"><a href="#Update-weight-in-PyTorch" class="headerlink" title="Update weight in PyTorch"></a>Update weight in PyTorch</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232235.png" alt="image-20230730210748563" style="zoom:50%;" /><h1 id="5-Linear-Regression-with-PyTorch"><a href="#5-Linear-Regression-with-PyTorch" class="headerlink" title="5 Linear Regression with PyTorch"></a>5 Linear Regression with PyTorch</h1><h2 id="PyTorch-Fashion"><a href="#PyTorch-Fashion" class="headerlink" title="PyTorch Fashion"></a>PyTorch Fashion</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232647.png" alt="image-20230730214020125" style="zoom:50%;" /><h2 id="Prepare-dataset"><a href="#Prepare-dataset" class="headerlink" title="Prepare dataset"></a>Prepare dataset</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232826.png" alt="image-20230730214757663" style="zoom:50%;" /><h3 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h3><p>矩阵加法时扩充矩阵</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232378.png" alt="image-20230730214337060" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232310.png" alt="image-20230730214506696" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232937.png" alt="image-20230730214708765" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232957.png" alt="image-20230730214729480" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232928.png" alt="image-20230730215522431" style="zoom:67%;" /><h2 id="Design-model"><a href="#Design-model" class="headerlink" title="Design model"></a>Design model</h2><p>构造计算图</p><p>Affine model 仿射模型&#x2F;线性单元</p><p>需要知道x的维度和y的维度，来确定w和b的维度</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232017.png" alt="image-20230730215325358" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Our model class should be inherit from nn.Module,which is Base class for all neural network modules.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinearModel</span>(torch.nn.Module):<br>    <span class="hljs-comment"># Member methods __init__() and forward() have to be implemented</span><br>    <span class="hljs-comment"># 构造函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 父类构造函数</span><br>        supper(LinearModel, self).__init__()<br>        self.linear = torch.nn.Linear(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># Class nn.Linear has implemented the magic method call (which enable the instance of the class can be called just like a function.Normally the forwardo will be called. Pythonic!!!</span><br>        y_pred = self.linear(x)<br>        <span class="hljs-keyword">return</span> y_pred<br><span class="hljs-comment"># Create a instance of class LinearModel</span><br>model = LinearModel()<br></code></pre></td></tr></table></figure><h3 id="torch-nn-Linear-1-1"><a href="#torch-nn-Linear-1-1" class="headerlink" title="torch.nn.Linear(1, 1)"></a>torch.nn.Linear(1, 1)</h3><p>构造对象，括号内是权重和偏置</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232272.png" alt="image-20230730220532687" style="zoom:50%;" /><p>行表示样本数，列表示每一个样本的维度</p><ul><li>二维张量可以表示为 [[1, 2, 3], [4, 5, 6]]，其中有两个维度，每个维度包含三个元素。所以该张量的维度是 (2, 3)。</li><li>样本的维度可以等于样本向量的元素个数。</li></ul><p>in_features指输入的维度</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302232889.png" alt="image-20230730221032174" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307302233496.png" alt="image-20230730221127138" style="zoom:50%;" /><h3 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foobar</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># *args指数量未知的常量</span><br>    <span class="hljs-comment"># **kwargs指数量未知的变量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a, b, c, x, y</span>):<br><span class="hljs-comment">#可以写成</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*args, **kwargs</span>):<br>    <span class="hljs-built_in">print</span>(args) <span class="hljs-comment"># 元组 (1, 2, 4, 3)</span><br>    <span class="hljs-built_in">print</span>(kwargs) <span class="hljs-comment"># 词典 &#123;&#x27;x&#x27;:3, &#x27;y&#x27;:5&#125;</span><br><br>func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, x=<span class="hljs-number">3</span>, y=<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 举例</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-built_in">str</span>(args[<span class="hljs-number">0</span>]))<br>     <br>foobar = Foobar()<br>foobar(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment"># 打印出 Hello1</span><br><span class="hljs-comment"># __call()函数内实现了forward()</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        forward(self,)<br></code></pre></td></tr></table></figure><h2 id="Construct-Loss-and-Optimizer"><a href="#Construct-Loss-and-Optimizer" class="headerlink" title="Construct Loss and Optimizer"></a>Construct Loss and Optimizer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># MSELoss 继承自nn.Module</span><br><span class="hljs-comment"># 参数是y_hat和 y</span><br>criterion = torch.nn.MSELoss(size_average=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 不继承自nn.Module，不会构建计算图</span><br><span class="hljs-comment"># model内部的Linear类有权重，父类的成员函数parameters()检查内部成员的所有权重。</span><br>optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.01</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311251197.png" alt="image-20230731095925453" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311251544.png" alt="image-20230731100535397" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311251933.png" alt="image-20230731100547121" style="zoom:50%;" /><h2 id="Training-Cycle"><a href="#Training-Cycle" class="headerlink" title="Training Cycle"></a>Training Cycle</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-comment"># Foward:Predict</span><br>    y_pred = model(x_data)<br>    <span class="hljs-comment"># Forward:Loss</span><br>    loss = criterion(y_pred, y_data)<br>    <span class="hljs-comment"># print会自动调用loss的__str__()，不会产生计算图</span><br>    <span class="hljs-built_in">print</span>(epoch, loss)<br>    <span class="hljs-comment"># NOTICE: The grad computed by backward(will be accumulated.So before backward,remember set the grad to ZERO!!!</span><br>    optimizer.zero_grad()<br>    <span class="hljs-comment"># Backward:Autograd</span><br>    loss.backward()<br>    <span class="hljs-comment"># Update</span><br>    optimizer.step()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311251309.png" alt="image-20230731101009568" style="zoom:50%;" /><h2 id="Test-Model"><a href="#Test-Model" class="headerlink" title="Test Model"></a>Test Model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Output weight and bias</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w=&#x27;</span>, model.linear.weight.item())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b=&#x27;</span>, model.linear.bias.item())<br><span class="hljs-comment"># Test Model</span><br>x_test = torch.dTensor([[<span class="hljs-number">4.0</span>]])<br>y_test = model(x_test)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;y_pred=&#x27;</span>, y_test.data)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311251970.png" alt="image-20230731101308097" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311251320.png" alt="image-20230731101337662" style="zoom:50%;" /><h2 id="Linear-Regression-1"><a href="#Linear-Regression-1" class="headerlink" title="Linear Regression"></a>Linear Regression</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311251541.png" alt="image-20230731101559182" style="zoom:50%;" /><h1 id="6-Logistic-Regression"><a href="#6-Logistic-Regression" class="headerlink" title="6 Logistic Regression"></a>6 Logistic Regression</h1><h2 id="Classification-The-MNIST-Dataset"><a href="#Classification-The-MNIST-Dataset" class="headerlink" title="Classification - The MNIST Dataset"></a>Classification - The MNIST Dataset</h2><p>分裂问题，计算每个类别的概率，找出最大值</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311251547.png" alt="image-20230731105257387" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 工具包</span><br><span class="hljs-keyword">import</span> torchvision<br>train_set = torchvision.dataset.MNIST(root=<span class="hljs-string">&#x27;../dataset/mnist&#x27;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>)<br>test_set = torchvision.dataset.MNIST(root=<span class="hljs-string">&#x27;../dataset/mnist&#x27;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="Classification-The-CIFAR-10-dataset"><a href="#Classification-The-CIFAR-10-dataset" class="headerlink" title="Classification - The CIFAR-10 dataset"></a>Classification - The CIFAR-10 dataset</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252137.png" alt="image-20230731110043063" style="zoom:50%;" /><h2 id="Regression-vs-Classfication"><a href="#Regression-vs-Classfication" class="headerlink" title="Regression vs Classfication"></a>Regression vs Classfication</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252375.png" alt="image-20230731112122200" style="zoom:50%;" /><h2 id="How-to-map-R-gt-0-1"><a href="#How-to-map-R-gt-0-1" class="headerlink" title="How to map: R -&gt;[0,1 ]"></a>How to map: R -&gt;[0,1 ]</h2><p>将实数值映射到[0, 1]</p><h3 id="Logistic-Function"><a href="#Logistic-Function" class="headerlink" title="Logistic Function"></a>Logistic Function</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252364.png" alt="image-20230731112346368" style="zoom:50%;" /><p>饱和函数：超过某个范围，导数的越来越小</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252362.png" alt="image-20230731112611568" style="zoom:50%;" /><h2 id="Sigmoid-functions"><a href="#Sigmoid-functions" class="headerlink" title="Sigmoid functions"></a>Sigmoid functions</h2><p>都有极限，单调递增，满足饱和函数</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252294.png" alt="image-20230731112757873" style="zoom:50%;" /><h2 id="Logistic-Regression-Model"><a href="#Logistic-Regression-Model" class="headerlink" title="Logistic Regression Model"></a>Logistic Regression Model</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252000.png" alt="image-20230731113023172" style="zoom:50%;" /><h2 id="Loss-function-for-Binary-Classification"><a href="#Loss-function-for-Binary-Classification" class="headerlink" title="Loss function for Binary Classification"></a>Loss function for Binary Classification</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252476.png" alt="image-20230731113842382" style="zoom:50%;" /><h3 id="cross-entropy-交叉熵"><a href="#cross-entropy-交叉熵" class="headerlink" title="cross-entropy 交叉熵"></a>cross-entropy 交叉熵</h3><p>表示两个分布的差异大小</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252087.png" alt="image-20230731113523984" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252118.png" alt="image-20230731113630554" style="zoom:50%;" /><h3 id="BCE-Loss-二分类交叉熵损失函数"><a href="#BCE-Loss-二分类交叉熵损失函数" class="headerlink" title="BCE Loss  二分类交叉熵损失函数"></a>BCE Loss  二分类交叉熵损失函数</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252095.png" alt="image-20230731113819447" style="zoom:50%;" /><h2 id="Mini-Batch-Loss-function-for-Binary-Classification"><a href="#Mini-Batch-Loss-function-for-Binary-Classification" class="headerlink" title="Mini-Batch Loss function for Binary Classification"></a>Mini-Batch Loss function for Binary Classification</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252034.png" alt="image-20230731114150846" style="zoom:50%;" /><h2 id="Implementation-of-Logistic-Regression"><a href="#Implementation-of-Logistic-Regression" class="headerlink" title="Implementation of Logistic Regression"></a>Implementation of Logistic Regression</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogisticRegression</span>(torch.nn.Module):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(LogisticRegressionModel, self).__init__()<br>        self.linear = torch.nn.Linear(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 在线性单元基础上加一个sigmoid函数</span><br>        y_pred = F,sigmoid(self.linear(x))<br>        <span class="hljs-keyword">return</span> y_pred<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311252571.png" alt="image-20230731114523877" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># MSE换成BCE</span><br>criterion = torch.nn.BCELoss(size_average=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311253412.png" alt="image-20230731114703208" style="zoom:50%;" /><h3 id="总过程"><a href="#总过程" class="headerlink" title="总过程"></a>总过程</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311253460.png" alt="image-20230731114848085" style="zoom:50%;" /><h2 id="Result-of-Logistic-Regression"><a href="#Result-of-Logistic-Regression" class="headerlink" title="Result of Logistic Regression"></a>Result of Logistic Regression</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment"># 在 0 到 10 的范围内生成一个包含 200 个等间距数值的一维数组</span><br>x = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">200</span>)<br><span class="hljs-comment"># 使用 view 方法对该张量进行形状变换</span><br><span class="hljs-comment"># (200, 1) 指定了新的形状为一个二维张量，第一维大小为 200，第二维大小为 1。200行1列</span><br>x_t = torch.Tensor(x).view((<span class="hljs-number">200</span>, <span class="hljs-number">1</span>))<br>y_t = model(x_t)<br>y = y_t.data.numpy()<br>plt.plot(x, y)<br><span class="hljs-comment"># c=&#x27;r&#x27; 参数指定线条的颜色为红色（red）</span><br>plt.plot([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>], c=<span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Hours&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Probability of Pass&#x27;</span>)<br><span class="hljs-comment"># plt.grid() 用于在当前图形上添加网格线</span><br>plt.grid()<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Practice/202307311253951.png" alt="image-20230731115936459" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch深度学习快速入门教程</title>
      <link href="/2024/02/20/PyTorch/notebook/PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/02/20/PyTorch/notebook/PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-PyTorch-环境配置"><a href="#1-PyTorch-环境配置" class="headerlink" title="1 PyTorch 环境配置"></a>1 PyTorch 环境配置</h1><h2 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda 安装</h2><h2 id="显卡配置-驱动-CUDA-Toolkit"><a href="#显卡配置-驱动-CUDA-Toolkit" class="headerlink" title="显卡配置(驱动+CUDA Toolkit)"></a>显卡配置(驱动+CUDA Toolkit)</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201237544.png" alt="image-20230718205108412" style="zoom: 33%;" /><h2 id="有序地管理环境"><a href="#有序地管理环境" class="headerlink" title="有序地管理环境"></a>有序地管理环境</h2><p>初始环境：base</p><p>切换环境使用不同的pytorch版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//输入命令，安装python</span><br>conda create -n pytorch python=<span class="hljs-number">3.7</span><br>    <span class="hljs-comment">//输入命令，激活环境</span><br>    conda activate pytorch<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238878.png" alt="image-20230718210634806" style="zoom:67%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//查看工具包</span><br>pip <span class="hljs-built_in">list</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238876.png" alt="image-20230718210727247" style="zoom: 67%;" /><h2 id="Pytorch安装"><a href="#Pytorch安装" class="headerlink" title="Pytorch安装"></a>Pytorch安装</h2><p>官网：<a href="https://pytorch.org/">https://pytorch.org/</a> </p><p>任务管理器查看是否有英伟达显卡</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238020.png" alt="image-20230718212126175" style="zoom: 33%;" /><p>CUDA推荐使用9.2</p><p>查看驱动版本</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238219.png" alt="image-20230718212421748" style="zoom: 50%;" /><p>大于396.26可使用</p><p>pytorch环境下输入命令，安装9.2版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda install pytorch torchvision cudatoolkit=9.2 -c pytorch -c defaults<br>c numba/label/dev<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238093.png" alt="image-20230718213642078"></p><p>报错，因为下载速度太慢</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238193.png" alt="image-20230718215019872"></p><p>清华源可以下载cpu版本：<a href="https://blog.csdn.net/zzq060143/article/details/88042075">https://blog.csdn.net/zzq060143/article/details/88042075</a></p><p>如果找不到源，需要把命令中的 https 改成 http</p><p>下载gpu版本教程：<a href="https://www.bilibili.com/read/cv15186754">https://www.bilibili.com/read/cv15186754</a></p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238461.png" alt="image-20230718233907433" style="zoom:67%;" /><p>返回时False，因为装的是cpu版本，gpu版本才返回true。cpu版本学习阶段可以使用。</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238202.png" alt="image-20230719121436991"></p><h1 id="2-Python编辑器的选择"><a href="#2-Python编辑器的选择" class="headerlink" title="2 Python编辑器的选择"></a>2 Python编辑器的选择</h1><h2 id="Pytorch安装-1"><a href="#Pytorch安装-1" class="headerlink" title="Pytorch安装"></a>Pytorch安装</h2><p>官网：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p><p>下载Community版本</p><h2 id="Pytorch-配置"><a href="#Pytorch-配置" class="headerlink" title="Pytorch 配置"></a>Pytorch 配置</h2><p>create new project</p><p>需要自己配置解释器</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238045.png" alt="image-20230719100104852" style="zoom:50%;" /><p>添加python.exe</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238038.png" alt="image-20230719103201967" style="zoom:50%;" /><p>Conda Environment可能找不到python.exe，选择System Environment添加</p><p><a href="https://blog.csdn.net/weixin_43537097/article/details/130931535">https://blog.csdn.net/weixin_43537097/article/details/130931535</a></p><p>打开Python Consle</p><p>import torch</p><p>输入torch.cuda.is_available()，CPU版本返回false</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239602.png" alt="image-20230719103754349" style="zoom: 50%;" /><p>右侧工具栏可实时查看变量</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239825.png" alt="image-20230719104030691" style="zoom:50%;" /><h2 id="Jupyter-安装"><a href="#Jupyter-安装" class="headerlink" title="Jupyter 安装"></a>Jupyter 安装</h2><p>在Pytorch环境中安装Jupyter</p><p>在pytorch环境中安装一个包</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239084.png" alt="image-20230719131043395" style="zoom:67%;" /><p>运行Jupyter</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239811.png" alt="image-20230719131433335" style="zoom: 50%;" /><p>创建代码</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239442.png" alt="image-20230719131509833" style="zoom:50%;" /><p>shift + enter运行代码块</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239418.png" alt="image-20230719131558361" style="zoom:50%;" /><h1 id="3-Pytorch学习中的两大法宝函数"><a href="#3-Pytorch学习中的两大法宝函数" class="headerlink" title="3 Pytorch学习中的两大法宝函数"></a>3 Pytorch学习中的两大法宝函数</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254546.png" alt="image-20230719140047441" style="zoom:50%;" />   <p><strong>总结：</strong><br>    dir()函数，能让我们知道工具箱以及工具箱中的分隔区有什么东西。<br>    help()函数，能让我们知道每个工具是如何使用的，工具的使用方法。</p><h2 id="打开Pycharm，测试这两个工具函数"><a href="#打开Pycharm，测试这两个工具函数" class="headerlink" title="打开Pycharm，测试这两个工具函数"></a>打开Pycharm，测试这两个工具函数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dir</span>(torch.cuda.is_available)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254923.png" alt="image-20230719141153933" style="zoom:50%;" /><p>前后有双下划线，表明变量不能修改，说明是函数，不是分割区</p><p>dir和help里面函数后面的括号记得去掉</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">help</span>(torch.cuda.is_available)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254498.png" alt="image-20230719141419656" style="zoom:67%;" /><h1 id="4-Pycahrm及Jupyter使用对比"><a href="#4-Pycahrm及Jupyter使用对比" class="headerlink" title="4 Pycahrm及Jupyter使用对比"></a>4 Pycahrm及Jupyter使用对比</h1><h2 id="在Pycharm中新建项目"><a href="#在Pycharm中新建项目" class="headerlink" title="在Pycharm中新建项目"></a>在Pycharm中新建项目</h2><h3 id="在File-Setting中可查看该项目是否有Pytorch环境"><a href="#在File-Setting中可查看该项目是否有Pytorch环境" class="headerlink" title="在File-Setting中可查看该项目是否有Pytorch环境"></a>在File-Setting中可查看该项目是否有Pytorch环境</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254410.png" alt="image-20230719141734242" style="zoom:50%;" /><h3 id="新建Python文件"><a href="#新建Python文件" class="headerlink" title="新建Python文件"></a>新建Python文件</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254822.png" alt="image-20230719141855063" style="zoom:50%;" /><h3 id="为Python文件设置Python解释器"><a href="#为Python文件设置Python解释器" class="headerlink" title="为Python文件设置Python解释器"></a>为Python文件设置Python解释器</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255941.png" alt="image-20230719142138096" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255929.png" alt="image-20230719142305822" style="zoom:50%;" /><p>运行成功</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255878.png" alt="image-20230719142342738" style="zoom:50%;" /><p>也可以直接在Python控制台输入语句，直接输出结果</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255536.png" alt="image-20230719142538947" style="zoom:50%;" /><h2 id="Jupyter新建项目及使用"><a href="#Jupyter新建项目及使用" class="headerlink" title="Jupyter新建项目及使用"></a>Jupyter新建项目及使用</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255848.png" alt="image-20230719142709123" style="zoom:50%;" /><h2 id="三种代码编辑方式对比"><a href="#三种代码编辑方式对比" class="headerlink" title="三种代码编辑方式对比"></a>三种代码编辑方式对比</h2><p>用三种方式运行同一段错误代码</p><h3 id="Python文件"><a href="#Python文件" class="headerlink" title="Python文件"></a>Python文件</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255869.png" alt="image-20230719142919805" style="zoom: 50%;" /><p>报错，字符串和整型相加不允许</p><p>修改b后，运行成功</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255241.png" alt="image-20230719143050346" style="zoom:50%;" /><h3 id="Python控制台"><a href="#Python控制台" class="headerlink" title="Python控制台"></a>Python控制台</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255322.png" alt="image-20230719143236205" style="zoom:50%;" /><p>修改b后</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255432.png" alt="image-20230719143314888" style="zoom:67%;" /><p>如果发生错误，代码可读性下降</p><p>shift+enter可以以多行为一个块运行</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255933.png" alt="image-20230719143806537"></p><h3 id="Jupyter"><a href="#Jupyter" class="headerlink" title="Jupyter"></a>Jupyter</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255001.png" alt="image-20230719143423641" style="zoom:50%;" /><p>修改b后</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255789.png" alt="image-20230719143509947" style="zoom:67%;" /><h3 id="·总结"><a href="#·总结" class="headerlink" title="·总结"></a>·总结</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255357.png" alt="image-20230719144020108" style="zoom:50%;" /><h1 id="5-Pytorch加载数据初认识"><a href="#5-Pytorch加载数据初认识" class="headerlink" title="5 Pytorch加载数据初认识"></a>5 Pytorch加载数据初认识</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255707.png" alt="image-20230719145042656" style="zoom:50%;" /><h2 id="下载蚂蚁-x2F-蜜蜂数据集"><a href="#下载蚂蚁-x2F-蜜蜂数据集" class="headerlink" title="下载蚂蚁&#x2F;蜜蜂数据集"></a>下载蚂蚁&#x2F;蜜蜂数据集</h2><h2 id="创建read-data-py文件"><a href="#创建read-data-py文件" class="headerlink" title="创建read_data.py文件"></a>创建read_data.py文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br></code></pre></td></tr></table></figure><p>Jupyter中可查看Dateset内的函数</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256186.png" alt="image-20230719150017028" style="zoom:50%;" /><h1 id="6-Dataset类代码实战"><a href="#6-Dataset类代码实战" class="headerlink" title="6 Dataset类代码实战"></a>6 Dataset类代码实战</h1><p>第一次打开终端报错解决：<a href="https://blog.csdn.net/qq_33405617/article/details/119894883">https://blog.csdn.net/qq_33405617/article/details/119894883</a></p><h2 id="导入Image"><a href="#导入Image" class="headerlink" title="导入Image"></a>导入Image</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br></code></pre></td></tr></table></figure><p>将 “蚂蚁&#x2F;蜜蜂” 数据集复制到项目中</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256929.png" alt="image-20230719153011629" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256692.png" alt="image-20230719153152359" style="zoom:67%;" /><h2 id="Python控制台中读取数据"><a href="#Python控制台中读取数据" class="headerlink" title="Python控制台中读取数据"></a>Python控制台中读取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br></code></pre></td></tr></table></figure><p>复制图片绝对路径，\改成\表示转义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">img_path = <span class="hljs-string">&quot;D:\\PytorchLearning\\dataset\\train\\ants\\0013035.jpg&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256227.png" alt="image-20230719153920417"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取图片</span><br>img = Image.<span class="hljs-built_in">open</span>(img_path)<br></code></pre></td></tr></table></figure><p><img src="C:/Users/ge'yu/AppData/Roaming/Typora/typora-user-images/image-20230719154131158.png" alt="image-20230719154131158"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">img.size<br><span class="hljs-comment"># Out[5]: (768, 512)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看图片</span><br>img.show()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256350.png" alt="image-20230719154934779" style="zoom:50%;" /><h2 id="获取图片名称及路径"><a href="#获取图片名称及路径" class="headerlink" title="获取图片名称及路径"></a>获取图片名称及路径</h2><h3 id="控制台方式"><a href="#控制台方式" class="headerlink" title="控制台方式"></a>控制台方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ants文件夹相对路径</span><br>dir_path = <span class="hljs-string">&quot;dataset/train/ants&quot;</span><br><span class="hljs-comment"># 导入os</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 将ants文件夹下的图片生成列表</span><br>img_path_list = os.listdir(dir_path)<br><span class="hljs-comment"># 获取第一张图片</span><br>img_path_list[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># Out[10]: &#x27;0013035.jpg&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="python文件方式"><a href="#python文件方式" class="headerlink" title="python文件方式"></a>python文件方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python文件中.</span><br><span class="hljs-comment"># 每张图片的label就是所在的文件夹的名称</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, label_dir</span>):<br><span class="hljs-comment"># 控制台</span><br><span class="hljs-keyword">import</span> os<br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>label_dir = <span class="hljs-string">&quot;ants&quot;</span><br><span class="hljs-comment"># 拼接路径</span><br>path = os.path.join(root_dir, label_dir)<br><br><span class="hljs-comment"># pyhton文件修改init函数</span><br><span class="hljs-comment"># 函数之间的参数不能相互使用，但是self制定了一个类中的全局变量，相当于c++的static</span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, label_dir</span>):<br>        self.root_dir = root_dir<br>        self.label_dir = label_dir<br>        self.path = os.path.join(self.root_dir, self.label_dir)<br>        <span class="hljs-comment"># 所有图片名称列表</span><br>        self.img_path = os.listdir(self.path)<br>        <br> <span class="hljs-comment"># 控制台中</span><br>img_path = os.listdir(path)<br><br><span class="hljs-comment"># 获取每一个图片</span><br><span class="hljs-comment"># 修改 —__getitem__函数</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-comment"># 图片名</span><br>        img_name = self.img_path[idx]<br>        <span class="hljs-comment"># 每个图片的相对路径</span><br>        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)<br>        <span class="hljs-comment"># 根据图片路径读取图片</span><br>         img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        <span class="hljs-comment"># 图片的标签</span><br>         label = self.label_dir<br>         <span class="hljs-keyword">return</span> img, label<br><br> <span class="hljs-comment"># 控制台检验</span><br>idx = <span class="hljs-number">0</span><br><span class="hljs-comment"># 注意这里是中括号</span><br>img_name = img_path[idx]<br>img_item_path = os.path.join(root_dir, label_dir, img_name)<br> img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br></code></pre></td></tr></table></figure><h3 id="数据集长度"><a href="#数据集长度" class="headerlink" title="数据集长度"></a>数据集长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img.path)<br></code></pre></td></tr></table></figure><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建实例</span><br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>ants_label_dir = <span class="hljs-string">&quot;ants&quot;</span><br>ants_dataset = MyData(root_dir, ants_label_dir)<br></code></pre></td></tr></table></figure><h3 id="控制台运行"><a href="#控制台运行" class="headerlink" title="控制台运行"></a>控制台运行</h3><p>对象中包含init中的所有变量</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256144.png" alt="image-20230719162922969" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ants_dataset[<span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Out[5]: (&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=768x512&gt;, &#x27;ants&#x27;)</span><br><span class="hljs-string">这段代码表示访问了一个名为&quot;ants_dataset&quot;的数据集中的第一个数据项。该数据项包含一张图片和一个标签。</span><br><span class="hljs-string">图片格式为JPEG，具体尺寸为768x512像素，采用RGB颜色模式。标签为&quot;ants&quot;，表示这张图片中的内容是蚂蚁（ants）。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 分别获取图片和标签</span><br>img, label = ants_dataset[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h3 id="同时有蚂蚁和蜜蜂数据集"><a href="#同时有蚂蚁和蜜蜂数据集" class="headerlink" title="同时有蚂蚁和蜜蜂数据集"></a>同时有蚂蚁和蜜蜂数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建实例</span><br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>ants_label_dir = <span class="hljs-string">&quot;ants&quot;</span><br>bees_label_dir = <span class="hljs-string">&quot;bees&quot;</span><br>ants_dataset = MyData(root_dir, ants_label_dir)<br>bees_dataset = MyData(root_dir, bees_label_dir)<br></code></pre></td></tr></table></figure><h3 id="两个数据集集合"><a href="#两个数据集集合" class="headerlink" title="两个数据集集合"></a>两个数据集集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_dataset = ants_dataset + bees_dataset<br></code></pre></td></tr></table></figure><h2 id="txt标签方式"><a href="#txt标签方式" class="headerlink" title="txt标签方式"></a>txt标签方式</h2><p>修改数据集文件名，添加标签文件夹</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256435.png" alt="image-20230719165632515" style="zoom:67%;" /><h2 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h2><p>标签txt的名称与图片名称一致，txt内容为标签值</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256609.png" alt="image-20230719165752353" style="zoom:50%;" /><h1 id="7-Tensorboard的使用-一"><a href="#7-Tensorboard的使用-一" class="headerlink" title="7 Tensorboard的使用(一)"></a>7 Tensorboard的使用(一)</h1><h2 id="打开Pycharm，设置环境"><a href="#打开Pycharm，设置环境" class="headerlink" title="打开Pycharm，设置环境"></a>打开Pycharm，设置环境</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从torch.utils.tensorboard模块中导入SummaryWriter类</span><br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-comment"># 将事件和文件存储到&quot;logs&quot;文件夹下</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><br><span class="hljs-comment"># writer.add_image()</span><br><span class="hljs-comment"># y = x</span><br><span class="hljs-comment"># i 范围是0到99</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y = x&quot;</span>, i, i)<br><br>write.close()<br></code></pre></td></tr></table></figure><h2 id="add-scalar-方法"><a href="#add-scalar-方法" class="headerlink" title="add_scalar()方法"></a>add_scalar()方法</h2><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726884.png" alt="image-20230720095510726"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_scalar</span>(<span class="hljs-params"></span><br><span class="hljs-params">       self,</span><br><span class="hljs-params">       tag,</span><br><span class="hljs-params">       scalar_value,</span><br><span class="hljs-params">       global_step=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">       walltime=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">       new_style=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">       double_precision=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">   </span>):<br>       <span class="hljs-string">&quot;&quot;&quot;Add scalar data to summary.</span><br><span class="hljs-string">       Args:</span><br><span class="hljs-string">           tag (str): Data identifier</span><br><span class="hljs-string">           scalar_value (float or string/blobname): Value to save</span><br><span class="hljs-string">           global_step (int): Global step value to record</span><br><span class="hljs-string">       &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="安装TensorBoard"><a href="#安装TensorBoard" class="headerlink" title="安装TensorBoard"></a>安装TensorBoard</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726409.png" alt="image-20230720100426926" style="zoom:67%;" /><p>安装后再次运行，左侧多了一个logs文件</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726488.png" alt="image-20230720100707696"></p><p>终端输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">tensorboard --logdir=logs<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">TensorFlow installation not found - running with reduced feature set.</span><br><span class="hljs-string">Serving TensorBoard on localhost; to expose to the network, use a proxy or pass --bind_all</span><br><span class="hljs-string">TensorBoard 2.11.2 at http://localhost:6006/ (Press CTRL+C to quit)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>指定端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tensorboard --logdir=logs --port=<span class="hljs-number">6007</span><br></code></pre></td></tr></table></figure><p>访问端口，显示图像</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726825.png" alt="image-20230720101433132" style="zoom:50%;" /><p>绘制y&#x3D;2x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y = 2x&quot;</span>, <span class="hljs-number">2</span>*i, i)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726701.png" alt="image-20230720101628747" style="zoom:50%;" /><p>如果不改变add_scalar()函数的标题只改变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y = 2x&quot;</span>, <span class="hljs-number">3</span>*i, i)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726734.png" alt="image-20230720101754325" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726357.png" alt="image-20230720101845019"></p><p>向writer中写入新的事件，同时也记录了上一个事件</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>一、删除logs下的文件，重新启动程序</p><p>二、创建子文件夹，也就是说创建新的SummaryWriter(“新文件夹”)</p><h1 id="8-TensorBoard的使用（二）add-image-的使用-常用来观察训练结果"><a href="#8-TensorBoard的使用（二）add-image-的使用-常用来观察训练结果" class="headerlink" title="8 TensorBoard的使用（二）add image()的使用(常用来观察训练结果)"></a>8 TensorBoard的使用（二）add image()的使用(常用来观察训练结果)</h1><p>控制台输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">image_path = <span class="hljs-string">&quot;data/train/ants_image/0013035.jpg&quot;</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-comment"># 读取图片</span><br>img = Image.<span class="hljs-built_in">open</span>(image_path)<br><span class="hljs-comment"># 查看类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img))<br><span class="hljs-comment"># &lt;class PIL.JpegImagePlugin.JpegImageFile&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="利用numpy-array-，对PIL图片进行转换"><a href="#利用numpy-array-，对PIL图片进行转换" class="headerlink" title="利用numpy.array()，对PIL图片进行转换"></a>利用numpy.array()，对PIL图片进行转换</h2><p>NumPy型图片是指使用NumPy库表示和处理的图像。NumPy是一个广泛使用的Python库，用于科学计算和数据处理。它提供了一个多维数组对象（ndarray），可以用于存储和操作大量的数值数据。在图像处理领域中，NumPy数组通常用来表示图像的像素值。</p><p>NumPy数组可以是一维的（灰度图像）或二维的（彩色图像）。对于彩色图像，通常使用三维的NumPy数组表示，其中第一个维度表示图像的行数，第二个维度表示图像的列数，第三个维度表示图像的通道数（例如，红、绿、蓝通道）</p><h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>img_array = np.array(img)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="文件内"><a href="#文件内" class="headerlink" title="文件内"></a>文件内</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从torch.utils.tensorboard模块中导入SummaryWriter类</span><br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 将事件和文件存储到&quot;logs&quot;文件夹下</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>image_path = <span class="hljs-string">&quot;data/train/ants_image/0013035.jpg&quot;</span><br>img_PIL = Image.<span class="hljs-built_in">open</span>(image_path)<br>img_array = np.array(img_PIL)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-comment"># (H,W,C)——(高度，宽度，通道)</span><br><span class="hljs-built_in">print</span>(img_array.shape)<br><span class="hljs-comment"># 需要指定格式</span><br>writer.add_image(<span class="hljs-string">&quot;test&quot;</span>, img_array, <span class="hljs-number">1</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span> )<br></code></pre></td></tr></table></figure><p>从PIL到numpy, 需要在add image()中指定shape中每一个数字&#x2F;维表示的含义。</p><p>打开端口，显示图像</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726463.png" alt="image-20230720104855434" style="zoom:50%;" /><p>添加蜜蜂图片，修改步长为2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">image_path = <span class="hljs-string">&quot;data/train/bees_image/16838648_415acd9e3f.jpg&quot;</span><br>writer.add_image(<span class="hljs-string">&quot;test&quot;</span>, img_array, <span class="hljs-number">2</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span> )<br></code></pre></td></tr></table></figure><img src="C:/Users/ge'yu/AppData/Roaming/Typora/typora-user-images/image-20230720105220800.png" alt="image-20230720105220800" style="zoom:50%;" /><p>更换标题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">writer.add_image(<span class="hljs-string">&quot;train&quot;</span>, img_array, <span class="hljs-number">1</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span> )<br></code></pre></td></tr></table></figure><p>![image-20230720105351794](<a href="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning">https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning</a> note&#x2F;Day2202307201726332.png)</p><h1 id="9-Transforms-的使用（一）"><a href="#9-Transforms-的使用（一）" class="headerlink" title="9 Transforms 的使用（一）"></a>9 Transforms 的使用（一）</h1><h2 id="transforms结构及用法"><a href="#transforms结构及用法" class="headerlink" title="transforms结构及用法"></a>transforms结构及用法</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727532.png" alt="image-20230720112701203" style="zoom:50%;" /><p>ctrl+p可提示函数需要什么参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span>  torchvision <span class="hljs-keyword">import</span> transforms<br><br><span class="hljs-comment"># 通过transform.ToTensor去解决两个问题</span><br><span class="hljs-comment"># 1、transform该如何使用</span><br><span class="hljs-comment"># 2、为什么需要Tensor这种数据类型</span><br><br>img_path = <span class="hljs-string">&quot;train/ants_image/0013035.jpg&quot;</span><br>img = Image.<span class="hljs-built_in">open</span>(img_path)<br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-comment"># 输出：&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=768x512 at 0x1DCFAD7CFC8&gt;</span><br><span class="hljs-comment"># 创建Totensor对象</span><br>tensor_trans = transforms.ToTensor()<br>tensor_img = tensor_trans(img)<br><br><span class="hljs-built_in">print</span>(tensor_img)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出：</span><br><span class="hljs-string">tensor([[[0.3137, 0.3137, 0.3137,  ..., 0.3176, 0.3098, 0.2980],</span><br><span class="hljs-string">         [0.3176, 0.3176, 0.3176,  ..., 0.3176, 0.3098, 0.2980],</span><br><span class="hljs-string">         [0.3216, 0.3216, 0.3216,  ..., 0.3137, 0.3098, 0.3020],</span><br><span class="hljs-string">         ...,</span><br><span class="hljs-string">         [0.3412, 0.3412, 0.3373,  ..., 0.1725, 0.3725, 0.3529],</span><br><span class="hljs-string">         [0.3412, 0.3412, 0.3373,  ..., 0.3294, 0.3529, 0.3294],</span><br><span class="hljs-string">         [0.3412, 0.3412, 0.3373,  ..., 0.3098, 0.3059, 0.3294]],</span><br><span class="hljs-string"></span><br><span class="hljs-string">        [[0.5922, 0.5922, 0.5922,  ..., 0.5961, 0.5882, 0.5765],</span><br><span class="hljs-string">         [0.5961, 0.5961, 0.5961,  ..., 0.5961, 0.5882, 0.5765],</span><br><span class="hljs-string">         [0.6000, 0.6000, 0.6000,  ..., 0.5922, 0.5882, 0.5804],</span><br><span class="hljs-string">         ...,</span><br><span class="hljs-string">         [0.6275, 0.6275, 0.6235,  ..., 0.3608, 0.6196, 0.6157],</span><br><span class="hljs-string">         [0.6275, 0.6275, 0.6235,  ..., 0.5765, 0.6275, 0.5961],</span><br><span class="hljs-string">         [0.6275, 0.6275, 0.6235,  ..., 0.6275, 0.6235, 0.6314]],</span><br><span class="hljs-string"></span><br><span class="hljs-string">        [[0.9137, 0.9137, 0.9137,  ..., 0.9176, 0.9098, 0.8980],</span><br><span class="hljs-string">         [0.9176, 0.9176, 0.9176,  ..., 0.9176, 0.9098, 0.8980],</span><br><span class="hljs-string">         [0.9216, 0.9216, 0.9216,  ..., 0.9137, 0.9098, 0.9020],</span><br><span class="hljs-string">         ...,</span><br><span class="hljs-string">         [0.9294, 0.9294, 0.9255,  ..., 0.5529, 0.9216, 0.8941],</span><br><span class="hljs-string">         [0.9294, 0.9294, 0.9255,  ..., 0.8863, 1.0000, 0.9137],</span><br><span class="hljs-string">         [0.9294, 0.9294, 0.9255,  ..., 0.9490, 0.9804, 0.9137]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="10Transforms的使用（二）"><a href="#10Transforms的使用（二）" class="headerlink" title="10Transforms的使用（二）"></a>10Transforms的使用（二）</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727314.png" alt="image-20230720113024746" style="zoom:50%;" /><p>Tensor包括深度学习需要的参数</p><h2 id="下载Opencv"><a href="#下载Opencv" class="headerlink" title="下载Opencv"></a>下载Opencv</h2><p>终端输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install opencv-python<br></code></pre></td></tr></table></figure><p>控制台</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br>cv_img = cv2.imread(img_path)<br></code></pre></td></tr></table></figure><h2 id="利用Tensor-img显示图片"><a href="#利用Tensor-img显示图片" class="headerlink" title="利用Tensor_img显示图片"></a>利用Tensor_img显示图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span>  torchvision <span class="hljs-keyword">import</span> transforms<br><br>img_path = <span class="hljs-string">&quot;train/ants_image/0013035.jpg&quot;</span><br>img = Image.<span class="hljs-built_in">open</span>(img_path)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-comment"># 输出：&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=768x512 at 0x1DCFAD7CFC8&gt;</span><br><span class="hljs-comment"># 创建Totensor对象</span><br>tensor_trans = transforms.ToTensor()<br>tensor_img = tensor_trans(img)<br><br>writer.add_image(<span class="hljs-string">&quot;Tensor_img&quot;</span>, tensor_img)<br><br>writer.close()<br></code></pre></td></tr></table></figure><p>终端输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tensorboard --logdir=logs<br></code></pre></td></tr></table></figure><p>打开端口，显示图片</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727795.png" alt="image-20230720115601972" style="zoom:67%;" /><h1 id="11-常见的Transforms（一）"><a href="#11-常见的Transforms（一）" class="headerlink" title="11 常见的Transforms（一）"></a>11 常见的Transforms（一）</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727366.png" alt="image-20230720141126141" style="zoom:67%;" /><h2 id="Pytorch中call-的用法"><a href="#Pytorch中call-的用法" class="headerlink" title="Pytorch中call()的用法"></a>Pytorch中call()的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__call__&quot;</span> + <span class="hljs-string">&quot;hello&quot;</span> + name)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>+name)<br><br>person = Person()<br>person(<span class="hljs-string">&quot;zhangsan&quot;</span>)<br>person.hello(<span class="hljs-string">&quot;list&quot;</span>)<br><span class="hljs-comment"># __call__可以采用对象(参数)的方式调用，不用加.方法名</span><br></code></pre></td></tr></table></figure><h2 id="ToTensor的使用"><a href="#ToTensor的使用" class="headerlink" title="ToTensor的使用"></a>ToTensor的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;train/ants_image/0013035.jpg&quot;</span>)<br><span class="hljs-built_in">print</span>(img)<br><br>trans_totensor = transforms.ToTensor()<br>img_tensor = trans_totensor(img)<br>writer.add_image(<span class="hljs-string">&quot;Totensor&quot;</span>, img_tensor)<br>writer.close()<br></code></pre></td></tr></table></figure><h2 id="Normalize-归一化-的使用"><a href="#Normalize-归一化-的使用" class="headerlink" title="Normalize() 归一化 的使用"></a>Normalize() 归一化 的使用</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727404.png" alt="image-20230720143339908" style="zoom:67%;" /><p>mean是均值，std是标准差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 每个通道都有均值和标准差</span><br><span class="hljs-built_in">print</span>(img_tensor[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>trans_norm = transforms.Normalize([<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>])<br>img_norm = trans_norm(img_tensor)<br><span class="hljs-built_in">print</span>((img_norm[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出</span><br><span class="hljs-string">tensor(0.3137)</span><br><span class="hljs-string">tensor(-0.3725)</span><br><span class="hljs-string">0.3137*2-1=-0.3725(四舍五入后结果)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>输出归一化结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">writer.add_image(<span class="hljs-string">&quot;Normalize&quot;</span>, img_norm)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727313.png" alt="image-20230720143837709" style="zoom:67%;" /><h1 id="12-常见的Transforms（二）"><a href="#12-常见的Transforms（二）" class="headerlink" title="12 常见的Transforms（二）"></a>12 常见的Transforms（二）</h1><h2 id="Resize-的使用"><a href="#Resize-的使用" class="headerlink" title="Resize()的使用"></a>Resize()的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(img.size)<br><span class="hljs-comment"># Resize有两个括号(h,w)</span><br>trans_resize = transforms.Resize((<span class="hljs-number">480</span>, <span class="hljs-number">480</span>))<br>img_resize = trans_resize(img)<br><span class="hljs-built_in">print</span>(img_resize)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出</span><br><span class="hljs-string">(768, 512)</span><br><span class="hljs-string">&lt;PIL.Image.Image image mode=RGB size=480x480 at 0x1C6224EBE88&gt;&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>将PIL类型的img_resize转为tensor类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(img.size)<br><span class="hljs-comment"># Resize有两个括号(h,w)</span><br>trans_resize = transforms.Resize((<span class="hljs-number">480</span>, <span class="hljs-number">480</span>))<br><span class="hljs-comment"># img PIL -&gt; resize -&gt; img_resize PIL</span><br>img_resize = trans_resize(img)<br><span class="hljs-comment"># img_resieze PIL -&gt; totensor -&gt; img_resize tensor</span><br>img_resize = trans_totensor(img_resize)<br>writer.add_image(<span class="hljs-string">&quot;Resize&quot;</span>, img_resize, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(img_resize)<br></code></pre></td></tr></table></figure><p>图片大小改变</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727271.png" alt="image-20230720150314504" style="zoom:67%;" /><h2 id="Compose-的使用"><a href="#Compose-的使用" class="headerlink" title="Compose()的使用"></a>Compose()的使用</h2><p>将不同的操作组合起来，按顺序执行。前一步的输出是下一步的输入，要对应。</p><p>Compose()中的参数需要是一个列表。Python中，列表的表示形式为[数据1，数据2,…]。在Composel中，数据需要是transforms类型，所以得到，Compose([transforms参数1，transforms参数2,…])</p><h2 id="RandomCrop-随机裁剪的用法"><a href="#RandomCrop-随机裁剪的用法" class="headerlink" title="RandomCrop()随机裁剪的用法"></a>RandomCrop()随机裁剪的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">trans_random = transforms.RandomCrop(<span class="hljs-number">512</span>)<br>trans_compose_2 = transforms.Compose([trans_random, trans_totensor])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img_crop = trans_compose_2(img)<br>    writer.add_image(<span class="hljs-string">&quot;RandomCrop&quot;</span>, img_crop, i)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727464.png" alt="image-20230720152147175" style="zoom:67%;" /><h2 id="总结使用方法"><a href="#总结使用方法" class="headerlink" title="总结使用方法"></a>总结使用方法</h2><ul><li>关注输入和输出类型</li><li>多看官方文档</li><li>关注方法需要什么参数</li><li>不知道返回值的时候<ul><li>print()</li><li>print(type())</li><li>debug</li></ul></li></ul><h1 id="13-torchvision中的数据集使用"><a href="#13-torchvision中的数据集使用" class="headerlink" title="13 torchvision中的数据集使用"></a>13 torchvision中的数据集使用</h1><h2 id="下载训练集和测试集"><a href="#下载训练集和测试集" class="headerlink" title="下载训练集和测试集"></a>下载训练集和测试集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-comment"># root表示数据集路径;train为true表示训练集,false表示测试集;download为true会自动从官网下载</span><br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>)<br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, dowmload=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>可以用迅雷加快下载速度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(test_set[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># 表示有img 和 target两个属性</span><br><span class="hljs-comment"># 输出(&lt;PIL.Image.Image image mode=RGB size=32x32 at 0x22BF14AA548&gt;, 3)</span><br></code></pre></td></tr></table></figure><p>classes内表示每种target对应哪种类别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(test_set.classes)<br>img, target = test_set[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-built_in">print</span>(target)<br><span class="hljs-comment"># target对应的类型</span><br><span class="hljs-built_in">print</span>(test_set.classes[target])<br><span class="hljs-comment"># 显示图片</span><br>img.show()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出</span><br><span class="hljs-string">[&#x27;airplane&#x27;, &#x27;automobile&#x27;, &#x27;bird&#x27;, &#x27;cat&#x27;, &#x27;deer&#x27;, &#x27;dog&#x27;, &#x27;frog&#x27;, &#x27;horse&#x27;, &#x27;ship&#x27;, &#x27;truck&#x27;]</span><br><span class="hljs-string">&lt;PIL.Image.Image image mode=RGB size=32x32 at 0x2622292ABC8&gt;</span><br><span class="hljs-string">3</span><br><span class="hljs-string">cat</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="添加Transform参数"><a href="#添加Transform参数" class="headerlink" title="添加Transform参数"></a>添加Transform参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset_transform = torchvision.transforms.Compose([<br>    torchvision.transforms.ToTensor()<br><br>])<br><span class="hljs-comment"># root表示数据集路径;train为true表示训练集,false表示测试集;download为true会自动从官网下载</span><br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>)<br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(test_set[<span class="hljs-number">0</span>])<br>writer = SummaryWriter(<span class="hljs-string">&quot;p10&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img, target = test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test_set&quot;</span>, img, i)<br><br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727933.png" alt="image-20230720161746404" style="zoom:67%;" /><h1 id="14-DataLoader的使用"><a href="#14-DataLoader的使用" class="headerlink" title="14 DataLoader的使用"></a>14 DataLoader的使用</h1><h2 id="测试数据集中第一张图片及target"><a href="#测试数据集中第一张图片及target" class="headerlink" title="测试数据集中第一张图片及target"></a>测试数据集中第一张图片及target</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 准备的测试数据集</span><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">4</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 测试数据集中第一张图片及target</span><br>img, target = test_data[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(img.shape)<br><span class="hljs-built_in">print</span>(target)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([3, 32, 32])</span><br><span class="hljs-string">3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201728188.png" alt="image-20230720164801159" style="zoom:67%;" /><h2 id="理解batch-size"><a href="#理解batch-size" class="headerlink" title="理解batch_size"></a>理解batch_size</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>    imgs, targets = data<br>    <span class="hljs-built_in">print</span>(imgs,shape)<br>    <span class="hljs-built_in">print</span>(targets)<br> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> # 每次循环取4张图片，每张图片3个通道，32*32</span><br><span class="hljs-string"> torch.Size([4, 3, 32, 32])</span><br><span class="hljs-string"> # 每张图片的target</span><br><span class="hljs-string">tensor([0, 3, 0, 2])</span><br><span class="hljs-string"> &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="更改batch-size-x3D-64"><a href="#更改batch-size-x3D-64" class="headerlink" title="更改batch_size&#x3D;64"></a>更改batch_size&#x3D;64</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 每次取64张图片</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>    imgs, targets = data<br>    <span class="hljs-comment"># 注意是add_images</span><br>    writer.add_images(<span class="hljs-string">&quot;test_data&quot;</span>, imgs, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201728884.png" alt="image-20230720171254181" style="zoom:67%;" /><p>drop_last设置为false，所以不会丢掉数量小于batch_seze的组。</p><h2 id="理解shuffle"><a href="#理解shuffle" class="headerlink" title="理解shuffle"></a>理解shuffle</h2><p>添加epoch</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># shuffle设置为false</span><br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">False</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">False</span>)<br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br>    step = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>        imgs, targets = data<br>        writer.add_images(<span class="hljs-string">&quot;Epoch: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch), imgs, step)<br>        step = step + <span class="hljs-number">1</span><br><br>writer.close()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;Epoch: &#123;&#125;&quot;.format(epoch)是一种字符串格式化的方法，在Python中常用于将变量的值插入到字符串中的特定位置。</span><br><span class="hljs-string">在这个例子中，&#123;&#125;是一个占位符，用于表示待插入变量的位置。&quot;.format(epoch)&quot;表示通过.format()方法将变量epoch的值插入到占位符的位置。所生成的最终字符串将包含&quot;Epoch: &quot;和epoch的值。</span><br><span class="hljs-string">举个例子，如果epoch的值是10，那么该代码将生成字符串&quot;Epoch: 10&quot;。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>shuffle为false时两轮图片加载中随机选取结果相同</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201728587.png" alt="image-20230720172220235" style="zoom:50%;" />15 神经网络的基本骨架-nn.Module的使用</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212127626.png" alt="image-20230720204614822" style="zoom:67%;" /><h2 id="自定义神经网络"><a href="#自定义神经网络" class="headerlink" title="自定义神经网络"></a>自定义神经网络</h2><h3 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h3><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212127438.png" alt="image-20230720205054565"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-comment"># 继承nn.Module</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> output<br>    <br><span class="hljs-comment"># 创建神经网络</span><br>tudui = Tudui()<br><span class="hljs-comment"># 创建输入</span><br>x = torch.tensor(<span class="hljs-number">1.0</span>)<br><span class="hljs-comment"># 将x输入神经网络</span><br>output = tudui(x)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h1 id="16-卷积操作"><a href="#16-卷积操作" class="headerlink" title="16 卷积操作"></a>16 卷积操作</h1><p>卷积核移动，每个位置，卷积核的每一小块与输入图像重叠部分每一小块的相乘，所有乘积相加即为输出的一个小块</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128784.png" alt="image-20230720210532679" style="zoom:50%;" /><p>Stride为卷积核每次移动的步数</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128132.png" alt="image-20230720210651404" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128270.png" alt="image-20230720210746107" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128145.png" alt="image-20230720212346920" style="zoom:50%;" /><h2 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])<br><br>kernel = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><span class="hljs-built_in">print</span>(kernel.shape)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">一开始只有尺寸只有两个维度</span><br><span class="hljs-string">torch.Size([5, 5])</span><br><span class="hljs-string">torch.Size([3, 3])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="使用reshape"><a href="#使用reshape" class="headerlink" title="使用reshape()"></a>使用reshape()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># batch_size, channel, 5*5</span><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([1, 1, 5, 5])</span><br><span class="hljs-string">torch.Size([1, 1, 3, 3])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="实现卷积操作"><a href="#实现卷积操作" class="headerlink" title="实现卷积操作"></a>实现卷积操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])<br><br>kernel = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]])<br><span class="hljs-comment"># batch_size, channel, 5*5</span><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><span class="hljs-built_in">print</span>(kernel.shape)<br><br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([1, 1, 5, 5])</span><br><span class="hljs-string">torch.Size([1, 1, 3, 3])</span><br><span class="hljs-string">tensor([[[[10, 12, 12],</span><br><span class="hljs-string">          [18, 16, 16],</span><br><span class="hljs-string">          [13,  9,  3]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="改变stride-步幅"><a href="#改变stride-步幅" class="headerlink" title="改变stride 步幅"></a>改变stride 步幅</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br>output2 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor([[[[10, 12, 12],</span><br><span class="hljs-string">          [18, 16, 16],</span><br><span class="hljs-string">          [13,  9,  3]]]])</span><br><span class="hljs-string">tensor([[[[10, 12, 12],</span><br><span class="hljs-string">          [18, 16, 16],</span><br><span class="hljs-string">          [13,  9,  3]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Padding-填充"><a href="#Padding-填充" class="headerlink" title="Padding 填充"></a>Padding 填充</h2><p>图像周围填充0</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128205.png" alt="image-20230720212848323" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">output3 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output3)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor([[[[ 1,  3,  4, 10,  8],</span><br><span class="hljs-string">          [ 5, 10, 12, 12,  6],</span><br><span class="hljs-string">          [ 7, 18, 16, 16,  8],</span><br><span class="hljs-string">          [11, 13,  9,  3,  4],</span><br><span class="hljs-string">          [14, 13,  9,  7,  4]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="17-神经网络-卷积层"><a href="#17-神经网络-卷积层" class="headerlink" title="17 神经网络-卷积层"></a>17 神经网络-卷积层</h1><h2 id="In-channel输入通道和Out-channel输出通道"><a href="#In-channel输入通道和Out-channel输出通道" class="headerlink" title="In_channel输入通道和Out_channel输出通道"></a>In_channel输入通道和Out_channel输出通道</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128005.png" alt="image-20230720221004485" style="zoom:50%;" /><h3 id="out-channel为2时"><a href="#out-channel为2时" class="headerlink" title="out_channel为2时"></a>out_channel为2时</h3><p>卷积操作完成后输出的 out_channels，取决于卷积核的数量。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128788.png" alt="image-20230720221112952" style="zoom:50%;" /><h2 id="编写代码验证"><a href="#编写代码验证" class="headerlink" title="编写代码验证"></a>编写代码验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># super()函数通过传入当前类的名称（即Tudui）作为第一个参数，告诉Python去寻找并调用Tudui类的下一个父类的方法。</span><br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        <span class="hljs-comment"># 卷积层</span><br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># x放入卷积层</span><br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Tudui(</span><br><span class="hljs-string">  (conv1): Conv2d(3, 6, kernel_size=(3, 3), stride=(1, 1))</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看每一个数据</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = tudui(imgs)<br> <span class="hljs-built_in">print</span>(imgs.shape)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">batch_size为64.in_channel为3,out_channel为6</span><br><span class="hljs-string">torch.Size([64, 3, 32, 32])</span><br><span class="hljs-string">torch.Size([64, 6, 30, 30])</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>output为6个channel无法用writer显示，用reshape变为3个channel</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -1表示会自动计算</span><br>torch.reshape(output, (-<span class="hljs-number">1</span> , <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>))<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128048.png" alt="image-20230721105114448" style="zoom:50%;" /><h1 id="18-最大池的使用"><a href="#18-最大池的使用" class="headerlink" title="18 最大池的使用"></a>18 最大池的使用</h1><h2 id="ceil-mode和floor-mode"><a href="#ceil-mode和floor-mode" class="headerlink" title="ceil mode和floor mode"></a>ceil mode和floor mode</h2><p>ceil mode是向上取整，floor mode是向下取整</p><p>具体到池化操作，ceil mode指如果池化核覆盖范围内有空缺，还是保留空缺继续池化；floor mode就会将空缺舍弃，不对其进行池化。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128700.png" alt="image-20230721111639352" style="zoom:67%;" /><p>每次找出被池化核覆盖的范围内的最大值输出</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128281.png" alt="image-20230721111510866" style="zoom:50%;" /><p>步幅为kernel_size的大小，3</p><h2 id="Ceil-mode"><a href="#Ceil-mode" class="headerlink" title="Ceil mode"></a>Ceil mode</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128639.png" alt="image-20230721111944689" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129643.png" alt="image-20230721112032005" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129583.png" alt="image-20230721112059463" style="zoom:50%;" /><p>默认情况ceil mode为false，即不保留</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],   <span class="hljs-comment"># 设置为浮点数</span><br>                      [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]],dtype=torch.float32)<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.maxpool = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([1, 1, 5, 5])</span><br><span class="hljs-string">tensor([[[[2., 3.],</span><br><span class="hljs-string">          [5., 1.]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Ceil-mode为False"><a href="#Ceil-mode为False" class="headerlink" title="Ceil mode为False"></a>Ceil mode为False</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">        self.maxpool = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">False</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor([[[[2.]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="最大池化的作用"><a href="#最大池化的作用" class="headerlink" title="最大池化的作用"></a>最大池化的作用</h2><p>保留数据特征，减小数据量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.maxpool = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_maxpool&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129965.png" alt="image-20230721113804610" style="zoom:50%;" /><h1 id="19-非线性激活"><a href="#19-非线性激活" class="headerlink" title="19 非线性激活"></a>19 非线性激活</h1><h2 id="以ReLU为例"><a href="#以ReLU为例" class="headerlink" title="以ReLU为例"></a>以ReLU为例</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129815.png" alt="image-20230721114225891" style="zoom:50%;" /><h3 id="参数inPlace"><a href="#参数inPlace" class="headerlink" title="参数inPlace"></a>参数inPlace</h3><p>表示是否对原来变量进行变换，默认是False</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129845.png" alt="image-20230721114819121" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>],<br>                     [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]])<br><br><span class="hljs-comment"># input需要指定batch_size</span><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.relu = ReLU()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.relu(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([1, 1, 2, 2])</span><br><span class="hljs-string">tensor([[[[1., 0.],</span><br><span class="hljs-string">          [0., 3.]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129448.png" alt="image-20230721115922770" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU, Sigmoid<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>],<br>                     [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]])<br><br><span class="hljs-comment"># input需要指定batch_size</span><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.relu = ReLU()<br>        self.sigmoid1 = Sigmoid()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.sigmoid1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_relu&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129198.png" alt="image-20230721120003234" style="zoom:50%;" /><h1 id="20-线性层及其它层介绍"><a href="#20-线性层及其它层介绍" class="headerlink" title="20 线性层及其它层介绍"></a>20 线性层及其它层介绍</h1><h2 id="线性层"><a href="#线性层" class="headerlink" title="线性层"></a>线性层</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129928.png" alt="image-20230721142029222" style="zoom:50%;" /><p>5×5经过reshape变为1×25，再经过线性层变为1×3</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129920.png" alt="image-20230721142249064" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        <span class="hljs-comment"># 输入神经元个数，输出神经元个数</span><br>        self.linear1 = Linear(<span class="hljs-number">196608</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.linear1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    output = torch.reshape(imgs, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">print</span>(output.shape)<br>    output = tudui(output)<br>    <span class="hljs-built_in">print</span>(output.shape)<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> torch.Size([64, 3, 32, 32])</span><br><span class="hljs-string">torch.Size([1, 1, 1, 196608])</span><br><span class="hljs-string">torch.Size([1, 1, 1, 10])</span><br><span class="hljs-string"># 输入batch_size为64，输出batch_size为1，就是说想用1张图片概括64张图片的特征？</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Flatten-函数"><a href="#Flatten-函数" class="headerlink" title="Flatten()函数"></a>Flatten()函数</h3><p>可以把输入展成一行,变为一维向量</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129710.png" alt="image-20230721143627486"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">    output = torch.flatten(imgs)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([64, 3, 32, 32])</span><br><span class="hljs-string">torch.Size([196608])</span><br><span class="hljs-string">torch.Size([10])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="21-搭建小实战和Sequential的使用"><a href="#21-搭建小实战和Sequential的使用" class="headerlink" title="21 搭建小实战和Sequential的使用"></a>21 搭建小实战和Sequential的使用</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129225.png" alt="image-20230721160609054" style="zoom:67%;" /><p>卷积的padding和stride可以用公式计算</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129852.png" alt="image-20230721154938067" style="zoom:67%;" /><p>padding为2，stride为1</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129734.png" alt="image-20230721160010309" style="zoom:67%;" /><h2 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.conv1 = Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool1 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.conv2 = Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool2 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.conv3 = Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>)<br>        self.maxpool3 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.flatten = Flatten()<br>        <span class="hljs-comment"># 两个线性层</span><br>        self.linear1 = Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>)<br>        self.linear2 = Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        x = self.maxpool1(x)<br>        x = self.conv2(x)<br>        x = self.maxpool2(x)<br>        x = self.conv3(x)<br>        x = self.maxpool3(x)<br>        x = self.flatten(x)<br>        x = self.linear1(x)<br>        x = self.linear2(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Tudui(</span><br><span class="hljs-string">  (conv1): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><br><span class="hljs-string">  (maxpool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  (conv2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><br><span class="hljs-string">  (maxpool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  (conv3): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2))</span><br><span class="hljs-string">  (maxpool3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  (flatten): Flatten(start_dim=1, end_dim=-1)</span><br><span class="hljs-string">  (linear1): Linear(in_features=1024, out_features=64, bias=True)</span><br><span class="hljs-string">  (linear2): Linear(in_features=64, out_features=10, bias=True)</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="检查网络正确性"><a href="#检查网络正确性" class="headerlink" title="检查网络正确性"></a>检查网络正确性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 元素都是1</span><br><span class="hljs-built_in">input</span> = torch.ones(<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>)<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output.shape)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># 每张图片对应10,64张图片</span><br><span class="hljs-string">torch.Size([64, 10])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Sequential使用"><a href="#Sequential使用" class="headerlink" title="Sequential使用"></a>Sequential使用</h2><p>代码更简洁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h2 id="add-graph-显示训练过程"><a href="#add-graph-显示训练过程" class="headerlink" title="add_graph()显示训练过程"></a>add_graph()显示训练过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><br><span class="hljs-comment"># 元素都是1</span><br><span class="hljs-built_in">input</span> = torch.ones(<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>)<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output.shape)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs2&quot;</span>)<br>writer.add_graph(tudui, <span class="hljs-built_in">input</span>)<br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130816.png" alt="image-20230721162855578" style="zoom:67%;" /><p>双击查看细节</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130215.png" alt="image-20230721162914891" style="zoom:50%;" /><h1 id="22-损失函数与反向传播"><a href="#22-损失函数与反向传播" class="headerlink" title="22 损失函数与反向传播"></a>22 损失函数与反向传播</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130826.png" alt="image-20230721164558100" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130961.png" alt="image-20230721164717441" style="zoom:67%;" /><h2 id="L1loss-函数"><a href="#L1loss-函数" class="headerlink" title="L1loss 函数"></a>L1loss 函数</h2><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130158.png" alt="image-20230721164852676"></p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130420.png" alt="image-20230721164934328" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> float32<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss<br><br>inputs = torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], dtype=torch.float32)<br>targets = torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>], dtype=torch.float32)<br><br>inputs = torch.reshape(inputs, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>targets = torch.reshape(targets, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br><br>loss = L1Loss()<br>result = loss(inputs, targets)<br><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor(0.6667)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="改变reduction"><a href="#改变reduction" class="headerlink" title="改变reduction"></a>改变reduction</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 结果为差距总和</span><br>loss = L1Loss(reduction=<span class="hljs-string">&#x27;sum&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor(2.)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="MSELOSS-平方差"><a href="#MSELOSS-平方差" class="headerlink" title="MSELOSS 平方差"></a>MSELOSS 平方差</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">loss_mse = nn.MSELoss()<br>result_mse = loss_mse(inputs, targets)<br><span class="hljs-built_in">print</span>(result_mse)<br><span class="hljs-comment"># tensor(1.3333)</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130621.png" alt="image-20230721165853991"></p><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><p>分类问题。下图的log应该是ln</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130704.png" alt="image-20230721171349447" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor([<span class="hljs-number">0.1</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.3</span>])<br>y = torch.tensor([<span class="hljs-number">1</span>])<br>x = torch.reshape(x, (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>loss_cross = nn.CrossEntropyLoss()<br>result_cross = loss_cross(x, y)<br><span class="hljs-built_in">print</span>(result_cross)<br><span class="hljs-comment"># tensor(1.1019)</span><br></code></pre></td></tr></table></figure><h2 id="查看输出和target"><a href="#查看输出和target" class="headerlink" title="查看输出和target"></a>查看输出和target</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> float32, nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss, Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        <span class="hljs-built_in">print</span>(output) <br>        <span class="hljs-built_in">print</span>(targets)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">前者为每个类别的概率，后者为target：3</span><br><span class="hljs-string">tensor([[ 0.0277,  0.1381, -0.0236,  0.0042, -0.1030, -0.0837, -0.0184,  0.0114,</span><br><span class="hljs-string">          0.1186,  0.0049]], grad_fn=&lt;AddmmBackward0&gt;)</span><br><span class="hljs-string">tensor([3])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="添加交叉熵"><a href="#添加交叉熵" class="headerlink" title="添加交叉熵"></a>添加交叉熵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        result_loss = loss(output, targets)<br>        <span class="hljs-built_in">print</span>(result_loss)<br> <span class="hljs-comment"># tensor(2.4989, grad_fn=&lt;NllLossBackward0&gt;)</span><br></code></pre></td></tr></table></figure><h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        result_loss = loss(output, targets)<br>        result_loss.backward()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="23-优化器（一）"><a href="#23-优化器（一）" class="headerlink" title="23 优化器（一）"></a>23 优化器（一）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> float32, nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss, Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-comment"># 随机梯度下降</span><br>optim = torch.optim.SGD(tudui.parameters(), lr=<span class="hljs-number">0.01</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>            imgs, targets = data<br>            output = tudui(imgs)<br>            result_loss = loss(output, targets)<br>            <span class="hljs-comment"># 梯度清零</span><br>            optim.zero_grad()<br>            <span class="hljs-comment"># 反向传播</span><br>            result_loss.backward()<br>            <span class="hljs-comment"># 优化</span><br>            optim.step()<br>            <span class="hljs-comment"># 每一轮所有数据损失总和</span><br>            running_loss = running_loss + result_loss<br>    <span class="hljs-built_in">print</span>(running_loss)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor(18669.0332, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="hljs-string">tensor(16020.8330, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="24-现有网络模型的使用及修改"><a href="#24-现有网络模型的使用及修改" class="headerlink" title="24 现有网络模型的使用及修改"></a>24 现有网络模型的使用及修改</h1><h2 id="VGG16"><a href="#VGG16" class="headerlink" title="VGG16"></a>VGG16</h2><p>最后out_feature为1000，表明1000个分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-comment"># 加载网络模型，不用下载</span><br>vgg16_false = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 下载训练好的参数</span><br>vgg16_true = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(vgg16_true)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=1000, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>给vgg16多添加一个线性层，实现10个分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">vgg16_true.add_module(<span class="hljs-string">&quot;add_linear&quot;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(vgg16_true)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=1000, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (add_linear): Linear(in_features=1000, out_features=10, bias=True)</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>将线性层加到classifier中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">vgg16_true.classifier.add_module(<span class="hljs-string">&quot;add_linear&quot;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(vgg16_true)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=1000, bias=True)</span><br><span class="hljs-string">    (add_linear): Linear(in_features=1000, out_features=10, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改原有的最后一层</span><br>vgg16_false.classifier[<span class="hljs-number">6</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>((vgg16_false))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=10, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="25-网络模型的保存与读取"><a href="#25-网络模型的保存与读取" class="headerlink" title="25 网络模型的保存与读取"></a>25 网络模型的保存与读取</h1><h2 id="保存vgg16"><a href="#保存vgg16" class="headerlink" title="保存vgg16"></a>保存vgg16</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 保存方式一</span><br>torch.save(vgg16, <span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130455.png" alt="image-20230721210321691" style="zoom:67%;" /><h2 id="加载模型"><a href="#加载模型" class="headerlink" title="加载模型"></a>加载模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-comment"># 保存方式1(保存模型结构和参数)，加载模型</span><br><br>model = torch.load(<span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(model)<br></code></pre></td></tr></table></figure><h2 id="保存方式2"><a href="#保存方式2" class="headerlink" title="保存方式2"></a>保存方式2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保存方式2</span><br><span class="hljs-comment"># 不保存结构，保存参数，保存为字典，推荐使用</span><br>torch.save(vgg16.state_dict(), <span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>)<br>model2 = torch.load(<span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(model2)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">OrderedDict([(&#x27;features.0.weight&#x27;, tensor([[[[-0.0040,  0.0666, -0.1964],</span><br><span class="hljs-string">          [ 0.0534, -0.0111, -0.0529],</span><br><span class="hljs-string">          [-0.0224, -0.1023, -0.1115]],</span><br><span class="hljs-string"></span><br><span class="hljs-string">         [[ 0.0481,  0.0253, -0.0616],</span><br><span class="hljs-string">          [-0.0166, -0.0122, -0.0387],</span><br><span class="hljs-string">          [ 0.0031, -0.0336,  0.0157]],</span><br><span class="hljs-string"></span><br><span class="hljs-string">         [[ 0.0209,  0.0349,  0.0231],</span><br><span class="hljs-string">          [-0.0072, -0.0687, -0.0050],</span><br><span class="hljs-string">          [-0.0395,  0.0666,  0.1481]]],</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="恢复成网络模型"><a href="#恢复成网络模型" class="headerlink" title="恢复成网络模型"></a>恢复成网络模型</h2><p>新建网路模型结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br>vgg16.load_state_dict(torch.load(<span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>))<br><span class="hljs-built_in">print</span>(vgg16)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=1000, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="方式1陷阱"><a href="#方式1陷阱" class="headerlink" title="方式1陷阱"></a>方式1陷阱</h2><p>保存模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, <span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br>torch.save(tudui, <span class="hljs-string">&quot;tudui_method1.pth&quot;</span>)<br></code></pre></td></tr></table></figure><p>加载时报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">model = torch.load(<span class="hljs-string">&quot;tudui_method1.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(model)<br><span class="hljs-comment"># AttributeError: Can&#x27;t get attribute &#x27;Tudui&#x27; on &lt;module &#x27;__main__&#x27; from &#x27;D:\\PytorchLearning\\model_save.py&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>需要将模型的定义放在需要加载的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, <span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br>model = torch.load(<span class="hljs-string">&quot;tudui_method1.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(model)<br></code></pre></td></tr></table></figure><h1 id="26-完整的模型训练"><a href="#26-完整的模型训练" class="headerlink" title="26 完整的模型训练"></a>26 完整的模型训练</h1><h2 id="Argmax"><a href="#Argmax" class="headerlink" title="Argmax"></a>Argmax</h2><p>输入两张图片，通过outputs得到预测类别Preds</p><p>将Preds与Inputs target比较。</p><p>[false, true].sum()&#x3D;1，false看成0，true看成1</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222023245.png" alt="image-20230722155229401" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>outputs = torch.tensor([[<span class="hljs-number">0.1</span>,<span class="hljs-number">0.2</span>],<br>                       [<span class="hljs-number">0.3</span>,<span class="hljs-number">0.4</span>]])<br><span class="hljs-comment"># 1表示横向看</span><br><span class="hljs-built_in">print</span>(outputs.argmax(<span class="hljs-number">1</span>))<br><span class="hljs-comment"># tensor([1, 1])</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024624.png" alt="image-20230722155601779"></p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024441.png" alt="image-20230722155647986"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>outputs = torch.tensor([[<span class="hljs-number">0.1</span>,<span class="hljs-number">0.2</span>],<br>                       [<span class="hljs-number">0.3</span>,<span class="hljs-number">0.4</span>]])<br><span class="hljs-comment"># 1表示横向看</span><br>preds = outputs.argmax(<span class="hljs-number">1</span>)<br>targets = torch.tensor([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(preds == targets)<br><span class="hljs-built_in">print</span>((preds == targets).<span class="hljs-built_in">sum</span>())<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor([False,  True])</span><br><span class="hljs-string">tensor(1)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="model-py"><a href="#model-py" class="headerlink" title="model.py"></a>model.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 搭建神经网络</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tudui = Tudui()<br>    <span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>    output = tudui(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><br></code></pre></td></tr></table></figure><h3 id="训练和测试代码"><a href="#训练和测试代码" class="headerlink" title="训练和测试代码"></a>训练和测试代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 字符串格式化</span><br><span class="hljs-comment"># 如果train_size = 10, 训练数据集长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, <span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, <span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br>tudui = Tudui()<br><br><span class="hljs-comment"># 创建损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 科学计数法</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----------第 &#123;&#125; 轮训练开始----------&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br>    <span class="hljs-comment"># 训练开始</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets)<br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># item()可以把形如tensor(5)的类型转换成数字5</span><br>        <span class="hljs-comment"># 每100步骤打印</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数 &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 不需要调优，取消梯度</span><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-comment"># 总正确率/测试集长度</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存每一个epoch的结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-----------第 10 轮训练开始----------</span><br><span class="hljs-string">训练次数 7100, Loss: 1.28587007522583</span><br><span class="hljs-string">训练次数 7200, Loss: 0.9727596640586853</span><br><span class="hljs-string">训练次数 7300, Loss: 1.1144425868988037</span><br><span class="hljs-string">训练次数 7400, Loss: 0.8997210264205933</span><br><span class="hljs-string">训练次数 7500, Loss: 1.2414882183074951</span><br><span class="hljs-string">训练次数 7600, Loss: 1.2502361536026</span><br><span class="hljs-string">训练次数 7700, Loss: 0.8779300451278687</span><br><span class="hljs-string">训练次数 7800, Loss: 1.2825963497161865</span><br><span class="hljs-string">整体测试集上的Loss: 194.9348732829094</span><br><span class="hljs-string">整体测试集上的正确率: 0.5584999918937683</span><br><span class="hljs-string">模型已保存</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024261.png" alt="image-20230722162840740" style="zoom:67%;" /><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="train-和eval"><a href="#train-和eval" class="headerlink" title="train()和eval()"></a>train()和eval()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets)<br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># item()可以把形如tensor(5)的类型转换成数字5</span><br>        <span class="hljs-comment"># 每100步骤打印</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数 &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 不需要调优，取消梯度</span><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-comment"># 总正确率/测试集长度</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存每一个epoch的结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="27-利用GPU训练-一"><a href="#27-利用GPU训练-一" class="headerlink" title="27 利用GPU训练(一)"></a>27 利用GPU训练(一)</h1><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024674.png" alt="image-20230722163612035"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">import</span>  time<br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 字符串格式化</span><br><span class="hljs-comment"># 如果train_size = 10, 训练数据集长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, <span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, <span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-comment"># 搭建神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tudui = Tudui()<br>    <span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>    output = tudui(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><br><br>tudui = Tudui()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    tudui = tudui.cuda()<br><br><span class="hljs-comment"># 创建损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    loss_fn = loss_fn.cuda()<br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 科学计数法</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br>start_time = time.time()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----------第 &#123;&#125; 轮训练开始----------&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br>    <span class="hljs-comment"># 训练开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>            imgs = imgs.cuda()<br>            targets = targets.cuda()<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets)<br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># item()可以把形如tensor(5)的类型转换成数字5</span><br>        <span class="hljs-comment"># 每100步骤打印</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            end_time = time.time()<br>            <span class="hljs-built_in">print</span>(end_time - start_time)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数 &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 不需要调优，取消梯度</span><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>               imgs = imgs.cuda()<br>               targets = targets.cuda()<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-comment"># 总正确率/测试集长度</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存每一个epoch的结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-----------第 1 轮训练开始----------</span><br><span class="hljs-string">6.235116958618164</span><br><span class="hljs-string">训练次数 100, Loss: 2.292055368423462</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Goole-Colaboratory"><a href="#Goole-Colaboratory" class="headerlink" title="Goole Colaboratory"></a>Goole Colaboratory</h2><p>打开GPU</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024730.png" alt="image-20230722165519327" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024908.png" alt="image-20230722165546244" style="zoom:50%;" /><p>代码前加！表示不用python语法，用终端语法</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024633.png" alt="image-20230722165905600" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024827.png" alt="image-20230722165935223" style="zoom:50%;" /><h1 id="28-利用GPU训练-二"><a href="#28-利用GPU训练-二" class="headerlink" title="28 利用GPU训练(二)"></a>28 利用GPU训练(二)</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024381.png" alt="image-20230722170622579" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 定义训练的设备</span><br>device = torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)<br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 字符串格式化</span><br><span class="hljs-comment"># 如果train_size = 10, 训练数据集长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, <span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, <span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-comment"># 搭建神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tudui = Tudui()<br>    <span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>    output = tudui(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><br><br>tudui = Tudui()<br>tudui = tudui.to(device)<br><br><span class="hljs-comment"># 创建损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br>loss_fn = loss_fn.to(device)<br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 科学计数法</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br>start_time = time.time()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----------第 &#123;&#125; 轮训练开始----------&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br>    <span class="hljs-comment"># 训练开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        imgs = imgs.to(device)<br>        targets = targets.to(device)<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets)<br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># item()可以把形如tensor(5)的类型转换成数字5</span><br>        <span class="hljs-comment"># 每100步骤打印</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            end_time = time.time()<br>            <span class="hljs-built_in">print</span>(end_time - start_time)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数 &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 不需要调优，取消梯度</span><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            imgs = imgs.to(device)<br>            targets = targets.to(device)<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-comment"># 总正确率/测试集长度</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存每一个epoch的结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="device写法"><a href="#device写法" class="headerlink" title="device写法"></a>device写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)<br>device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span>)<br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="29-完整模型验证"><a href="#29-完整模型验证" class="headerlink" title="29 完整模型验证"></a>29 完整模型验证</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>image_path = <span class="hljs-string">&quot;./img/dog.png&quot;</span><br>image = Image.<span class="hljs-built_in">open</span>(image_path)<br><span class="hljs-built_in">print</span>(image)<br><span class="hljs-comment"># png是四个通道，除了RGB三通道外还有一个透明度通道</span><br><span class="hljs-comment"># 调用convert保留其颜色通道</span><br>image = image.convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br><br>transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="hljs-number">32</span>, <span class="hljs-number">32</span>)),<br>                                            torchvision.transforms.ToTensor()])<br>image = transform(image)<br><span class="hljs-built_in">print</span>(image.shape)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><span class="hljs-comment"># 加载模型</span><br><span class="hljs-comment"># cpu上想使用gpu训练的模型需要映射</span><br>model = torch.load(<span class="hljs-string">&quot;tudui_0.pth&quot;</span>, map_location=torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>))<br><span class="hljs-built_in">print</span>(model)<br><br>image = torch.reshape(image, (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>))<br>model.<span class="hljs-built_in">eval</span>()<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    output = model(image)<br><span class="hljs-built_in">print</span>(output)<br><br><span class="hljs-built_in">print</span>(output.argmax(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h1 id="30-阅读开源项目"><a href="#30-阅读开源项目" class="headerlink" title="30 阅读开源项目"></a>30 阅读开源项目</h1><p><a href="https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix">pytorch-CycleGAN-and-pix2pix</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">parser.add_argument(<span class="hljs-string">&#x27;--dataroot&#x27;</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;path to images (should have subfolders trainA, trainB, valA, valB, etc)&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222025813.png" alt="image-20230722201917644"></p><p>requered&#x3D;True表明一定需要这个参数</p><p>可以把其改成default，就可以在pycharm中右键运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改后</span><br>     parser.add_argument(<span class="hljs-string">&#x27;--dataroot&#x27;</span>, default=<span class="hljs-string">&quot;./dataset/maps&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;path to images (should have subfolders trainA, trainB, valA, valB, etc)&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch Learning 4</title>
      <link href="/2024/02/20/PyTorch/notebook/Pytorch%20Learning%204/"/>
      <url>/2024/02/20/PyTorch/notebook/Pytorch%20Learning%204/</url>
      
        <content type="html"><![CDATA[<h1 id="26-完整的模型训练"><a href="#26-完整的模型训练" class="headerlink" title="26 完整的模型训练"></a>26 完整的模型训练</h1><h2 id="Argmax"><a href="#Argmax" class="headerlink" title="Argmax"></a>Argmax</h2><p>输入两张图片，通过outputs得到预测类别Preds</p><p>将Preds与Inputs target比较。</p><p>[false, true].sum()&#x3D;1，false看成0，true看成1</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222023245.png" alt="image-20230722155229401" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>outputs = torch.tensor([[<span class="hljs-number">0.1</span>,<span class="hljs-number">0.2</span>],<br>                       [<span class="hljs-number">0.3</span>,<span class="hljs-number">0.4</span>]])<br><span class="hljs-comment"># 1表示横向看</span><br><span class="hljs-built_in">print</span>(outputs.argmax(<span class="hljs-number">1</span>))<br><span class="hljs-comment"># tensor([1, 1])</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024624.png" alt="image-20230722155601779"></p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024441.png" alt="image-20230722155647986"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>outputs = torch.tensor([[<span class="hljs-number">0.1</span>,<span class="hljs-number">0.2</span>],<br>                       [<span class="hljs-number">0.3</span>,<span class="hljs-number">0.4</span>]])<br><span class="hljs-comment"># 1表示横向看</span><br>preds = outputs.argmax(<span class="hljs-number">1</span>)<br>targets = torch.tensor([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(preds == targets)<br><span class="hljs-built_in">print</span>((preds == targets).<span class="hljs-built_in">sum</span>())<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor([False,  True])</span><br><span class="hljs-string">tensor(1)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="model-py"><a href="#model-py" class="headerlink" title="model.py"></a>model.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 搭建神经网络</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tudui = Tudui()<br>    <span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>    output = tudui(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><br></code></pre></td></tr></table></figure><h3 id="训练和测试代码"><a href="#训练和测试代码" class="headerlink" title="训练和测试代码"></a>训练和测试代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 字符串格式化</span><br><span class="hljs-comment"># 如果train_size = 10, 训练数据集长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, <span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, <span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br>tudui = Tudui()<br><br><span class="hljs-comment"># 创建损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 科学计数法</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----------第 &#123;&#125; 轮训练开始----------&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br>    <span class="hljs-comment"># 训练开始</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets)<br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># item()可以把形如tensor(5)的类型转换成数字5</span><br>        <span class="hljs-comment"># 每100步骤打印</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数 &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 不需要调优，取消梯度</span><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-comment"># 总正确率/测试集长度</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存每一个epoch的结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-----------第 10 轮训练开始----------</span><br><span class="hljs-string">训练次数 7100, Loss: 1.28587007522583</span><br><span class="hljs-string">训练次数 7200, Loss: 0.9727596640586853</span><br><span class="hljs-string">训练次数 7300, Loss: 1.1144425868988037</span><br><span class="hljs-string">训练次数 7400, Loss: 0.8997210264205933</span><br><span class="hljs-string">训练次数 7500, Loss: 1.2414882183074951</span><br><span class="hljs-string">训练次数 7600, Loss: 1.2502361536026</span><br><span class="hljs-string">训练次数 7700, Loss: 0.8779300451278687</span><br><span class="hljs-string">训练次数 7800, Loss: 1.2825963497161865</span><br><span class="hljs-string">整体测试集上的Loss: 194.9348732829094</span><br><span class="hljs-string">整体测试集上的正确率: 0.5584999918937683</span><br><span class="hljs-string">模型已保存</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024261.png" alt="image-20230722162840740" style="zoom:67%;" /><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="train-和eval"><a href="#train-和eval" class="headerlink" title="train()和eval()"></a>train()和eval()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets)<br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># item()可以把形如tensor(5)的类型转换成数字5</span><br>        <span class="hljs-comment"># 每100步骤打印</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数 &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 不需要调优，取消梯度</span><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-comment"># 总正确率/测试集长度</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存每一个epoch的结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="27-利用GPU训练-一"><a href="#27-利用GPU训练-一" class="headerlink" title="27 利用GPU训练(一)"></a>27 利用GPU训练(一)</h1><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024674.png" alt="image-20230722163612035"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">import</span>  time<br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 字符串格式化</span><br><span class="hljs-comment"># 如果train_size = 10, 训练数据集长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, <span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, <span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-comment"># 搭建神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tudui = Tudui()<br>    <span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>    output = tudui(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><br><br>tudui = Tudui()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    tudui = tudui.cuda()<br><br><span class="hljs-comment"># 创建损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    loss_fn = loss_fn.cuda()<br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 科学计数法</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br>start_time = time.time()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----------第 &#123;&#125; 轮训练开始----------&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br>    <span class="hljs-comment"># 训练开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>            imgs = imgs.cuda()<br>            targets = targets.cuda()<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets)<br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># item()可以把形如tensor(5)的类型转换成数字5</span><br>        <span class="hljs-comment"># 每100步骤打印</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            end_time = time.time()<br>            <span class="hljs-built_in">print</span>(end_time - start_time)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数 &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 不需要调优，取消梯度</span><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>               imgs = imgs.cuda()<br>               targets = targets.cuda()<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-comment"># 总正确率/测试集长度</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存每一个epoch的结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-----------第 1 轮训练开始----------</span><br><span class="hljs-string">6.235116958618164</span><br><span class="hljs-string">训练次数 100, Loss: 2.292055368423462</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Goole-Colaboratory"><a href="#Goole-Colaboratory" class="headerlink" title="Goole Colaboratory"></a>Goole Colaboratory</h2><p>打开GPU</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024730.png" alt="image-20230722165519327" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024908.png" alt="image-20230722165546244" style="zoom:50%;" /><p>代码前加！表示不用python语法，用终端语法</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024633.png" alt="image-20230722165905600" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024827.png" alt="image-20230722165935223" style="zoom:50%;" /><h1 id="28-利用GPU训练-二"><a href="#28-利用GPU训练-二" class="headerlink" title="28 利用GPU训练(二)"></a>28 利用GPU训练(二)</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222024381.png" alt="image-20230722170622579" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 定义训练的设备</span><br>device = torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)<br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root = <span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 字符串格式化</span><br><span class="hljs-comment"># 如果train_size = 10, 训练数据集长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, <span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, <span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-comment"># 搭建神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tudui = Tudui()<br>    <span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>    output = tudui(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><br><br>tudui = Tudui()<br>tudui = tudui.to(device)<br><br><span class="hljs-comment"># 创建损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br>loss_fn = loss_fn.to(device)<br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 科学计数法</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br>start_time = time.time()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----------第 &#123;&#125; 轮训练开始----------&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br>    <span class="hljs-comment"># 训练开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        imgs = imgs.to(device)<br>        targets = targets.to(device)<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets)<br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># item()可以把形如tensor(5)的类型转换成数字5</span><br>        <span class="hljs-comment"># 每100步骤打印</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            end_time = time.time()<br>            <span class="hljs-built_in">print</span>(end_time - start_time)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数 &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 不需要调优，取消梯度</span><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            imgs = imgs.to(device)<br>            targets = targets.to(device)<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-comment"># 总正确率/测试集长度</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存每一个epoch的结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="device写法"><a href="#device写法" class="headerlink" title="device写法"></a>device写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)<br>device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span>)<br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="29-完整模型验证"><a href="#29-完整模型验证" class="headerlink" title="29 完整模型验证"></a>29 完整模型验证</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>image_path = <span class="hljs-string">&quot;./img/dog.png&quot;</span><br>image = Image.<span class="hljs-built_in">open</span>(image_path)<br><span class="hljs-built_in">print</span>(image)<br><span class="hljs-comment"># png是四个通道，除了RGB三通道外还有一个透明度通道</span><br><span class="hljs-comment"># 调用convert保留其颜色通道</span><br>image = image.convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br><br>transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="hljs-number">32</span>, <span class="hljs-number">32</span>)),<br>                                            torchvision.transforms.ToTensor()])<br>image = transform(image)<br><span class="hljs-built_in">print</span>(image.shape)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><span class="hljs-comment"># 加载模型</span><br><span class="hljs-comment"># cpu上想使用gpu训练的模型需要映射</span><br>model = torch.load(<span class="hljs-string">&quot;tudui_0.pth&quot;</span>, map_location=torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>))<br><span class="hljs-built_in">print</span>(model)<br><br>image = torch.reshape(image, (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>))<br>model.<span class="hljs-built_in">eval</span>()<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    output = model(image)<br><span class="hljs-built_in">print</span>(output)<br><br><span class="hljs-built_in">print</span>(output.argmax(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h1 id="30-阅读开源项目"><a href="#30-阅读开源项目" class="headerlink" title="30 阅读开源项目"></a>30 阅读开源项目</h1><p><a href="https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix">pytorch-CycleGAN-and-pix2pix</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">parser.add_argument(<span class="hljs-string">&#x27;--dataroot&#x27;</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;path to images (should have subfolders trainA, trainB, valA, valB, etc)&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307222025813.png" alt="image-20230722201917644"></p><p>requered&#x3D;True表明一定需要这个参数</p><p>可以把其改成default，就可以在pycharm中右键运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改后</span><br>     parser.add_argument(<span class="hljs-string">&#x27;--dataroot&#x27;</span>, default=<span class="hljs-string">&quot;./dataset/maps&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;path to images (should have subfolders trainA, trainB, valA, valB, etc)&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch Learning 3</title>
      <link href="/2024/02/20/PyTorch/notebook/Pytorch%20Learning%203/"/>
      <url>/2024/02/20/PyTorch/notebook/Pytorch%20Learning%203/</url>
      
        <content type="html"><![CDATA[<h1 id="15-神经网络的基本骨架-nn-Module的使用"><a href="#15-神经网络的基本骨架-nn-Module的使用" class="headerlink" title="15 神经网络的基本骨架-nn.Module的使用"></a>15 神经网络的基本骨架-nn.Module的使用</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212127626.png" alt="image-20230720204614822" style="zoom:67%;" /><h2 id="自定义神经网络"><a href="#自定义神经网络" class="headerlink" title="自定义神经网络"></a>自定义神经网络</h2><h3 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h3><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212127438.png" alt="image-20230720205054565"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-comment"># 继承nn.Module</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> output<br>    <br><span class="hljs-comment"># 创建神经网络</span><br>tudui = Tudui()<br><span class="hljs-comment"># 创建输入</span><br>x = torch.tensor(<span class="hljs-number">1.0</span>)<br><span class="hljs-comment"># 将x输入神经网络</span><br>output = tudui(x)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h1 id="16-卷积操作"><a href="#16-卷积操作" class="headerlink" title="16 卷积操作"></a>16 卷积操作</h1><p>卷积核移动，每个位置，卷积核的每一小块与输入图像重叠部分每一小块的相乘，所有乘积相加即为输出的一个小块</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128784.png" alt="image-20230720210532679" style="zoom:50%;" /><p>Stride为卷积核每次移动的步数</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128132.png" alt="image-20230720210651404" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128270.png" alt="image-20230720210746107" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128145.png" alt="image-20230720212346920" style="zoom:50%;" /><h2 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])<br><br>kernel = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><span class="hljs-built_in">print</span>(kernel.shape)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">一开始只有尺寸只有两个维度</span><br><span class="hljs-string">torch.Size([5, 5])</span><br><span class="hljs-string">torch.Size([3, 3])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="使用reshape"><a href="#使用reshape" class="headerlink" title="使用reshape()"></a>使用reshape()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># batch_size, channel, 5*5</span><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([1, 1, 5, 5])</span><br><span class="hljs-string">torch.Size([1, 1, 3, 3])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="实现卷积操作"><a href="#实现卷积操作" class="headerlink" title="实现卷积操作"></a>实现卷积操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span>  torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])<br><br>kernel = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]])<br><span class="hljs-comment"># batch_size, channel, 5*5</span><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><span class="hljs-built_in">print</span>(kernel.shape)<br><br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([1, 1, 5, 5])</span><br><span class="hljs-string">torch.Size([1, 1, 3, 3])</span><br><span class="hljs-string">tensor([[[[10, 12, 12],</span><br><span class="hljs-string">          [18, 16, 16],</span><br><span class="hljs-string">          [13,  9,  3]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="改变stride-步幅"><a href="#改变stride-步幅" class="headerlink" title="改变stride 步幅"></a>改变stride 步幅</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br>output2 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor([[[[10, 12, 12],</span><br><span class="hljs-string">          [18, 16, 16],</span><br><span class="hljs-string">          [13,  9,  3]]]])</span><br><span class="hljs-string">tensor([[[[10, 12, 12],</span><br><span class="hljs-string">          [18, 16, 16],</span><br><span class="hljs-string">          [13,  9,  3]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Padding-填充"><a href="#Padding-填充" class="headerlink" title="Padding 填充"></a>Padding 填充</h2><p>图像周围填充0</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128205.png" alt="image-20230720212848323" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">output3 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output3)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor([[[[ 1,  3,  4, 10,  8],</span><br><span class="hljs-string">          [ 5, 10, 12, 12,  6],</span><br><span class="hljs-string">          [ 7, 18, 16, 16,  8],</span><br><span class="hljs-string">          [11, 13,  9,  3,  4],</span><br><span class="hljs-string">          [14, 13,  9,  7,  4]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="17-神经网络-卷积层"><a href="#17-神经网络-卷积层" class="headerlink" title="17 神经网络-卷积层"></a>17 神经网络-卷积层</h1><h2 id="In-channel输入通道和Out-channel输出通道"><a href="#In-channel输入通道和Out-channel输出通道" class="headerlink" title="In_channel输入通道和Out_channel输出通道"></a>In_channel输入通道和Out_channel输出通道</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128005.png" alt="image-20230720221004485" style="zoom:50%;" /><h3 id="out-channel为2时"><a href="#out-channel为2时" class="headerlink" title="out_channel为2时"></a>out_channel为2时</h3><p>卷积操作完成后输出的 out_channels，取决于卷积核的数量。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128788.png" alt="image-20230720221112952" style="zoom:50%;" /><h2 id="编写代码验证"><a href="#编写代码验证" class="headerlink" title="编写代码验证"></a>编写代码验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># super()函数通过传入当前类的名称（即Tudui）作为第一个参数，告诉Python去寻找并调用Tudui类的下一个父类的方法。</span><br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        <span class="hljs-comment"># 卷积层</span><br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># x放入卷积层</span><br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Tudui(</span><br><span class="hljs-string">  (conv1): Conv2d(3, 6, kernel_size=(3, 3), stride=(1, 1))</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看每一个数据</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = tudui(imgs)<br> <span class="hljs-built_in">print</span>(imgs.shape)<br>    <span class="hljs-built_in">print</span>(output.shape)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">batch_size为64.in_channel为3,out_channel为6</span><br><span class="hljs-string">torch.Size([64, 3, 32, 32])</span><br><span class="hljs-string">torch.Size([64, 6, 30, 30])</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>output为6个channel无法用writer显示，用reshape变为3个channel</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -1表示会自动计算</span><br>torch.reshape(output, (-<span class="hljs-number">1</span> , <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>))<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128048.png" alt="image-20230721105114448" style="zoom:50%;" /><h1 id="18-最大池的使用"><a href="#18-最大池的使用" class="headerlink" title="18 最大池的使用"></a>18 最大池的使用</h1><h2 id="ceil-mode和floor-mode"><a href="#ceil-mode和floor-mode" class="headerlink" title="ceil mode和floor mode"></a>ceil mode和floor mode</h2><p>ceil mode是向上取整，floor mode是向下取整</p><p>具体到池化操作，ceil mode指如果池化核覆盖范围内有空缺，还是保留空缺继续池化；floor mode就会将空缺舍弃，不对其进行池化。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128700.png" alt="image-20230721111639352" style="zoom:67%;" /><p>每次找出被池化核覆盖的范围内的最大值输出</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128281.png" alt="image-20230721111510866" style="zoom:50%;" /><p>步幅为kernel_size的大小，3</p><h2 id="Ceil-mode"><a href="#Ceil-mode" class="headerlink" title="Ceil mode"></a>Ceil mode</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212128639.png" alt="image-20230721111944689" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129643.png" alt="image-20230721112032005" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129583.png" alt="image-20230721112059463" style="zoom:50%;" /><p>默认情况ceil mode为false，即不保留</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],   <span class="hljs-comment"># 设置为浮点数</span><br>                      [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]],dtype=torch.float32)<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.maxpool = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([1, 1, 5, 5])</span><br><span class="hljs-string">tensor([[[[2., 3.],</span><br><span class="hljs-string">          [5., 1.]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Ceil-mode为False"><a href="#Ceil-mode为False" class="headerlink" title="Ceil mode为False"></a>Ceil mode为False</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">        self.maxpool = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">False</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor([[[[2.]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="最大池化的作用"><a href="#最大池化的作用" class="headerlink" title="最大池化的作用"></a>最大池化的作用</h2><p>保留数据特征，减小数据量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.maxpool = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_maxpool&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129965.png" alt="image-20230721113804610" style="zoom:50%;" /><h1 id="19-非线性激活"><a href="#19-非线性激活" class="headerlink" title="19 非线性激活"></a>19 非线性激活</h1><h2 id="以ReLU为例"><a href="#以ReLU为例" class="headerlink" title="以ReLU为例"></a>以ReLU为例</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129815.png" alt="image-20230721114225891" style="zoom:50%;" /><h3 id="参数inPlace"><a href="#参数inPlace" class="headerlink" title="参数inPlace"></a>参数inPlace</h3><p>表示是否对原来变量进行变换，默认是False</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129845.png" alt="image-20230721114819121" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>],<br>                     [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]])<br><br><span class="hljs-comment"># input需要指定batch_size</span><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.relu = ReLU()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.relu(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([1, 1, 2, 2])</span><br><span class="hljs-string">tensor([[[[1., 0.],</span><br><span class="hljs-string">          [0., 3.]]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129448.png" alt="image-20230721115922770" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU, Sigmoid<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>],<br>                     [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]])<br><br><span class="hljs-comment"># input需要指定batch_size</span><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.relu = ReLU()<br>        self.sigmoid1 = Sigmoid()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.sigmoid1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_relu&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129198.png" alt="image-20230721120003234" style="zoom:50%;" /><h1 id="20-线性层及其它层介绍"><a href="#20-线性层及其它层介绍" class="headerlink" title="20 线性层及其它层介绍"></a>20 线性层及其它层介绍</h1><h2 id="线性层"><a href="#线性层" class="headerlink" title="线性层"></a>线性层</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129928.png" alt="image-20230721142029222" style="zoom:50%;" /><p>5×5经过reshape变为1×25，再经过线性层变为1×3</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129920.png" alt="image-20230721142249064" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        <span class="hljs-comment"># 输入神经元个数，输出神经元个数</span><br>        self.linear1 = Linear(<span class="hljs-number">196608</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.linear1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    output = torch.reshape(imgs, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">print</span>(output.shape)<br>    output = tudui(output)<br>    <span class="hljs-built_in">print</span>(output.shape)<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> torch.Size([64, 3, 32, 32])</span><br><span class="hljs-string">torch.Size([1, 1, 1, 196608])</span><br><span class="hljs-string">torch.Size([1, 1, 1, 10])</span><br><span class="hljs-string"># 输入batch_size为64，输出batch_size为1，就是说想用1张图片概括64张图片的特征？</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Flatten-函数"><a href="#Flatten-函数" class="headerlink" title="Flatten()函数"></a>Flatten()函数</h3><p>可以把输入展成一行,变为一维向量</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129710.png" alt="image-20230721143627486"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">    output = torch.flatten(imgs)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([64, 3, 32, 32])</span><br><span class="hljs-string">torch.Size([196608])</span><br><span class="hljs-string">torch.Size([10])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="21-搭建小实战和Sequential的使用"><a href="#21-搭建小实战和Sequential的使用" class="headerlink" title="21 搭建小实战和Sequential的使用"></a>21 搭建小实战和Sequential的使用</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129225.png" alt="image-20230721160609054" style="zoom:67%;" /><p>卷积的padding和stride可以用公式计算</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129852.png" alt="image-20230721154938067" style="zoom:67%;" /><p>padding为2，stride为1</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212129734.png" alt="image-20230721160010309" style="zoom:67%;" /><h2 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.conv1 = Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool1 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.conv2 = Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool2 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.conv3 = Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>)<br>        self.maxpool3 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.flatten = Flatten()<br>        <span class="hljs-comment"># 两个线性层</span><br>        self.linear1 = Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>)<br>        self.linear2 = Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        x = self.maxpool1(x)<br>        x = self.conv2(x)<br>        x = self.maxpool2(x)<br>        x = self.conv3(x)<br>        x = self.maxpool3(x)<br>        x = self.flatten(x)<br>        x = self.linear1(x)<br>        x = self.linear2(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Tudui(</span><br><span class="hljs-string">  (conv1): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><br><span class="hljs-string">  (maxpool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  (conv2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><br><span class="hljs-string">  (maxpool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  (conv3): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2))</span><br><span class="hljs-string">  (maxpool3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  (flatten): Flatten(start_dim=1, end_dim=-1)</span><br><span class="hljs-string">  (linear1): Linear(in_features=1024, out_features=64, bias=True)</span><br><span class="hljs-string">  (linear2): Linear(in_features=64, out_features=10, bias=True)</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="检查网络正确性"><a href="#检查网络正确性" class="headerlink" title="检查网络正确性"></a>检查网络正确性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 元素都是1</span><br><span class="hljs-built_in">input</span> = torch.ones(<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>)<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output.shape)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># 每张图片对应10,64张图片</span><br><span class="hljs-string">torch.Size([64, 10])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Sequential使用"><a href="#Sequential使用" class="headerlink" title="Sequential使用"></a>Sequential使用</h2><p>代码更简洁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h2 id="add-graph-显示训练过程"><a href="#add-graph-显示训练过程" class="headerlink" title="add_graph()显示训练过程"></a>add_graph()显示训练过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><br><span class="hljs-comment"># 元素都是1</span><br><span class="hljs-built_in">input</span> = torch.ones(<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>)<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output.shape)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs2&quot;</span>)<br>writer.add_graph(tudui, <span class="hljs-built_in">input</span>)<br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130816.png" alt="image-20230721162855578" style="zoom:67%;" /><p>双击查看细节</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130215.png" alt="image-20230721162914891" style="zoom:50%;" /><h1 id="22-损失函数与反向传播"><a href="#22-损失函数与反向传播" class="headerlink" title="22 损失函数与反向传播"></a>22 损失函数与反向传播</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130826.png" alt="image-20230721164558100" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130961.png" alt="image-20230721164717441" style="zoom:67%;" /><h2 id="L1loss-函数"><a href="#L1loss-函数" class="headerlink" title="L1loss 函数"></a>L1loss 函数</h2><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130158.png" alt="image-20230721164852676"></p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130420.png" alt="image-20230721164934328" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> float32<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss<br><br>inputs = torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], dtype=torch.float32)<br>targets = torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>], dtype=torch.float32)<br><br>inputs = torch.reshape(inputs, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>targets = torch.reshape(targets, (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br><br>loss = L1Loss()<br>result = loss(inputs, targets)<br><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor(0.6667)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="改变reduction"><a href="#改变reduction" class="headerlink" title="改变reduction"></a>改变reduction</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 结果为差距总和</span><br>loss = L1Loss(reduction=<span class="hljs-string">&#x27;sum&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor(2.)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="MSELOSS-平方差"><a href="#MSELOSS-平方差" class="headerlink" title="MSELOSS 平方差"></a>MSELOSS 平方差</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">loss_mse = nn.MSELoss()<br>result_mse = loss_mse(inputs, targets)<br><span class="hljs-built_in">print</span>(result_mse)<br><span class="hljs-comment"># tensor(1.3333)</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130621.png" alt="image-20230721165853991"></p><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><p>分类问题。下图的log应该是ln</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130704.png" alt="image-20230721171349447" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor([<span class="hljs-number">0.1</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.3</span>])<br>y = torch.tensor([<span class="hljs-number">1</span>])<br>x = torch.reshape(x, (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>loss_cross = nn.CrossEntropyLoss()<br>result_cross = loss_cross(x, y)<br><span class="hljs-built_in">print</span>(result_cross)<br><span class="hljs-comment"># tensor(1.1019)</span><br></code></pre></td></tr></table></figure><h2 id="查看输出和target"><a href="#查看输出和target" class="headerlink" title="查看输出和target"></a>查看输出和target</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> float32, nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss, Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        <span class="hljs-built_in">print</span>(output) <br>        <span class="hljs-built_in">print</span>(targets)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">前者为每个类别的概率，后者为target：3</span><br><span class="hljs-string">tensor([[ 0.0277,  0.1381, -0.0236,  0.0042, -0.1030, -0.0837, -0.0184,  0.0114,</span><br><span class="hljs-string">          0.1186,  0.0049]], grad_fn=&lt;AddmmBackward0&gt;)</span><br><span class="hljs-string">tensor([3])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="添加交叉熵"><a href="#添加交叉熵" class="headerlink" title="添加交叉熵"></a>添加交叉熵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        result_loss = loss(output, targets)<br>        <span class="hljs-built_in">print</span>(result_loss)<br> <span class="hljs-comment"># tensor(2.4989, grad_fn=&lt;NllLossBackward0&gt;)</span><br></code></pre></td></tr></table></figure><h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        result_loss = loss(output, targets)<br>        result_loss.backward()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="23-优化器（一）"><a href="#23-优化器（一）" class="headerlink" title="23 优化器（一）"></a>23 优化器（一）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> float32, nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss, Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-comment"># 随机梯度下降</span><br>optim = torch.optim.SGD(tudui.parameters(), lr=<span class="hljs-number">0.01</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>            imgs, targets = data<br>            output = tudui(imgs)<br>            result_loss = loss(output, targets)<br>            <span class="hljs-comment"># 梯度清零</span><br>            optim.zero_grad()<br>            <span class="hljs-comment"># 反向传播</span><br>            result_loss.backward()<br>            <span class="hljs-comment"># 优化</span><br>            optim.step()<br>            <span class="hljs-comment"># 每一轮所有数据损失总和</span><br>            running_loss = running_loss + result_loss<br>    <span class="hljs-built_in">print</span>(running_loss)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">tensor(18669.0332, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="hljs-string">tensor(16020.8330, grad_fn=&lt;AddBackward0&gt;)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="24-现有网络模型的使用及修改"><a href="#24-现有网络模型的使用及修改" class="headerlink" title="24 现有网络模型的使用及修改"></a>24 现有网络模型的使用及修改</h1><h2 id="VGG16"><a href="#VGG16" class="headerlink" title="VGG16"></a>VGG16</h2><p>最后out_feature为1000，表明1000个分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-comment"># 加载网络模型，不用下载</span><br>vgg16_false = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 下载训练好的参数</span><br>vgg16_true = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(vgg16_true)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=1000, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>给vgg16多添加一个线性层，实现10个分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">vgg16_true.add_module(<span class="hljs-string">&quot;add_linear&quot;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(vgg16_true)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=1000, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (add_linear): Linear(in_features=1000, out_features=10, bias=True)</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>将线性层加到classifier中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">vgg16_true.classifier.add_module(<span class="hljs-string">&quot;add_linear&quot;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(vgg16_true)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=1000, bias=True)</span><br><span class="hljs-string">    (add_linear): Linear(in_features=1000, out_features=10, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改原有的最后一层</span><br>vgg16_false.classifier[<span class="hljs-number">6</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>((vgg16_false))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=10, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="25-网络模型的保存与读取"><a href="#25-网络模型的保存与读取" class="headerlink" title="25 网络模型的保存与读取"></a>25 网络模型的保存与读取</h1><h2 id="保存vgg16"><a href="#保存vgg16" class="headerlink" title="保存vgg16"></a>保存vgg16</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 保存方式一</span><br>torch.save(vgg16, <span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day3/202307212130455.png" alt="image-20230721210321691" style="zoom:67%;" /><h2 id="加载模型"><a href="#加载模型" class="headerlink" title="加载模型"></a>加载模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-comment"># 保存方式1(保存模型结构和参数)，加载模型</span><br><br>model = torch.load(<span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(model)<br></code></pre></td></tr></table></figure><h2 id="保存方式2"><a href="#保存方式2" class="headerlink" title="保存方式2"></a>保存方式2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保存方式2</span><br><span class="hljs-comment"># 不保存结构，保存参数，保存为字典，推荐使用</span><br>torch.save(vgg16.state_dict(), <span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>)<br>model2 = torch.load(<span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(model2)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">OrderedDict([(&#x27;features.0.weight&#x27;, tensor([[[[-0.0040,  0.0666, -0.1964],</span><br><span class="hljs-string">          [ 0.0534, -0.0111, -0.0529],</span><br><span class="hljs-string">          [-0.0224, -0.1023, -0.1115]],</span><br><span class="hljs-string"></span><br><span class="hljs-string">         [[ 0.0481,  0.0253, -0.0616],</span><br><span class="hljs-string">          [-0.0166, -0.0122, -0.0387],</span><br><span class="hljs-string">          [ 0.0031, -0.0336,  0.0157]],</span><br><span class="hljs-string"></span><br><span class="hljs-string">         [[ 0.0209,  0.0349,  0.0231],</span><br><span class="hljs-string">          [-0.0072, -0.0687, -0.0050],</span><br><span class="hljs-string">          [-0.0395,  0.0666,  0.1481]]],</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="恢复成网络模型"><a href="#恢复成网络模型" class="headerlink" title="恢复成网络模型"></a>恢复成网络模型</h2><p>新建网路模型结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br>vgg16.load_state_dict(torch.load(<span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>))<br><span class="hljs-built_in">print</span>(vgg16)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">VGG(</span><br><span class="hljs-string">  (features): Sequential(</span><br><span class="hljs-string">    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (3): ReLU(inplace=True)</span><br><span class="hljs-string">    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (6): ReLU(inplace=True)</span><br><span class="hljs-string">    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (8): ReLU(inplace=True)</span><br><span class="hljs-string">    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (11): ReLU(inplace=True)</span><br><span class="hljs-string">    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (13): ReLU(inplace=True)</span><br><span class="hljs-string">    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (15): ReLU(inplace=True)</span><br><span class="hljs-string">    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (18): ReLU(inplace=True)</span><br><span class="hljs-string">    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (20): ReLU(inplace=True)</span><br><span class="hljs-string">    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (22): ReLU(inplace=True)</span><br><span class="hljs-string">    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (25): ReLU(inplace=True)</span><br><span class="hljs-string">    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (27): ReLU(inplace=True)</span><br><span class="hljs-string">    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="hljs-string">    (29): ReLU(inplace=True)</span><br><span class="hljs-string">    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><br><span class="hljs-string">  (classifier): Sequential(</span><br><span class="hljs-string">    (0): Linear(in_features=25088, out_features=4096, bias=True)</span><br><span class="hljs-string">    (1): ReLU(inplace=True)</span><br><span class="hljs-string">    (2): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (3): Linear(in_features=4096, out_features=4096, bias=True)</span><br><span class="hljs-string">    (4): ReLU(inplace=True)</span><br><span class="hljs-string">    (5): Dropout(p=0.5, inplace=False)</span><br><span class="hljs-string">    (6): Linear(in_features=4096, out_features=1000, bias=True)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="方式1陷阱"><a href="#方式1陷阱" class="headerlink" title="方式1陷阱"></a>方式1陷阱</h2><p>保存模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, <span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br>torch.save(tudui, <span class="hljs-string">&quot;tudui_method1.pth&quot;</span>)<br></code></pre></td></tr></table></figure><p>加载时报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">model = torch.load(<span class="hljs-string">&quot;tudui_method1.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(model)<br><span class="hljs-comment"># AttributeError: Can&#x27;t get attribute &#x27;Tudui&#x27; on &lt;module &#x27;__main__&#x27; from &#x27;D:\\PytorchLearning\\model_save.py&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>需要将模型的定义放在需要加载的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, <span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br>model = torch.load(<span class="hljs-string">&quot;tudui_method1.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(model)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch Learning 2</title>
      <link href="/2024/02/20/PyTorch/notebook/Pytorch%20Learning%202/"/>
      <url>/2024/02/20/PyTorch/notebook/Pytorch%20Learning%202/</url>
      
        <content type="html"><![CDATA[<h1 id="7-Tensorboard的使用-一"><a href="#7-Tensorboard的使用-一" class="headerlink" title="7 Tensorboard的使用(一)"></a>7 Tensorboard的使用(一)</h1><h2 id="打开Pycharm，设置环境"><a href="#打开Pycharm，设置环境" class="headerlink" title="打开Pycharm，设置环境"></a>打开Pycharm，设置环境</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从torch.utils.tensorboard模块中导入SummaryWriter类</span><br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-comment"># 将事件和文件存储到&quot;logs&quot;文件夹下</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><br><span class="hljs-comment"># writer.add_image()</span><br><span class="hljs-comment"># y = x</span><br><span class="hljs-comment"># i 范围是0到99</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y = x&quot;</span>, i, i)<br><br>write.close()<br></code></pre></td></tr></table></figure><h2 id="add-scalar-方法"><a href="#add-scalar-方法" class="headerlink" title="add_scalar()方法"></a>add_scalar()方法</h2><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726884.png" alt="image-20230720095510726"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_scalar</span>(<span class="hljs-params"></span><br><span class="hljs-params">       self,</span><br><span class="hljs-params">       tag,</span><br><span class="hljs-params">       scalar_value,</span><br><span class="hljs-params">       global_step=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">       walltime=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">       new_style=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">       double_precision=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">   </span>):<br>       <span class="hljs-string">&quot;&quot;&quot;Add scalar data to summary.</span><br><span class="hljs-string">       Args:</span><br><span class="hljs-string">           tag (str): Data identifier</span><br><span class="hljs-string">           scalar_value (float or string/blobname): Value to save</span><br><span class="hljs-string">           global_step (int): Global step value to record</span><br><span class="hljs-string">       &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="安装TensorBoard"><a href="#安装TensorBoard" class="headerlink" title="安装TensorBoard"></a>安装TensorBoard</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726409.png" alt="image-20230720100426926" style="zoom:67%;" /><p>安装后再次运行，左侧多了一个logs文件</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726488.png" alt="image-20230720100707696"></p><p>终端输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">tensorboard --logdir=logs<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">TensorFlow installation not found - running with reduced feature set.</span><br><span class="hljs-string">Serving TensorBoard on localhost; to expose to the network, use a proxy or pass --bind_all</span><br><span class="hljs-string">TensorBoard 2.11.2 at http://localhost:6006/ (Press CTRL+C to quit)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>指定端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tensorboard --logdir=logs --port=<span class="hljs-number">6007</span><br></code></pre></td></tr></table></figure><p>访问端口，显示图像</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726825.png" alt="image-20230720101433132" style="zoom:50%;" /><p>绘制y&#x3D;2x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y = 2x&quot;</span>, <span class="hljs-number">2</span>*i, i)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726701.png" alt="image-20230720101628747" style="zoom:50%;" /><p>如果不改变add_scalar()函数的标题只改变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y = 2x&quot;</span>, <span class="hljs-number">3</span>*i, i)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726734.png" alt="image-20230720101754325" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726357.png" alt="image-20230720101845019"></p><p>向writer中写入新的事件，同时也记录了上一个事件</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>一、删除logs下的文件，重新启动程序</p><p>二、创建子文件夹，也就是说创建新的SummaryWriter(“新文件夹”)</p><h1 id="8-TensorBoard的使用（二）add-image-的使用-常用来观察训练结果"><a href="#8-TensorBoard的使用（二）add-image-的使用-常用来观察训练结果" class="headerlink" title="8 TensorBoard的使用（二）add image()的使用(常用来观察训练结果)"></a>8 TensorBoard的使用（二）add image()的使用(常用来观察训练结果)</h1><p>控制台输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">image_path = <span class="hljs-string">&quot;data/train/ants_image/0013035.jpg&quot;</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-comment"># 读取图片</span><br>img = Image.<span class="hljs-built_in">open</span>(image_path)<br><span class="hljs-comment"># 查看类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img))<br><span class="hljs-comment"># &lt;class PIL.JpegImagePlugin.JpegImageFile&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="利用numpy-array-，对PIL图片进行转换"><a href="#利用numpy-array-，对PIL图片进行转换" class="headerlink" title="利用numpy.array()，对PIL图片进行转换"></a>利用numpy.array()，对PIL图片进行转换</h2><p>NumPy型图片是指使用NumPy库表示和处理的图像。NumPy是一个广泛使用的Python库，用于科学计算和数据处理。它提供了一个多维数组对象（ndarray），可以用于存储和操作大量的数值数据。在图像处理领域中，NumPy数组通常用来表示图像的像素值。</p><p>NumPy数组可以是一维的（灰度图像）或二维的（彩色图像）。对于彩色图像，通常使用三维的NumPy数组表示，其中第一个维度表示图像的行数，第二个维度表示图像的列数，第三个维度表示图像的通道数（例如，红、绿、蓝通道）</p><h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>img_array = np.array(img)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="文件内"><a href="#文件内" class="headerlink" title="文件内"></a>文件内</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从torch.utils.tensorboard模块中导入SummaryWriter类</span><br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 将事件和文件存储到&quot;logs&quot;文件夹下</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>image_path = <span class="hljs-string">&quot;data/train/ants_image/0013035.jpg&quot;</span><br>img_PIL = Image.<span class="hljs-built_in">open</span>(image_path)<br>img_array = np.array(img_PIL)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-comment"># (H,W,C)——(高度，宽度，通道)</span><br><span class="hljs-built_in">print</span>(img_array.shape)<br><span class="hljs-comment"># 需要指定格式</span><br>writer.add_image(<span class="hljs-string">&quot;test&quot;</span>, img_array, <span class="hljs-number">1</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span> )<br></code></pre></td></tr></table></figure><p>从PIL到numpy, 需要在add image()中指定shape中每一个数字&#x2F;维表示的含义。</p><p>打开端口，显示图像</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201726463.png" alt="image-20230720104855434" style="zoom:50%;" /><p>添加蜜蜂图片，修改步长为2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">image_path = <span class="hljs-string">&quot;data/train/bees_image/16838648_415acd9e3f.jpg&quot;</span><br>writer.add_image(<span class="hljs-string">&quot;test&quot;</span>, img_array, <span class="hljs-number">2</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span> )<br></code></pre></td></tr></table></figure><img src="C:/Users/ge'yu/AppData/Roaming/Typora/typora-user-images/image-20230720105220800.png" alt="image-20230720105220800" style="zoom:50%;" /><p>更换标题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">writer.add_image(<span class="hljs-string">&quot;train&quot;</span>, img_array, <span class="hljs-number">1</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span> )<br></code></pre></td></tr></table></figure><p>![image-20230720105351794](<a href="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning">https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning</a> note&#x2F;Day2202307201726332.png)</p><h1 id="9-Transforms-的使用（一）"><a href="#9-Transforms-的使用（一）" class="headerlink" title="9 Transforms 的使用（一）"></a>9 Transforms 的使用（一）</h1><h2 id="transforms结构及用法"><a href="#transforms结构及用法" class="headerlink" title="transforms结构及用法"></a>transforms结构及用法</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727532.png" alt="image-20230720112701203" style="zoom:50%;" /><p>ctrl+p可提示函数需要什么参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span>  torchvision <span class="hljs-keyword">import</span> transforms<br><br><span class="hljs-comment"># 通过transform.ToTensor去解决两个问题</span><br><span class="hljs-comment"># 1、transform该如何使用</span><br><span class="hljs-comment"># 2、为什么需要Tensor这种数据类型</span><br><br>img_path = <span class="hljs-string">&quot;train/ants_image/0013035.jpg&quot;</span><br>img = Image.<span class="hljs-built_in">open</span>(img_path)<br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-comment"># 输出：&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=768x512 at 0x1DCFAD7CFC8&gt;</span><br><span class="hljs-comment"># 创建Totensor对象</span><br>tensor_trans = transforms.ToTensor()<br>tensor_img = tensor_trans(img)<br><br><span class="hljs-built_in">print</span>(tensor_img)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出：</span><br><span class="hljs-string">tensor([[[0.3137, 0.3137, 0.3137,  ..., 0.3176, 0.3098, 0.2980],</span><br><span class="hljs-string">         [0.3176, 0.3176, 0.3176,  ..., 0.3176, 0.3098, 0.2980],</span><br><span class="hljs-string">         [0.3216, 0.3216, 0.3216,  ..., 0.3137, 0.3098, 0.3020],</span><br><span class="hljs-string">         ...,</span><br><span class="hljs-string">         [0.3412, 0.3412, 0.3373,  ..., 0.1725, 0.3725, 0.3529],</span><br><span class="hljs-string">         [0.3412, 0.3412, 0.3373,  ..., 0.3294, 0.3529, 0.3294],</span><br><span class="hljs-string">         [0.3412, 0.3412, 0.3373,  ..., 0.3098, 0.3059, 0.3294]],</span><br><span class="hljs-string"></span><br><span class="hljs-string">        [[0.5922, 0.5922, 0.5922,  ..., 0.5961, 0.5882, 0.5765],</span><br><span class="hljs-string">         [0.5961, 0.5961, 0.5961,  ..., 0.5961, 0.5882, 0.5765],</span><br><span class="hljs-string">         [0.6000, 0.6000, 0.6000,  ..., 0.5922, 0.5882, 0.5804],</span><br><span class="hljs-string">         ...,</span><br><span class="hljs-string">         [0.6275, 0.6275, 0.6235,  ..., 0.3608, 0.6196, 0.6157],</span><br><span class="hljs-string">         [0.6275, 0.6275, 0.6235,  ..., 0.5765, 0.6275, 0.5961],</span><br><span class="hljs-string">         [0.6275, 0.6275, 0.6235,  ..., 0.6275, 0.6235, 0.6314]],</span><br><span class="hljs-string"></span><br><span class="hljs-string">        [[0.9137, 0.9137, 0.9137,  ..., 0.9176, 0.9098, 0.8980],</span><br><span class="hljs-string">         [0.9176, 0.9176, 0.9176,  ..., 0.9176, 0.9098, 0.8980],</span><br><span class="hljs-string">         [0.9216, 0.9216, 0.9216,  ..., 0.9137, 0.9098, 0.9020],</span><br><span class="hljs-string">         ...,</span><br><span class="hljs-string">         [0.9294, 0.9294, 0.9255,  ..., 0.5529, 0.9216, 0.8941],</span><br><span class="hljs-string">         [0.9294, 0.9294, 0.9255,  ..., 0.8863, 1.0000, 0.9137],</span><br><span class="hljs-string">         [0.9294, 0.9294, 0.9255,  ..., 0.9490, 0.9804, 0.9137]]])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="10Transforms的使用（二）"><a href="#10Transforms的使用（二）" class="headerlink" title="10Transforms的使用（二）"></a>10Transforms的使用（二）</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727314.png" alt="image-20230720113024746" style="zoom:50%;" /><p>Tensor包括深度学习需要的参数</p><h2 id="下载Opencv"><a href="#下载Opencv" class="headerlink" title="下载Opencv"></a>下载Opencv</h2><p>终端输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install opencv-python<br></code></pre></td></tr></table></figure><p>控制台</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br>cv_img = cv2.imread(img_path)<br></code></pre></td></tr></table></figure><h2 id="利用Tensor-img显示图片"><a href="#利用Tensor-img显示图片" class="headerlink" title="利用Tensor_img显示图片"></a>利用Tensor_img显示图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span>  torchvision <span class="hljs-keyword">import</span> transforms<br><br>img_path = <span class="hljs-string">&quot;train/ants_image/0013035.jpg&quot;</span><br>img = Image.<span class="hljs-built_in">open</span>(img_path)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-comment"># 输出：&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=768x512 at 0x1DCFAD7CFC8&gt;</span><br><span class="hljs-comment"># 创建Totensor对象</span><br>tensor_trans = transforms.ToTensor()<br>tensor_img = tensor_trans(img)<br><br>writer.add_image(<span class="hljs-string">&quot;Tensor_img&quot;</span>, tensor_img)<br><br>writer.close()<br></code></pre></td></tr></table></figure><p>终端输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tensorboard --logdir=logs<br></code></pre></td></tr></table></figure><p>打开端口，显示图片</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727795.png" alt="image-20230720115601972" style="zoom:67%;" /><h1 id="11-常见的Transforms（一）"><a href="#11-常见的Transforms（一）" class="headerlink" title="11 常见的Transforms（一）"></a>11 常见的Transforms（一）</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727366.png" alt="image-20230720141126141" style="zoom:67%;" /><h2 id="Pytorch中call-的用法"><a href="#Pytorch中call-的用法" class="headerlink" title="Pytorch中call()的用法"></a>Pytorch中call()的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__call__&quot;</span> + <span class="hljs-string">&quot;hello&quot;</span> + name)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>+name)<br><br>person = Person()<br>person(<span class="hljs-string">&quot;zhangsan&quot;</span>)<br>person.hello(<span class="hljs-string">&quot;list&quot;</span>)<br><span class="hljs-comment"># __call__可以采用对象(参数)的方式调用，不用加.方法名</span><br></code></pre></td></tr></table></figure><h2 id="ToTensor的使用"><a href="#ToTensor的使用" class="headerlink" title="ToTensor的使用"></a>ToTensor的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;train/ants_image/0013035.jpg&quot;</span>)<br><span class="hljs-built_in">print</span>(img)<br><br>trans_totensor = transforms.ToTensor()<br>img_tensor = trans_totensor(img)<br>writer.add_image(<span class="hljs-string">&quot;Totensor&quot;</span>, img_tensor)<br>writer.close()<br></code></pre></td></tr></table></figure><h2 id="Normalize-归一化-的使用"><a href="#Normalize-归一化-的使用" class="headerlink" title="Normalize() 归一化 的使用"></a>Normalize() 归一化 的使用</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727404.png" alt="image-20230720143339908" style="zoom:67%;" /><p>mean是均值，std是标准差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 每个通道都有均值和标准差</span><br><span class="hljs-built_in">print</span>(img_tensor[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>trans_norm = transforms.Normalize([<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>])<br>img_norm = trans_norm(img_tensor)<br><span class="hljs-built_in">print</span>((img_norm[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出</span><br><span class="hljs-string">tensor(0.3137)</span><br><span class="hljs-string">tensor(-0.3725)</span><br><span class="hljs-string">0.3137*2-1=-0.3725(四舍五入后结果)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>输出归一化结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">writer.add_image(<span class="hljs-string">&quot;Normalize&quot;</span>, img_norm)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727313.png" alt="image-20230720143837709" style="zoom:67%;" /><h1 id="12-常见的Transforms（二）"><a href="#12-常见的Transforms（二）" class="headerlink" title="12 常见的Transforms（二）"></a>12 常见的Transforms（二）</h1><h2 id="Resize-的使用"><a href="#Resize-的使用" class="headerlink" title="Resize()的使用"></a>Resize()的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(img.size)<br><span class="hljs-comment"># Resize有两个括号(h,w)</span><br>trans_resize = transforms.Resize((<span class="hljs-number">480</span>, <span class="hljs-number">480</span>))<br>img_resize = trans_resize(img)<br><span class="hljs-built_in">print</span>(img_resize)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出</span><br><span class="hljs-string">(768, 512)</span><br><span class="hljs-string">&lt;PIL.Image.Image image mode=RGB size=480x480 at 0x1C6224EBE88&gt;&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>将PIL类型的img_resize转为tensor类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(img.size)<br><span class="hljs-comment"># Resize有两个括号(h,w)</span><br>trans_resize = transforms.Resize((<span class="hljs-number">480</span>, <span class="hljs-number">480</span>))<br><span class="hljs-comment"># img PIL -&gt; resize -&gt; img_resize PIL</span><br>img_resize = trans_resize(img)<br><span class="hljs-comment"># img_resieze PIL -&gt; totensor -&gt; img_resize tensor</span><br>img_resize = trans_totensor(img_resize)<br>writer.add_image(<span class="hljs-string">&quot;Resize&quot;</span>, img_resize, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(img_resize)<br></code></pre></td></tr></table></figure><p>图片大小改变</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727271.png" alt="image-20230720150314504" style="zoom:67%;" /><h2 id="Compose-的使用"><a href="#Compose-的使用" class="headerlink" title="Compose()的使用"></a>Compose()的使用</h2><p>将不同的操作组合起来，按顺序执行。前一步的输出是下一步的输入，要对应。</p><p>Compose()中的参数需要是一个列表。Python中，列表的表示形式为[数据1，数据2,…]。在Composel中，数据需要是transforms类型，所以得到，Compose([transforms参数1，transforms参数2,…])</p><h2 id="RandomCrop-随机裁剪的用法"><a href="#RandomCrop-随机裁剪的用法" class="headerlink" title="RandomCrop()随机裁剪的用法"></a>RandomCrop()随机裁剪的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">trans_random = transforms.RandomCrop(<span class="hljs-number">512</span>)<br>trans_compose_2 = transforms.Compose([trans_random, trans_totensor])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img_crop = trans_compose_2(img)<br>    writer.add_image(<span class="hljs-string">&quot;RandomCrop&quot;</span>, img_crop, i)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727464.png" alt="image-20230720152147175" style="zoom:67%;" /><h2 id="总结使用方法"><a href="#总结使用方法" class="headerlink" title="总结使用方法"></a>总结使用方法</h2><ul><li>关注输入和输出类型</li><li>多看官方文档</li><li>关注方法需要什么参数</li><li>不知道返回值的时候<ul><li>print()</li><li>print(type())</li><li>debug</li></ul></li></ul><h1 id="13-torchvision中的数据集使用"><a href="#13-torchvision中的数据集使用" class="headerlink" title="13 torchvision中的数据集使用"></a>13 torchvision中的数据集使用</h1><h2 id="下载训练集和测试集"><a href="#下载训练集和测试集" class="headerlink" title="下载训练集和测试集"></a>下载训练集和测试集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-comment"># root表示数据集路径;train为true表示训练集,false表示测试集;download为true会自动从官网下载</span><br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, download=<span class="hljs-literal">True</span>)<br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, dowmload=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>可以用迅雷加快下载速度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(test_set[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># 表示有img 和 target两个属性</span><br><span class="hljs-comment"># 输出(&lt;PIL.Image.Image image mode=RGB size=32x32 at 0x22BF14AA548&gt;, 3)</span><br></code></pre></td></tr></table></figure><p>classes内表示每种target对应哪种类别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(test_set.classes)<br>img, target = test_set[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-built_in">print</span>(target)<br><span class="hljs-comment"># target对应的类型</span><br><span class="hljs-built_in">print</span>(test_set.classes[target])<br><span class="hljs-comment"># 显示图片</span><br>img.show()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出</span><br><span class="hljs-string">[&#x27;airplane&#x27;, &#x27;automobile&#x27;, &#x27;bird&#x27;, &#x27;cat&#x27;, &#x27;deer&#x27;, &#x27;dog&#x27;, &#x27;frog&#x27;, &#x27;horse&#x27;, &#x27;ship&#x27;, &#x27;truck&#x27;]</span><br><span class="hljs-string">&lt;PIL.Image.Image image mode=RGB size=32x32 at 0x2622292ABC8&gt;</span><br><span class="hljs-string">3</span><br><span class="hljs-string">cat</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="添加Transform参数"><a href="#添加Transform参数" class="headerlink" title="添加Transform参数"></a>添加Transform参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset_transform = torchvision.transforms.Compose([<br>    torchvision.transforms.ToTensor()<br><br>])<br><span class="hljs-comment"># root表示数据集路径;train为true表示训练集,false表示测试集;download为true会自动从官网下载</span><br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>)<br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(test_set[<span class="hljs-number">0</span>])<br>writer = SummaryWriter(<span class="hljs-string">&quot;p10&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img, target = test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test_set&quot;</span>, img, i)<br><br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201727933.png" alt="image-20230720161746404" style="zoom:67%;" /><h1 id="14-DataLoader的使用"><a href="#14-DataLoader的使用" class="headerlink" title="14 DataLoader的使用"></a>14 DataLoader的使用</h1><h2 id="测试数据集中第一张图片及target"><a href="#测试数据集中第一张图片及target" class="headerlink" title="测试数据集中第一张图片及target"></a>测试数据集中第一张图片及target</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 准备的测试数据集</span><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">4</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 测试数据集中第一张图片及target</span><br>img, target = test_data[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(img.shape)<br><span class="hljs-built_in">print</span>(target)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.Size([3, 32, 32])</span><br><span class="hljs-string">3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201728188.png" alt="image-20230720164801159" style="zoom:67%;" /><h2 id="理解batch-size"><a href="#理解batch-size" class="headerlink" title="理解batch_size"></a>理解batch_size</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>    imgs, targets = data<br>    <span class="hljs-built_in">print</span>(imgs,shape)<br>    <span class="hljs-built_in">print</span>(targets)<br> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> # 每次循环取4张图片，每张图片3个通道，32*32</span><br><span class="hljs-string"> torch.Size([4, 3, 32, 32])</span><br><span class="hljs-string"> # 每张图片的target</span><br><span class="hljs-string">tensor([0, 3, 0, 2])</span><br><span class="hljs-string"> &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="更改batch-size-x3D-64"><a href="#更改batch-size-x3D-64" class="headerlink" title="更改batch_size&#x3D;64"></a>更改batch_size&#x3D;64</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 每次取64张图片</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>    imgs, targets = data<br>    <span class="hljs-comment"># 注意是add_images</span><br>    writer.add_images(<span class="hljs-string">&quot;test_data&quot;</span>, imgs, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201728884.png" alt="image-20230720171254181" style="zoom:67%;" /><p>drop_last设置为false，所以不会丢掉数量小于batch_seze的组。</p><h2 id="理解shuffle"><a href="#理解shuffle" class="headerlink" title="理解shuffle"></a>理解shuffle</h2><p>添加epoch</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># shuffle设置为false</span><br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">False</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">False</span>)<br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br>    step = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>        imgs, targets = data<br>        writer.add_images(<span class="hljs-string">&quot;Epoch: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch), imgs, step)<br>        step = step + <span class="hljs-number">1</span><br><br>writer.close()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;Epoch: &#123;&#125;&quot;.format(epoch)是一种字符串格式化的方法，在Python中常用于将变量的值插入到字符串中的特定位置。</span><br><span class="hljs-string">在这个例子中，&#123;&#125;是一个占位符，用于表示待插入变量的位置。&quot;.format(epoch)&quot;表示通过.format()方法将变量epoch的值插入到占位符的位置。所生成的最终字符串将包含&quot;Epoch: &quot;和epoch的值。</span><br><span class="hljs-string">举个例子，如果epoch的值是10，那么该代码将生成字符串&quot;Epoch: 10&quot;。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>shuffle为false时两轮图片加载中随机选取结果相同</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day2202307201728587.png" alt="image-20230720172220235" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch Learning 1</title>
      <link href="/2024/02/20/PyTorch/notebook/Pytorch%20Learning%201/"/>
      <url>/2024/02/20/PyTorch/notebook/Pytorch%20Learning%201/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Pytorch-环境配置"><a href="#1-Pytorch-环境配置" class="headerlink" title="1 Pytorch 环境配置"></a>1 Pytorch 环境配置</h1><h2 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda 安装</h2><h2 id="显卡配置-驱动-CUDA-Toolkit"><a href="#显卡配置-驱动-CUDA-Toolkit" class="headerlink" title="显卡配置(驱动+CUDA Toolkit)"></a>显卡配置(驱动+CUDA Toolkit)</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201237544.png" alt="image-20230718205108412" style="zoom: 33%;" /><h2 id="有序地管理环境"><a href="#有序地管理环境" class="headerlink" title="有序地管理环境"></a>有序地管理环境</h2><p>初始环境：base</p><p>切换环境使用不同的pytorch版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//输入命令，安装python</span><br>conda create -n pytorch python=<span class="hljs-number">3.7</span><br>    <span class="hljs-comment">//输入命令，激活环境</span><br>    conda activate pytorch<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238878.png" alt="image-20230718210634806" style="zoom:67%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//查看工具包</span><br>pip <span class="hljs-built_in">list</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238876.png" alt="image-20230718210727247" style="zoom: 67%;" /><h2 id="Pytorch安装"><a href="#Pytorch安装" class="headerlink" title="Pytorch安装"></a>Pytorch安装</h2><p>官网：<a href="https://pytorch.org/">https://pytorch.org/</a> </p><p>任务管理器查看是否有英伟达显卡</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238020.png" alt="image-20230718212126175" style="zoom: 33%;" /><p>CUDA推荐使用9.2</p><p>查看驱动版本</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238219.png" alt="image-20230718212421748" style="zoom: 50%;" /><p>大于396.26可使用</p><p>pytorch环境下输入命令，安装9.2版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda install pytorch torchvision cudatoolkit=9.2 -c pytorch -c defaults<br>c numba/label/dev<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238093.png" alt="image-20230718213642078"></p><p>报错，因为下载速度太慢</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238193.png" alt="image-20230718215019872"></p><p>清华源可以下载cpu版本：<a href="https://blog.csdn.net/zzq060143/article/details/88042075">https://blog.csdn.net/zzq060143/article/details/88042075</a></p><p>如果找不到源，需要把命令中的 https 改成 http</p><p>下载gpu版本教程：<a href="https://www.bilibili.com/read/cv15186754">https://www.bilibili.com/read/cv15186754</a></p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238461.png" alt="image-20230718233907433" style="zoom:67%;" /><p>返回时False，因为装的是cpu版本，gpu版本才返回true。cpu版本学习阶段可以使用。</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238202.png" alt="image-20230719121436991"></p><h1 id="2-Python编辑器的选择"><a href="#2-Python编辑器的选择" class="headerlink" title="2 Python编辑器的选择"></a>2 Python编辑器的选择</h1><h2 id="Pytorch安装-1"><a href="#Pytorch安装-1" class="headerlink" title="Pytorch安装"></a>Pytorch安装</h2><p>官网：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p><p>下载Community版本</p><h2 id="Pytorch-配置"><a href="#Pytorch-配置" class="headerlink" title="Pytorch 配置"></a>Pytorch 配置</h2><p>create new project</p><p>需要自己配置解释器</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238045.png" alt="image-20230719100104852" style="zoom:50%;" /><p>添加python.exe</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201238038.png" alt="image-20230719103201967" style="zoom:50%;" /><p>Conda Environment可能找不到python.exe，选择System Environment添加</p><p><a href="https://blog.csdn.net/weixin_43537097/article/details/130931535">https://blog.csdn.net/weixin_43537097/article/details/130931535</a></p><p>打开Python Consle</p><p>import torch</p><p>输入torch.cuda.is_available()，CPU版本返回false</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239602.png" alt="image-20230719103754349" style="zoom: 50%;" /><p>右侧工具栏可实时查看变量</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239825.png" alt="image-20230719104030691" style="zoom:50%;" /><h2 id="Jupyter-安装"><a href="#Jupyter-安装" class="headerlink" title="Jupyter 安装"></a>Jupyter 安装</h2><p>在Pytorch环境中安装Jupyter</p><p>在pytorch环境中安装一个包</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239084.png" alt="image-20230719131043395" style="zoom:67%;" /><p>运行Jupyter</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239811.png" alt="image-20230719131433335" style="zoom: 50%;" /><p>创建代码</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239442.png" alt="image-20230719131509833" style="zoom:50%;" /><p>shift + enter运行代码块</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201239418.png" alt="image-20230719131558361" style="zoom:50%;" /><h1 id="3-Pytorch学习中的两大法宝函数"><a href="#3-Pytorch学习中的两大法宝函数" class="headerlink" title="3 Pytorch学习中的两大法宝函数"></a>3 Pytorch学习中的两大法宝函数</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254546.png" alt="image-20230719140047441" style="zoom:50%;" />   <p><strong>总结：</strong><br>    dir()函数，能让我们知道工具箱以及工具箱中的分隔区有什么东西。<br>    help()函数，能让我们知道每个工具是如何使用的，工具的使用方法。</p><h2 id="打开Pycharm，测试这两个工具函数"><a href="#打开Pycharm，测试这两个工具函数" class="headerlink" title="打开Pycharm，测试这两个工具函数"></a>打开Pycharm，测试这两个工具函数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dir</span>(torch.cuda.is_available)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254923.png" alt="image-20230719141153933" style="zoom:50%;" /><p>前后有双下划线，表明变量不能修改，说明是函数，不是分割区</p><p>dir和help里面函数后面的括号记得去掉</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">help</span>(torch.cuda.is_available)<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254498.png" alt="image-20230719141419656" style="zoom:67%;" /><h1 id="4-Pycahrm及Jupyter使用对比"><a href="#4-Pycahrm及Jupyter使用对比" class="headerlink" title="4 Pycahrm及Jupyter使用对比"></a>4 Pycahrm及Jupyter使用对比</h1><h2 id="在Pycharm中新建项目"><a href="#在Pycharm中新建项目" class="headerlink" title="在Pycharm中新建项目"></a>在Pycharm中新建项目</h2><h3 id="在File-Setting中可查看该项目是否有Pytorch环境"><a href="#在File-Setting中可查看该项目是否有Pytorch环境" class="headerlink" title="在File-Setting中可查看该项目是否有Pytorch环境"></a>在File-Setting中可查看该项目是否有Pytorch环境</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254410.png" alt="image-20230719141734242" style="zoom:50%;" /><h3 id="新建Python文件"><a href="#新建Python文件" class="headerlink" title="新建Python文件"></a>新建Python文件</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201254822.png" alt="image-20230719141855063" style="zoom:50%;" /><h3 id="为Python文件设置Python解释器"><a href="#为Python文件设置Python解释器" class="headerlink" title="为Python文件设置Python解释器"></a>为Python文件设置Python解释器</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255941.png" alt="image-20230719142138096" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255929.png" alt="image-20230719142305822" style="zoom:50%;" /><p>运行成功</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255878.png" alt="image-20230719142342738" style="zoom:50%;" /><p>也可以直接在Python控制台输入语句，直接输出结果</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255536.png" alt="image-20230719142538947" style="zoom:50%;" /><h2 id="Jupyter新建项目及使用"><a href="#Jupyter新建项目及使用" class="headerlink" title="Jupyter新建项目及使用"></a>Jupyter新建项目及使用</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255848.png" alt="image-20230719142709123" style="zoom:50%;" /><h2 id="三种代码编辑方式对比"><a href="#三种代码编辑方式对比" class="headerlink" title="三种代码编辑方式对比"></a>三种代码编辑方式对比</h2><p>用三种方式运行同一段错误代码</p><h3 id="Python文件"><a href="#Python文件" class="headerlink" title="Python文件"></a>Python文件</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255869.png" alt="image-20230719142919805" style="zoom: 50%;" /><p>报错，字符串和整型相加不允许</p><p>修改b后，运行成功</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255241.png" alt="image-20230719143050346" style="zoom:50%;" /><h3 id="Python控制台"><a href="#Python控制台" class="headerlink" title="Python控制台"></a>Python控制台</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255322.png" alt="image-20230719143236205" style="zoom:50%;" /><p>修改b后</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255432.png" alt="image-20230719143314888" style="zoom:67%;" /><p>如果发生错误，代码可读性下降</p><p>shift+enter可以以多行为一个块运行</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255933.png" alt="image-20230719143806537"></p><h3 id="Jupyter"><a href="#Jupyter" class="headerlink" title="Jupyter"></a>Jupyter</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255001.png" alt="image-20230719143423641" style="zoom:50%;" /><p>修改b后</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255789.png" alt="image-20230719143509947" style="zoom:67%;" /><h3 id="·总结"><a href="#·总结" class="headerlink" title="·总结"></a>·总结</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255357.png" alt="image-20230719144020108" style="zoom:50%;" /><h1 id="5-Pytorch加载数据初认识"><a href="#5-Pytorch加载数据初认识" class="headerlink" title="5 Pytorch加载数据初认识"></a>5 Pytorch加载数据初认识</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201255707.png" alt="image-20230719145042656" style="zoom:50%;" /><h2 id="下载蚂蚁-x2F-蜜蜂数据集"><a href="#下载蚂蚁-x2F-蜜蜂数据集" class="headerlink" title="下载蚂蚁&#x2F;蜜蜂数据集"></a>下载蚂蚁&#x2F;蜜蜂数据集</h2><h2 id="创建read-data-py文件"><a href="#创建read-data-py文件" class="headerlink" title="创建read_data.py文件"></a>创建read_data.py文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br></code></pre></td></tr></table></figure><p>Jupyter中可查看Dateset内的函数</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256186.png" alt="image-20230719150017028" style="zoom:50%;" /><h1 id="6-Dataset类代码实战"><a href="#6-Dataset类代码实战" class="headerlink" title="6 Dataset类代码实战"></a>6 Dataset类代码实战</h1><p>第一次打开终端报错解决：<a href="https://blog.csdn.net/qq_33405617/article/details/119894883">https://blog.csdn.net/qq_33405617/article/details/119894883</a></p><h2 id="导入Image"><a href="#导入Image" class="headerlink" title="导入Image"></a>导入Image</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br></code></pre></td></tr></table></figure><p>将 “蚂蚁&#x2F;蜜蜂” 数据集复制到项目中</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256929.png" alt="image-20230719153011629" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256692.png" alt="image-20230719153152359" style="zoom:67%;" /><h2 id="Python控制台中读取数据"><a href="#Python控制台中读取数据" class="headerlink" title="Python控制台中读取数据"></a>Python控制台中读取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br></code></pre></td></tr></table></figure><p>复制图片绝对路径，\改成\表示转义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">img_path = <span class="hljs-string">&quot;D:\\PytorchLearning\\dataset\\train\\ants\\0013035.jpg&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256227.png" alt="image-20230719153920417"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取图片</span><br>img = Image.<span class="hljs-built_in">open</span>(img_path)<br></code></pre></td></tr></table></figure><p><img src="C:/Users/ge'yu/AppData/Roaming/Typora/typora-user-images/image-20230719154131158.png" alt="image-20230719154131158"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">img.size<br><span class="hljs-comment"># Out[5]: (768, 512)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看图片</span><br>img.show()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256350.png" alt="image-20230719154934779" style="zoom:50%;" /><h2 id="获取图片名称及路径"><a href="#获取图片名称及路径" class="headerlink" title="获取图片名称及路径"></a>获取图片名称及路径</h2><h3 id="控制台方式"><a href="#控制台方式" class="headerlink" title="控制台方式"></a>控制台方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ants文件夹相对路径</span><br>dir_path = <span class="hljs-string">&quot;dataset/train/ants&quot;</span><br><span class="hljs-comment"># 导入os</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 将ants文件夹下的图片生成列表</span><br>img_path_list = os.listdir(dir_path)<br><span class="hljs-comment"># 获取第一张图片</span><br>img_path_list[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># Out[10]: &#x27;0013035.jpg&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="python文件方式"><a href="#python文件方式" class="headerlink" title="python文件方式"></a>python文件方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python文件中.</span><br><span class="hljs-comment"># 每张图片的label就是所在的文件夹的名称</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, label_dir</span>):<br><span class="hljs-comment"># 控制台</span><br><span class="hljs-keyword">import</span> os<br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>label_dir = <span class="hljs-string">&quot;ants&quot;</span><br><span class="hljs-comment"># 拼接路径</span><br>path = os.path.join(root_dir, label_dir)<br><br><span class="hljs-comment"># pyhton文件修改init函数</span><br><span class="hljs-comment"># 函数之间的参数不能相互使用，但是self制定了一个类中的全局变量，相当于c++的static</span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, label_dir</span>):<br>        self.root_dir = root_dir<br>        self.label_dir = label_dir<br>        self.path = os.path.join(self.root_dir, self.label_dir)<br>        <span class="hljs-comment"># 所有图片名称列表</span><br>        self.img_path = os.listdir(self.path)<br>        <br> <span class="hljs-comment"># 控制台中</span><br>img_path = os.listdir(path)<br><br><span class="hljs-comment"># 获取每一个图片</span><br><span class="hljs-comment"># 修改 —__getitem__函数</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-comment"># 图片名</span><br>        img_name = self.img_path[idx]<br>        <span class="hljs-comment"># 每个图片的相对路径</span><br>        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)<br>        <span class="hljs-comment"># 根据图片路径读取图片</span><br>         img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        <span class="hljs-comment"># 图片的标签</span><br>         label = self.label_dir<br>         <span class="hljs-keyword">return</span> img, label<br><br> <span class="hljs-comment"># 控制台检验</span><br>idx = <span class="hljs-number">0</span><br><span class="hljs-comment"># 注意这里是中括号</span><br>img_name = img_path[idx]<br>img_item_path = os.path.join(root_dir, label_dir, img_name)<br> img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br></code></pre></td></tr></table></figure><h3 id="数据集长度"><a href="#数据集长度" class="headerlink" title="数据集长度"></a>数据集长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img.path)<br></code></pre></td></tr></table></figure><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建实例</span><br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>ants_label_dir = <span class="hljs-string">&quot;ants&quot;</span><br>ants_dataset = MyData(root_dir, ants_label_dir)<br></code></pre></td></tr></table></figure><h3 id="控制台运行"><a href="#控制台运行" class="headerlink" title="控制台运行"></a>控制台运行</h3><p>对象中包含init中的所有变量</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256144.png" alt="image-20230719162922969" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>ants_dataset[<span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Out[5]: (&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=768x512&gt;, &#x27;ants&#x27;)</span><br><span class="hljs-string">这段代码表示访问了一个名为&quot;ants_dataset&quot;的数据集中的第一个数据项。该数据项包含一张图片和一个标签。</span><br><span class="hljs-string">图片格式为JPEG，具体尺寸为768x512像素，采用RGB颜色模式。标签为&quot;ants&quot;，表示这张图片中的内容是蚂蚁（ants）。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 分别获取图片和标签</span><br>img, label = ants_dataset[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h3 id="同时有蚂蚁和蜜蜂数据集"><a href="#同时有蚂蚁和蜜蜂数据集" class="headerlink" title="同时有蚂蚁和蜜蜂数据集"></a>同时有蚂蚁和蜜蜂数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建实例</span><br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>ants_label_dir = <span class="hljs-string">&quot;ants&quot;</span><br>bees_label_dir = <span class="hljs-string">&quot;bees&quot;</span><br>ants_dataset = MyData(root_dir, ants_label_dir)<br>bees_dataset = MyData(root_dir, bees_label_dir)<br></code></pre></td></tr></table></figure><h3 id="两个数据集集合"><a href="#两个数据集集合" class="headerlink" title="两个数据集集合"></a>两个数据集集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_dataset = ants_dataset + bees_dataset<br></code></pre></td></tr></table></figure><h2 id="txt标签方式"><a href="#txt标签方式" class="headerlink" title="txt标签方式"></a>txt标签方式</h2><p>修改数据集文件名，添加标签文件夹</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256435.png" alt="image-20230719165632515" style="zoom:67%;" /><h2 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h2><p>标签txt的名称与图片名称一致，txt内容为标签值</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Pytorch/Learning%20note/Day1202307201256609.png" alt="image-20230719165752353" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷键及配置</title>
      <link href="/2024/02/20/IDEA/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/02/20/IDEA/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>settings:ctrl alt + s</li><li>project structure: ctrl+alt+shift+s</li><li>代码提示：默认ctrl +空格，在settings中修改为alt+&#x2F;</li><li>alt+insert新增或生成代码（构造器等），在左边框中使用可new新文件</li><li>alt+回车————导入包，代码自动修正（new对象时先写new再补全）</li><li>ctrl+alt+L  格式化代码</li><li>ctrl+F 查找文本</li><li>ctrl+R替换文本</li><li>双击shift 查找任何地方（查源码）</li><li>crtl+Y 删除行</li><li>ctrl+D 复制行</li><li>ctrl+&#x2F;或ctrl+shift+&#x2F;  注释（&#x2F;&#x2F;或者&#x2F;<em>···</em>&#x2F;）添加和删除都可以</li><li>shift+enter 快速换行</li><li>ctrl+shift+enter 补上分号</li><li>shift+F7  debug时进入指定方法</li><li>psvm回车main方法</li><li>sout回车产生打印语句</li><li>shift + f6 改变类名，文件重命名</li><li>f2快速定位到报错位置</li><li>同一列编辑，按住alt+shift,点击同一列</li><li>shift+f6，所以同一变量都改变</li><li>方法名旁按住ctrl,点击方法名可跳转至该方法代码</li><li>alt +字母，点击某个单词</li><li>ctrl + w 选中光标所在单词</li><li>ctrl+o 重写</li><li>shift+f7，debug时智能步入方法</li><li>shift+f10 运行代码</li></ul><h3 id="生成带参数和返回值的注释"><a href="#生成带参数和返回值的注释" class="headerlink" title="生成带参数和返回值的注释"></a>生成带参数和返回值的注释</h3><p>&#x2F;** + enter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/**<br> * <br> * @param qryList<br> * @param param<br> * @return<br> */<br></code></pre></td></tr></table></figure><h3 id="try-catch——ctrl-alt-T"><a href="#try-catch——ctrl-alt-T" class="headerlink" title="try-catch——ctrl alt + T"></a>try-catch——ctrl alt + T</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/IDEA/Tutorial/202307261800469.png" alt="img" style="zoom:50%;" /><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/IDEA/Tutorial/202307261800350.png" alt="img" style="zoom:50%;" /><h2 id="查看代码作者"><a href="#查看代码作者" class="headerlink" title="查看代码作者"></a><strong>查看代码作者</strong></h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/IDEA/Tutorial/202307261800816.png" alt="img" style="zoom:50%;" /><h2 id="格式化代码-Ctrl-Alt-L"><a href="#格式化代码-Ctrl-Alt-L" class="headerlink" title="格式化代码 Ctrl Alt + L"></a><strong>格式化代码 Ctrl Alt + L</strong></h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/IDEA/Tutorial/202307261800304.png" alt="img" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建教程（二）</title>
      <link href="/2024/02/20/Hexo/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/02/20/Hexo/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>MyBlog根目录下使用git bash命令打开git窗口。执行下述命令，安装主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git clone -b master https:<span class="hljs-comment">//github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></code></pre></td></tr></table></figure><h1 id="选用主题"><a href="#选用主题" class="headerlink" title="选用主题"></a>选用主题</h1><p>修改MyBlog根目录下的<code>_config.yml</code>，把主题改为<code>butterfly</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: butterfly<br></code></pre></td></tr></table></figure><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>安装pug以及stylus的渲染器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install hexo-renderer-pug hexo-renderer-stylus --save<br></code></pre></td></tr></table></figure><h1 id="升级建议"><a href="#升级建议" class="headerlink" title="升级建议"></a>升级建议</h1><p>​为了减少升级主题后带来的不便，可使用以下方法（建议，可以不做）<br>​在MyBlog根目录下创建一个文件<code>_config.butterfly.yml</code>，并把butterfly主题目录的<code>_config.yml</code>的内容复制到<code>_config.butterfly.yml</code><br>​<strong>注意：</strong>复制的是主题内的<code>_config.yml</code>，而不是MyBlog的<code>_config.yml</code>。也不要把主题目录的<code>_config.yml</code>删掉。<br>​以后只需要在<code>_config.butterfly.yml</code>进行配置就行。<br>​如果使用了 <code>_config.butterfly.yml</code>配置主题的 _config.yml 將不会有效果。<br>​Hexo会自动合并主题中的<code>_config.yml</code>和<code>_config.butterfly.yml</code>中的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度更高。</p><p>​                 <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241726498.png" alt="butterfly-docs-install-suggestion-1.png" style="zoom:67%;" /></p><h1 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h1><p>1、前往你的 MyBlog 博客的根目录,打开git命令行<br>2、输入<code>hexo new page tags</code><br>3、你会找到 source&#x2F;tags&#x2F;index.md 这个文件<br>4、修改这个文件，记得添加 type: “tags”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">---<br>title: 标签<br>date: <span class="hljs-number">2018</span>-<span class="hljs-number">01</span>-<span class="hljs-number">05</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>type: <span class="hljs-string">&quot;tags&quot;</span><br>orderby: random<br>order: <span class="hljs-number">1</span><br>---<br><br></code></pre></td></tr></table></figure><p>​                   <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241726046.png" alt="image.png" style="zoom:67%;" /></p><h1 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h1><p>1、前往你的 Hexo 博客的根目录<br>2、输入hexo new page categories<br>3、你会找到 source&#x2F;categories&#x2F;index.md 这个文件<br>4、修改这个文件，记得添加 type: “categories”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">---<br>title: 分类<br>date: <span class="hljs-number">2018</span>-<span class="hljs-number">01</span>-<span class="hljs-number">05</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>type: <span class="hljs-string">&quot;categories&quot;</span><br>---<br></code></pre></td></tr></table></figure><h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><h2 id="创建友情链接页面"><a href="#创建友情链接页面" class="headerlink" title="创建友情链接页面"></a>创建友情链接页面</h2><p>1、前往你的 Hexo 博客的根目录<br>2、输入hexo new page link<br>3、你会找到 source&#x2F;link&#x2F;index.md 这个文件<br>4、修改这个文件，记得添加 type: “link”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">---<br>title: 友情链接<br>date: <span class="hljs-number">2018</span>-<span class="hljs-number">06</span>-<span class="hljs-number">07</span> <span class="hljs-number">22</span>:<span class="hljs-number">17</span>:<span class="hljs-number">49</span><br>type: <span class="hljs-string">&quot;link&quot;</span><br>---<br></code></pre></td></tr></table></figure><h2 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h2><p>在MyBlog博客的source文件夹中创建_data文件夹，在其中创建一个link.yml文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">- class_name: 友情鏈接<br>  class_desc: 那些人，那些事<br>  link_list:<br>    - name: Hexo<br>      link: https:<span class="hljs-comment">//hexo.io/zh-tw/</span><br>      avatar: https:<span class="hljs-comment">//d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span><br>      descr: 快速、簡單且強大的網誌框架<br><br>- class_name: 網站<br>  class_desc: 值得推薦的網站<br>  link_list:<br>    - name: Youtube<br>      link: https:<span class="hljs-comment">//www.youtube.com/</span><br>      avatar: https:<span class="hljs-comment">//i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span><br>      descr: 視頻網站<br>    - name: Weibo<br>      link: https:<span class="hljs-comment">//www.weibo.com/</span><br>      avatar: https:<span class="hljs-comment">//i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span><br>      descr: 中國最大社交分享平台<br>    - name: Twitter<br>      link: https:<span class="hljs-comment">//twitter.com/</span><br>      avatar: https:<span class="hljs-comment">//i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span><br>      descr: 社交分享平台<br></code></pre></td></tr></table></figure><p>class_name 和 class_desc 支持 html 格式，如不需要，也可以留空。</p><h1 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h1><p>修改<code>_config.butterfly.yml</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"># A simple <span class="hljs-number">404</span> page<br>error_404:<br>  enable: <span class="hljs-literal">true</span><br>  subtitle: <span class="hljs-string">&#x27;Page Not Found&#x27;</span><br>  background: https:<span class="hljs-comment">//i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span><br></code></pre></td></tr></table></figure><p>本地预览时，访问出错的网站是不会跳到 404 页面的。<br>如需本地预览，请访问 <a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></p><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><p>修改站点配置文件<code> _config.yml</code><br>默认语言是 en<br>主题支持三种语言<br>    default(en)  —— 默认英语<br>    zh-CN (简体中文)<br>    zh-TW (繁体中文)</p><h1 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h1><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改博客根目录的_config.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"># Site<br>title: TranscodingBoy  #标题<br>subtitle: <span class="hljs-string">&#x27;&#x27;</span>        #副标题<br>description: 为的就是这块技术   #个性签名<br>keywords:       <br>author: TranscodingBoy  #作者<br>language: zh-CN   #语言<br>timezone: <span class="hljs-string">&#x27;&#x27;</span>    #时区<br><br># URL<br>## Set your site url here. For example, <span class="hljs-keyword">if</span> you use GitHub Page, set url as <span class="hljs-string">&#x27;https://username.github.io/project&#x27;</span><br>url: http:<span class="hljs-comment">//techniquenotes.github.io</span><br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: <span class="hljs-literal">true</span> # Set to <span class="hljs-literal">false</span> to remove trailing <span class="hljs-string">&#x27;index.html&#x27;</span> from permalinks<br>  trailing_html: <span class="hljs-literal">true</span> # Set to <span class="hljs-literal">false</span> to remove trailing <span class="hljs-string">&#x27;.html&#x27;</span> from permalinks<br></code></pre></td></tr></table></figure><h1 id="导航栏设置"><a href="#导航栏设置" class="headerlink" title="导航栏设置"></a>导航栏设置</h1><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p>主题配置文件<code>_config.butterfly.yml</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">nav:<br>  logo: #image<br>  display_title: <span class="hljs-literal">true</span><br>  fixed: <span class="hljs-literal">false</span> # fixed navigation bar<br></code></pre></td></tr></table></figure><p>​                 <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241727587.png" alt="image.png" style="zoom:67%;" /></p><h2 id="菜单-x2F-目录"><a href="#菜单-x2F-目录" class="headerlink" title="菜单&#x2F;目录"></a>菜单&#x2F;目录</h2><p>修改主题配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"># Menu 目錄<br>menu:<br>  主页: / || fas fa-home<br>  博文 || fa fa-graduation-cap:<br>    分类: /categories/ || fa fa-archive<br>    标签: /tags/ || fa fa-tags<br>    归档: /archives/ || fa fa-folder-open<br>  # 生活 || fas fa-list:<br>  #   分享: /shuoshuo/ || fa fa-comments-o<br>  #   相册: /photos/ || fa fa-camera-retro<br>  #   音乐: /music/ || fa fa-music<br>  #   影视: /movies/ || fas fa-video<br>  友链: /link/ || fa fa-link<br>  #留言板: /comment/ || fa fa-paper-plane<br>  #留言板: /messageboard/ || fa fa-paper-plane<br>  关于笔者: /about/ || fas fa-heart  <br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903?spm=1001.2014.3001.5506">https://blog.csdn.net/mjh1667002013/article/details/129290903?spm=1001.2014.3001.5506</a><br>开头是图标名，<code>/xxx/</code>是存放内容的文件夹，后面<code>||</code>分开</p><h1 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h1><p><a href="https://cloud.tencent.com/developer/article/2145041">https://cloud.tencent.com/developer/article/2145041</a></p><h3 id="配置里启用-Highlight"><a href="#配置里启用-Highlight" class="headerlink" title="配置里启用 Highlight"></a>配置里启用 Highlight</h3><p>修改 Hexo 根目录下的 _config.yml</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">highlight</span>:<br> <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span><br> <span class="hljs-attr">line_number</span>: <span class="hljs-literal">true</span><br> <span class="hljs-attr">auto_detect</span>: <span class="hljs-literal">false</span><br> <span class="hljs-attr">tab_replace</span>:<br> <span class="hljs-attr">hljs</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>然后修改 butterfly 主题目录下的配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">highlight_theme</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="选择自己想要的高亮主题"><a href="#选择自己想要的高亮主题" class="headerlink" title="选择自己想要的高亮主题"></a>选择自己想要的高亮主题</h3><p>​先请大家打开 <del>科学上网工具</del>，然后登录 Github，接着进入该项目目录下：<a href="https://github.com/highlightjs/highlight.js/tree/main/src/styles">传送门</a><br>​选择你想要的代码高亮主题，我这里以 vs 为例 （如果是 AcWing 社区的同学，应该会比较喜欢这个主题）将 vs.css 文件里的内容全部复制下来</p><h3 id="修改-CSS-样式文件"><a href="#修改-CSS-样式文件" class="headerlink" title="修改 CSS 样式文件"></a>修改 CSS 样式文件</h3><p>​新建好一个接下来要 inject 进 butterfly 的 css 文件（如果不会的话，跟好我接下来的每一步）<br>​在 Hexo 根目录下打开文件夹 source，在此处新建一个文件夹 source&#x2F;css，然后进入 css 文件夹。新建一个文件 custom.css，把 Github 上 vs.css 里的内容先全部复制到该文件里。然后在最开头加上下面几段代码：<br><strong>source&#x2F;css&#x2F;custom.css</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">:root &#123;<br>  --hl-<span class="hljs-attr">color</span>: #d3af86;      <span class="hljs-comment">/*代码框字体顔色 【必须】 (把下面.hljs的 color复製到这里来)*/</span><br>  --hl-<span class="hljs-attr">bg</span>: #221a0f;         <span class="hljs-comment">/*代码框背景色 【必须】 (把下面.hljs的 background复製到这里来)*/</span><br>  --hltools-<span class="hljs-attr">bg</span>: #321a0f;    <span class="hljs-comment">/*代码框顶部工具栏背景色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）*/</span><br>  --hltools-<span class="hljs-attr">color</span>: #fff;    <span class="hljs-comment">/*代码框顶部工具栏字体顔色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）*/</span><br>  --hlnumber-<span class="hljs-attr">bg</span>: #221a0f;   <span class="hljs-comment">/*代码框行数背景色 【可选】(如果已经关掉 line_number,可以不用配置这个)*/</span><br>  --hlnumber-<span class="hljs-attr">color</span>: #fff;   <span class="hljs-comment">/*代码框行数字体顔色 【可选】 (如果已经关掉 line_number,可以不用配置这个)*/</span><br>  --hlscrollbar-<span class="hljs-attr">bg</span>: #d3af86;<span class="hljs-comment">/*代码框滚动条顔色 【可选】（默认为主题主顔色）*/</span><br>  --hlexpand-<span class="hljs-attr">bg</span>: #d3af86;   <span class="hljs-comment">/*代码框底部展开背景色 【可选】(如果已经关掉 highlight_height_limit,可以不用配置这个)*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​这里填写的 :root 内容，是对于最终渲染到前端时，代码框的样式，这里的参数你先默认填上，后面我会教你怎么调最快。<br>​最后，我们配置 butterfly 主题下的配置文件，引入该 css 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">inject</span>:<br>  <span class="hljs-attr">head</span>:<br>    - <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/custom.css&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>总结一下当前已经完成了哪些内容：</p><ol><li>已经将 hljs 配置设好，接下来会用 hljs 对代码块部分进行渲染</li><li>已经完成了对于代码字体高亮的主题配置，接下来代码高亮主题会用 vs2015</li></ol><h3 id="配置代码块的样式"><a href="#配置代码块的样式" class="headerlink" title="配置代码块的样式"></a>配置代码块的样式</h3><p>推荐配色方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 代码高亮字体 */</span><br>:root &#123;<br>  --hl-<span class="hljs-attr">color</span>: #24292e;<br>  --hl-<span class="hljs-attr">bg</span>: <span class="hljs-title function_">rgb</span>(<span class="hljs-number">246</span> <span class="hljs-number">248</span> <span class="hljs-number">250</span>);<br>  --hltools-<span class="hljs-attr">bg</span>: #49b1f587;<br>  --hltools-<span class="hljs-attr">color</span>: #ffffff;<br>  --hlnumber-<span class="hljs-attr">bg</span>: <span class="hljs-title function_">rgb</span>(<span class="hljs-number">235</span> <span class="hljs-number">239</span> <span class="hljs-number">241</span>);<br>  --hlnumber-<span class="hljs-attr">color</span>: #221a0f52;<br>&#125;<br>.<span class="hljs-property">hljs</span> &#123;<br>  <span class="hljs-attr">background</span>: white;<br>  <span class="hljs-attr">color</span>: black;<br>&#125;<br><br>.<span class="hljs-property">hljs</span>-comment,<br>.<span class="hljs-property">hljs</span>-quote,<br>.<span class="hljs-property">hljs</span>-variable &#123;<br>  <span class="hljs-attr">color</span>: #<span class="hljs-number">008000</span>;<br>&#125;<br><br>.<span class="hljs-property">hljs</span>-keyword,<br>.<span class="hljs-property">hljs</span>-selector-tag,<br>.<span class="hljs-property">hljs</span>-built_in,<br>.<span class="hljs-property">hljs</span>-name,<br>.<span class="hljs-property">hljs</span>-tag &#123;<br>  <span class="hljs-attr">color</span>: #00f;<br>&#125;<br><br>.<span class="hljs-property">hljs</span>-string,<br>.<span class="hljs-property">hljs</span>-title,<br>.<span class="hljs-property">hljs</span>-section,<br>.<span class="hljs-property">hljs</span>-attribute,<br>.<span class="hljs-property">hljs</span>-literal,<br>.<span class="hljs-property">hljs</span>-template-tag,<br>.<span class="hljs-property">hljs</span>-template-variable,<br>.<span class="hljs-property">hljs</span>-type,<br>.<span class="hljs-property">hljs</span>-addition &#123;<br>  <span class="hljs-attr">color</span>: #a31515;<br>&#125;<br><br>.<span class="hljs-property">hljs</span>-deletion,<br>.<span class="hljs-property">hljs</span>-selector-attr,<br>.<span class="hljs-property">hljs</span>-selector-pseudo,<br>.<span class="hljs-property">hljs</span>-meta &#123;<br>  <span class="hljs-attr">color</span>: #2b91af;<br>&#125;<br><br>.<span class="hljs-property">hljs</span>-doctag &#123;<br>  <span class="hljs-attr">color</span>: #<span class="hljs-number">808080</span>;<br>&#125;<br><br>.<span class="hljs-property">hljs</span>-attr &#123;<br>  <span class="hljs-attr">color</span>: #f00;<br>&#125;<br><br>.<span class="hljs-property">hljs</span>-symbol,<br>.<span class="hljs-property">hljs</span>-bullet,<br>.<span class="hljs-property">hljs</span>-link &#123;<br>  <span class="hljs-attr">color</span>: #00b0e8;<br>&#125;<br><br><br>.<span class="hljs-property">hljs</span>-emphasis &#123;<br>  font-<span class="hljs-attr">style</span>: italic;<br>&#125;<br><br>.<span class="hljs-property">hljs</span>-strong &#123;<br>  font-<span class="hljs-attr">weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="社交图表"><a href="#社交图表" class="headerlink" title="社交图表"></a>社交图表</h1><p>书写格式为<code>图标名：url || 描述文字 || color</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">social:<br>  fab fa-github: https:<span class="hljs-comment">//github.com/xxxxx || Github || &quot;#hdhfbb&quot;</span><br>  fas fa-envelope: mailto:xxxxxx<span class="hljs-meta">@gmail</span>.com || Email || <span class="hljs-string">&quot;#000000&quot;</span><br></code></pre></td></tr></table></figure><h1 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h1><p>修改主题配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">avatar:<br>  img: /img/avatar.png<br>  effect: <span class="hljs-literal">true</span> # 头像会一直转圈<br></code></pre></td></tr></table></figure><h1 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h1><p>如果不要显示顶部图，可直接配制<code>disable_top_img:true</code></p><h2 id="顶部图的获取顺序"><a href="#顶部图的获取顺序" class="headerlink" title="顶部图的获取顺序"></a>顶部图的获取顺序</h2><p>1、页面顶部图的获取顺序：各自配置的top_img &gt; 配置文件的default_top_img<br>2、文章页顶部图的获取顺序：各自配置的top_img &gt; cover &gt; 配置文件的default_top_img</p><h2 id="配置中的值"><a href="#配置中的值" class="headerlink" title="配置中的值"></a>配置中的值</h2><ul><li>index_img：主页的top_img</li><li>default_top_img：默认的top_img，当页面的top_img没有配置时，会显示default_top_img</li><li>archive_img：归档页面的top_img</li><li>tag_img：tag子页面的默认top_img</li><li>tag_per_umg：tag子页面的top_img，可配置每个tag的top_img</li><li>category_img：category<strong>子页面</strong>的默认top_img</li><li>category_per_img：category子页面的top_img，可配置每个category的top_img</li><li>其他页面(tags&#x2F;categories&#x2F;自建页面)和文章页的top_img，请到对应的md页面设置front-matter中的top_img</li></ul><h1 id="页面meta显示"><a href="#页面meta显示" class="headerlink" title="页面meta显示"></a>页面meta显示</h1><p>修改主题配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">post_meta:<br>  page:<br>    date_type: both # created or updated or both 主页文章日期是创建日或者更新日期或都显示<br>    date_format: data # date/relative 绝对日期还是相对日期<br>    categories: <span class="hljs-literal">true</span> # <span class="hljs-literal">true</span> or <span class="hljs-literal">false</span> 主页是否显示分类<br>    tags: <span class="hljs-literal">true</span> # <span class="hljs-literal">true</span> or <span class="hljs-literal">false</span> 主页是否显示标签<br>    label: <span class="hljs-literal">true</span> # <span class="hljs-literal">true</span> or <span class="hljs-literal">false</span> 显示描述性文字<br>  post:<br>    date_type: both # created or updated or both 文章页日期是创建日或者更新日期或都显示<br>    date_format: data # date/relative 绝对日期還是相对日期<br>    categories: <span class="hljs-literal">true</span> # <span class="hljs-literal">true</span> or <span class="hljs-literal">false</span> 文章页是否显示分类<br>    tags: <span class="hljs-literal">true</span> # <span class="hljs-literal">true</span> or <span class="hljs-literal">false</span> 文章页是否显示标签<br>    label: <span class="hljs-literal">true</span> # <span class="hljs-literal">true</span> or <span class="hljs-literal">false</span> 显示描述性文字<br></code></pre></td></tr></table></figure><h1 id="复制相关配置"><a href="#复制相关配置" class="headerlink" title="复制相关配置"></a>复制相关配置</h1><p>可配置网站是否可以复制、复制的內容是否添加版权信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"># copy settings<br># copyright: Add the copyright information after copied <span class="hljs-title function_">content</span> <span class="hljs-params">(複製的內容後面加上版權信息)</span><br>copy:<br>  enable: <span class="hljs-literal">true</span> <span class="hljs-comment">//是否开放网站复制权限</span><br>  copyright:  <span class="hljs-comment">//复制的内容后面加上版权信息</span><br>    enable: <span class="hljs-literal">true</span>  <span class="hljs-comment">//是否开放复制版权信息添加</span><br>    limit_count: <span class="hljs-number">50</span> <span class="hljs-comment">//字数限制，当复制文字大于这个字数限制时，将在复制内容后加上版权信息</span><br></code></pre></td></tr></table></figure><h1 id="文章页相关配置"><a href="#文章页相关配置" class="headerlink" title="文章页相关配置"></a>文章页相关配置</h1><h2 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h2><p>为你的博客文章展示文章版权和许可。<br>修改主题配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">post_copyright:<br>  enable: <span class="hljs-literal">true</span><br>  decode: <span class="hljs-literal">false</span><br>  author_href:<br>  license: CC BY-NC-SA <span class="hljs-number">4.0</span><br>  license_url: https:<span class="hljs-comment">//creativecommons.org/licenses/by-nc-sa/4.0/</span><br></code></pre></td></tr></table></figure><h2 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h2><p>​在你每篇文章的結尾，可以添加打赏按钮。相关二维码可以自行配置。<br>​对于沒有提供二维码的，可配置一张软件的icon图片，然后在link上添加相应的打上链接。用户点击图片就会跳转到链接去。<br>​link可以不写，会默认为图片的链接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">reward:<br>  enable: <span class="hljs-literal">true</span><br>  QR_code:<br>    - img: /img/wechat.jpg<br>      link:<br>      text: 微信<br>    - img: /img/alipay.jpg<br>      link:<br>      text: 支付寶<br></code></pre></td></tr></table></figure><h2 id="TOC目录"><a href="#TOC目录" class="headerlink" title="TOC目录"></a>TOC目录</h2><p>在文章页，会有一个目录，用于显示TOC<br>修改主题配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">toc:<br>  post: <span class="hljs-literal">true</span>  <span class="hljs-comment">//文章页是否显示TOC</span><br>  page: <span class="hljs-literal">true</span>  <span class="hljs-comment">//普通页面是否显示TOC</span><br>  number: <span class="hljs-literal">true</span>  <span class="hljs-comment">//是否显示章节数</span><br>  expand: <span class="hljs-literal">false</span>  <span class="hljs-comment">//是否展开TOC</span><br>  style_simple: <span class="hljs-literal">false</span> # <span class="hljs-keyword">for</span> post   <span class="hljs-comment">//简洁模式，侧边栏只显示TOC，只对文章页有效</span><br>  scroll_percent: <span class="hljs-literal">true</span>  <span class="hljs-comment">//是否显示滚动进度百分比</span><br></code></pre></td></tr></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p>修改主题配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">related_post:<br>  enable: <span class="hljs-literal">true</span><br>  limit: <span class="hljs-number">6</span> # 顯示推薦文章數目<br>  date_type: created # or created or updated 文章日期顯示創建日或者更新日<br></code></pre></td></tr></table></figure><h2 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h2><p>可设置是否显示文章过期提醒，以更新时间为基准。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># Displays outdated notice for a post (文章過期提醒)</span><br>noticeOutdate:<br>  enable: true<br>  style: flat # style: simple/flat<br>  limit<span class="hljs-emphasis">_day: 365 # When will it be shown</span><br><span class="hljs-emphasis">  position: top # position: top/bottom</span><br><span class="hljs-emphasis">  message_</span>prev: It has been<br>  message<span class="hljs-emphasis">_next: days since the last update, the content of the article may be outdated.</span><br></code></pre></td></tr></table></figure><h2 id="文章分页按钮"><a href="#文章分页按钮" class="headerlink" title="文章分页按钮"></a>文章分页按钮</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"># post_pagination (分頁)<br># value: <span class="hljs-number">1</span> || <span class="hljs-number">2</span> || <span class="hljs-literal">false</span><br># <span class="hljs-number">1</span>: The <span class="hljs-string">&#x27;next post&#x27;</span> will link to old post<br># <span class="hljs-number">2</span>: The <span class="hljs-string">&#x27;next post&#x27;</span> will link to <span class="hljs-keyword">new</span> <span class="hljs-title class_">post</span><br># <span class="hljs-literal">false</span>: disable pagination<br>post_pagination: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="博客年份和页脚自定义文本"><a href="#博客年份和页脚自定义文本" class="headerlink" title="博客年份和页脚自定义文本"></a>博客年份和页脚自定义文本</h1><p>修改主题配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">footer:<br>  owner:<br>    enable: <span class="hljs-literal">true</span><br>    since: <span class="hljs-number">2023</span><br>  custom_text: Hi, welcome to my &lt;a href=<span class="hljs-string">&quot;https://techniquenotes.github.io&quot;</span>&gt;blog&lt;/a&gt;!<br>  copyright: <span class="hljs-literal">true</span> # Copyright of theme and framework<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建教程（一）</title>
      <link href="/2024/02/20/Hexo/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/02/20/Hexo/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><p>网站搭建：<a href="https://blog.csdn.net/qq_58608526/article/details/124652412?spm=1001.2014.3001.5506">https://blog.csdn.net/qq_58608526&#x2F;article&#x2F;details&#x2F;124652412?spm&#x3D;1001.2014.3001.5506</a><br>主题配置：<a href="https://blog.csdn.net/mjh1667002013/article/details/129290903?spm=1001.2014.3001.5506">https://blog.csdn.net/mjh1667002013/article/details/129290903?spm=1001.2014.3001.5506</a><br>完整：<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><p>​Hexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。<br>​下载稳定版或者最新版都可以Node.js，安装选项全部默认，一路点击Next。<br>​最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。</p><p>​                                   <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241713722.png" alt="image.png" style="zoom:67%;" /></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>​前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹<strong>MyBlog</strong>，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。<br>​比如我的博客文件都存放在D:\Study\MyBlog目录下。<br>​在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。<br>​定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，无视它就行。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完后输入<code>hexo -v</code>验证是否安装成功。至此hexo就安装完了。<br>                             <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241714471.png" alt="image.png" style="zoom:50%;" /><br>接下来初始化一下hexo,即初始化我们的网站，进入我们主题根目录Hexo，输入hexo init初始化文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hexo init<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241714619.png" alt="image.png"><br>这个Hexo可以自己取什么名字都行，然后，接着输入<code>npm install</code>安装必备的组件。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241715644.png" alt="image.png"><br>新建完成后，指定文件夹MyBlog目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题**</li><li>_config.yml: 博客的配置文件**</li></ul><p> 这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器<br> 按ctrl+c关闭本地服务器。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">hexo <span class="hljs-title function_">g</span> <span class="hljs-params">(hexo generate)</span><br>hexo <span class="hljs-title function_">server</span><span class="hljs-params">(或者简写:hexo s）)</span><br></code></pre></td></tr></table></figure><p>​                             <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241715733.png" alt="image.png" style="zoom:50%;" /></p><p>​                               <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241715939.png" alt="image.png" style="zoom:50%;" /></p><h1 id="注册Github账号创建个人仓库"><a href="#注册Github账号创建个人仓库" class="headerlink" title="注册Github账号创建个人仓库"></a>注册Github账号创建个人仓库</h1><p>​接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。<br>​打开<a href="https://github.com/%EF%BC%8C%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93New">https://github.com/，新建一个项目仓库New</a> repository，如下所示：<br>​                         <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241715844.png" alt="image.png" style="zoom:50%;" /><br>​要创建一个和你用户名相同的仓库，只有这样，将来要部署到GitHub page的时候，才会被识别。<br>输入格式为：用户名.github.io</p><h1 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h1><p>​生成SSH添加到GitHub，连接Github与本地。<br>​在MyBlog中右键打开git bash， 第一次使用git后需要将用户名和邮箱进行初始化 ，输入下面命令：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>​                  <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241716781.png" alt="image.png"> </p><p>​这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。例如我的：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">git config --global user.name <span class="hljs-string">&quot;gaiolan&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;2942892675@qq.com&quot;</span><br></code></pre></td></tr></table></figure><p> 可以用以下两条，检查一下你有没有输对  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>创建SSH，输入命令后，一路回车<br>                                        <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241730392.png" alt="image.png" style="zoom: 67%;" /></p><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>​<img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241731175.png" alt="image.png" style="zoom:67%;" /></p><p>打开<a href="http://github.com/">github</a>，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便取一个都可以，把你的id_rsa.pub里面的信息复制进去。如图：</p><p>​                      <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241731236.png" alt="image.png" style="zoom:67%;" />                                                    </p><p>在git bash输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。<br><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241717171.png" alt="image.png"><br>如果失败，参考这篇教程<a href="https://blog.csdn.net/qq_40047019/article/details/122898308">https://blog.csdn.net/qq_40047019/article/details/122898308</a> </p><h1 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a>将Hexo部署到GitHub</h1><p>​这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。<br>修改最后一行的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy:<br>  type: git<br>  repository: https:<span class="hljs-comment">//github.com/techniquenotes/techniquenotes.github.io.git</span><br>  branch: main<br></code></pre></td></tr></table></figure><p>​repository修改为你自己的github项目地址即可就是部署时，告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。<br>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><p>​                        <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241717405.png" alt="image.png" style="zoom:67%;" /> ​                           </p><p>​                              <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241718474.png" alt="image.png" style="zoom:50%;" /><br> 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241718856.png" alt="image.png"></p><p>​其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate顾名思义，生成静态文章，可以用 hexo g缩写 ，hexo deploy部署文章，可以用hexo d缩写  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">hexo clean <span class="hljs-comment">//缩写成 hexo cl</span><br>hexo generate <span class="hljs-comment">// 缩写hexo g</span><br>hexo deploy <span class="hljs-comment">// hexo deploy</span><br></code></pre></td></tr></table></figure><p>​                 <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241718607.png" alt="image.png"></p><p>​                                 <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241719287.png" alt="image.png" style="zoom:50%;" /> ​</p><p>​                                    <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241719082.png" alt="image.png" style="zoom:50%;" /></p><p>​                                <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241719408.png" alt="image.png" style="zoom:50%;" /></p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241720258.png" alt="image.png" style="zoom:67%;" /><h1 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h1><p>​首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241720299.png" alt="image.png"></p><p>然后输入hexo new post “我的第一篇博客”，新建一篇文章。</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241720848.png" alt="image.png"></p><p>​然后打开D:\Hexo\source_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241720820.png" alt="image.png"></p><p>​你可以直接在vscode里面编写markdown文件，可以实时预览，也可以用用其他编辑md文件的软件的工具编写。编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241721765.png" alt="image.png"></p><p>​                     <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241721011.png" alt="image.png" style="zoom:67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241721246.png" alt="image.png"></p><p>​                       <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Hexo/Tutorial/202307241735139.png" alt="image.png" style="zoom:67%;" /></p><p>​到这儿基本第一部分就完成了，已经完整搭建起一个比较简陋的个人博客了，接下来我们就可以对我们的博客进行个性化定制了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo d上传失败解决</title>
      <link href="/2024/02/20/Hexo/Hexo%20d%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3/"/>
      <url>/2024/02/20/Hexo/Hexo%20d%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-d上传失败解决"><a href="#Hexo-d上传失败解决" class="headerlink" title="Hexo d上传失败解决"></a>Hexo d上传失败解决</h1><h2 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h2><p><a href="https://blog.csdn.net/qq_59039063/article/details/132459418?spm=1001.2014.3001.5506">https://blog.csdn.net/qq_59039063/article/details/132459418?spm=1001.2014.3001.5506</a></p><h3 id="修改-ssh文件夹"><a href="#修改-ssh文件夹" class="headerlink" title="修改.ssh文件夹"></a>修改.ssh文件夹</h3><p>在 C:\Users\Administrator.ssh 中找到.ssh文件夹（此前配置SSH时会生成该文件夹）</p><p>在 .ssh 文件夹中新建文本文件 config ，不带后缀（可以新建文本文档，去掉 .txt 后缀）<br>打开 config 文件，输入以下内容，保存后即可，其中<a href="mailto:&#x78;&#x78;&#120;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#x78;&#x78;&#120;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;</a> 为你自己的邮箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Host github.com<br>User xxx<span class="hljs-meta">@qq</span>.com<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301453583.png" alt="image-20240130142016142" style="zoom:50%;" /><h3 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h3><p>操作系统中 hosts 文件的权限优先级高于DNS服务器，在 C:\Windows\System32\drivers\etc 目录下找到并修改 hosts 文件，增加一条 github.com 的域名映射可以解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> localhost<br><span class="hljs-number">140.82</span><span class="hljs-number">.113</span><span class="hljs-number">.4</span> github.com<br></code></pre></td></tr></table></figure><h2 id="取消动态代理"><a href="#取消动态代理" class="headerlink" title="取消动态代理"></a>取消动态代理</h2><p><a href="https://blog.csdn.net/xiaoxiamiqianqian/article/details/108304517?spm=1001.2014.3001.5506">https://blog.csdn.net/xiaoxiamiqianqian/article/details/108304517?spm=1001.2014.3001.5506</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">查询动态代理<br>git config --global http.proxy<br>git config --global https.proxy<br></code></pre></td></tr></table></figure><p>如果有返回值，输入以下命令取消代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">取消代理<br>git config --global --unset http.proxy<br>git config --global --unset httpx.proxy    <br></code></pre></td></tr></table></figure><p>也可以在<code>c:\Users\当前用户</code>里的<code>.gitconfig</code>文件(这个默认是隐藏文件)， 将里面关于<code>proxy</code>的行删掉</p><h2 id="Git-下gitconfig修改"><a href="#Git-下gitconfig修改" class="headerlink" title="Git 下gitconfig修改"></a>Git 下gitconfig修改</h2><p>之前默认是推到master分支，修改成main分支</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301454572.png" alt="image-20240130141933198" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">[diff <span class="hljs-string">&quot;astextplain&quot;</span>]<br>textconv = astextplain<br>[filter <span class="hljs-string">&quot;lfs&quot;</span>]<br>clean = git-lfs clean -- %<span class="hljs-type">f</span><br><span class="hljs-variable">smudge</span> <span class="hljs-operator">=</span> git-lfs smudge -- %<span class="hljs-type">f</span><br><span class="hljs-variable">process</span> <span class="hljs-operator">=</span> git-lfs filter-<span class="hljs-type">process</span><br><span class="hljs-variable">required</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>[http]<br>sslBackend = <span class="hljs-type">openssl</span><br><span class="hljs-variable">sslCAInfo</span> <span class="hljs-operator">=</span> D:/work/Git/mingw64/ssl/certs/ca-bundle.crt<br>[core]<br>autocrlf = <span class="hljs-type">true</span><br><span class="hljs-variable">fscache</span> <span class="hljs-operator">=</span> <span class="hljs-type">true</span><br><span class="hljs-variable">symlinks</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>[pull]<br>rebase = <span class="hljs-literal">false</span><br>[credential]<br>helper = manager<br>[credential <span class="hljs-string">&quot;https://dev.azure.com&quot;</span>]<br>useHttpPath = <span class="hljs-literal">true</span><br>[init]<br>defaultBranch = main<br></code></pre></td></tr></table></figure><h2 id="Github邮箱修改"><a href="#Github邮箱修改" class="headerlink" title="Github邮箱修改"></a>Github邮箱修改</h2><p>推送后发现无法推送到私有邮箱</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301454584.png" alt="img" style="zoom:50%;" /><p>进入github，点击头像，打开settings，再Email中取消邮箱为私有<img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse/Hexo/Tutorial/202401301454718.png" alt="image-20240130141733391" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github上传本地文件夹</title>
      <link href="/2024/02/20/Git/github%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2024/02/20/Git/github%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/python_innocent/article/details/128991705?spm=1001.2014.3001.5506">Github上传本地文件</a></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>本地新建空文件夹，文件名为3</p><p>在空文件夹中点击鼠标右键，打开git bash</p><h3 id="复制仓库路径"><a href="#复制仓库路径" class="headerlink" title="复制仓库路径"></a><strong>复制仓库路径</strong></h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Git/Tutorial/202308091954305.png" alt="image-20230809194342286" style="zoom:50%;" /><h3 id="拷贝仓库到本地"><a href="#拷贝仓库到本地" class="headerlink" title="拷贝仓库到本地"></a><strong>拷贝仓库到本地</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone https://github.com/techniquenotes/School_Resources.git<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Git/Tutorial/202308091954742.png" alt="image-20230809194932249" style="zoom:67%;" /><p>此时本地文件夹里会出现你的仓库文件夹 。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Git/Tutorial/202308091954170.png" alt="image-20230809194513547" style="zoom:80%;" /><p>将你要上传的文件夹复制到仓库文件夹中</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Git/Tutorial/202308091954753.png" alt="image-20230809194628355" style="zoom:80%;" /><h3 id="依次执行git指令"><a href="#依次执行git指令" class="headerlink" title="依次执行git指令"></a><strong>依次执行git指令</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">cd School_Resources # 进入到仓库文件夹<br>git init  //初始化<br>git add . //注意add后面有空格和小数点<br>git commit -m &quot;English Language and Society&quot;  //引号内是提交时的描述信息  <br>git push  //提交到github<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Git/Tutorial/202308091954005.png" alt="image-20230809195038570" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Git/Tutorial/202308091954958.png" alt="image-20230809195059770" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git add . //添加文件夹内所有文件<br>git add &quot;文件名&quot; //添加单个文件<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Git/Tutorial/202308102304128.png" alt="image-20230810230323535" style="zoom:80%;" /><h3 id="提交成功"><a href="#提交成功" class="headerlink" title="提交成功"></a><strong>提交成功</strong></h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Git/Tutorial/202308091954317.png" alt="image-20230809195238801" style="zoom: 50%;" /><h3 id="多次提交"><a href="#多次提交" class="headerlink" title="多次提交"></a>多次提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git pull //更新远程仓库到本地<br>git add &quot;文件名&quot;<br>git commit -m &quot;描述信息&quot;<br>git push<br></code></pre></td></tr></table></figure><h3 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git reset --soft HEAD^ &amp;&amp; git reset HEAD //同时撤回最新一次的 git commit 和 git add<br></code></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git status<br></code></pre></td></tr></table></figure><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git log<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git clone 连接失败解决方法</title>
      <link href="/2024/02/20/Git/git%20clone%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/02/20/Git/git%20clone%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/xhl_james/article/details/110775726">git使用代理clone</a></p><p><a href="https://blog.csdn.net/shimmer641/article/details/128806133">git clone 时Failed to connect to github.com port 443:connection timed out 怎么办</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>执行git clone 无法连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git clone https://github.com/techniquenotes/School_Resources.git<br>Cloning into &#x27;School_Resources&#x27;...<br>fatal: unable to access &#x27;https://github.com/techniquenotes/School_Resources.git/&#x27;: Failed to connect to github.com port 443 after 21071 ms: Couldn&#x27;t connect to server<br></code></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --global http.proxy http://127.0.0.1:1080<br>git config --global https.proxy http://127.0.0.1:1080<br>// 打开代理设置，查看端口<br></code></pre></td></tr></table></figure><p>成功克隆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git clone https://github.com/techniquenotes/School_Resources.git<br>Cloning into &#x27;School_Resources&#x27;...<br>remote: Enumerating objects: 4, done.<br>remote: Counting objects: 100% (4/4), done.<br>remote: Compressing objects: 100% (3/3), done.<br>remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0<br>Receiving objects: 100% (4/4), 4.51 KiB | 4.51 MiB/s, done.<br></code></pre></td></tr></table></figure><h2 id="关闭代理"><a href="#关闭代理" class="headerlink" title="关闭代理"></a>关闭代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git config --global --unset http.proxy<br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning 2</title>
      <link href="/2024/02/20/Deep%20Learning/Deep%20Learning%202/"/>
      <url>/2024/02/20/Deep%20Learning/Deep%20Learning%202/</url>
      
        <content type="html"><![CDATA[<h1 id="20-池化层的作用"><a href="#20-池化层的作用" class="headerlink" title="20 池化层的作用"></a>20 池化层的作用</h1><p>起压缩作用</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341494.png" alt="image-20230730100709629" style="zoom:50%;" /><h2 id="最大池化"><a href="#最大池化" class="headerlink" title="最大池化"></a>最大池化</h2><p>h和w会变，通道数c不会变。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341429.png" alt="image-20230730100922086" style="zoom:50%;" /><h1 id="21-整体网络架构"><a href="#21-整体网络架构" class="headerlink" title="21 整体网络架构"></a>21 整体网络架构</h1><p>每个卷积层后都有激活函数RELU，池化层不需要。多次卷积后一次池化。</p><p>最后要先将三维的特征图展平成特征向量，再用全连接层FC分类。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341069.png" alt="image-20230730101414503" style="zoom:50%;" /><p>只有带参数才能称为层，卷积层和全连接层属于层。激活函数和池化层不算。</p><h2 id="特征图变化"><a href="#特征图变化" class="headerlink" title="特征图变化"></a>特征图变化</h2><p>转换：三维转换成一维向量</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341485.png" alt="image-20230730101650115" style="zoom:50%;" /><h1 id="22-VGG网络架构"><a href="#22-VGG网络架构" class="headerlink" title="22 VGG网络架构"></a>22 VGG网络架构</h1><h2 id="经典网络-Alexnet"><a href="#经典网络-Alexnet" class="headerlink" title="经典网络-Alexnet"></a>经典网络-Alexnet</h2><p>5层卷积，3层全连接</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341571.png" alt="image-20230730101809891" style="zoom:50%;" /><h2 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h2><ul><li>卷积核大小都是3×3。</li><li>16层或19层常用。</li><li>每一次池化层后卷积核个数翻倍，弥补池化损失。</li></ul><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341375.png" alt="image-20230730102209820" style="zoom:50%;" /><h1 id="23-残差网络Resnet"><a href="#23-残差网络Resnet" class="headerlink" title="23 残差网络Resnet"></a>23 残差网络Resnet</h1><h2 id="经典网络-Resnet"><a href="#经典网络-Resnet" class="headerlink" title="经典网络-Resnet"></a>经典网络-Resnet</h2><p>当做特征提取，而不是分类</p><p>如果某一层效果不好，会把该层的权重改为0，H(x)&#x3D;x。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341207.png" alt="image-20230730102700683" style="zoom:50%;" /><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341574.png" alt="image-20230730102854099" style="zoom:50%;" /><h1 id="24-感受野的作用"><a href="#24-感受野的作用" class="headerlink" title="24 感受野的作用"></a>24 感受野的作用</h1><h2 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h2><p>每一层的输出能感受前一个输入。感受野是最后一层能感受到最初输入的范围。下图第二层的一块先感受到第一个卷积层3×3范围，后者是对最初5×5范围卷积得到，所以最后一层能感受到最初输入的范围是5×5。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341347.png" alt="image-20230730103319059" style="zoom:50%;" /><p>感受野越大越好，说明一小块能代表原始数据大块特征。</p><h3 id="堆叠3个小的卷积核原因"><a href="#堆叠3个小的卷积核原因" class="headerlink" title="堆叠3个小的卷积核原因"></a>堆叠3个小的卷积核原因</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341945.png" alt="image-20230730103850224" style="zoom:50%;" /><h1 id="25-RNN网络架构解读"><a href="#25-RNN网络架构解读" class="headerlink" title="25 RNN网络架构解读"></a>25 RNN网络架构解读</h1><h2 id="递归神经网络"><a href="#递归神经网络" class="headerlink" title="递归神经网络"></a>递归神经网络</h2><p>能够处理时间序列。前一个时刻输入产生的特征会对后一个时刻的输入产生影响。前一个输入的中间结果保留，参与下一个输入的计算。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301341567.png" alt="image-20230730104547424" style="zoom:50%;" /><p>常用于自然语言处理。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342911.png" alt="image-20230730104857592" style="zoom:50%;" /><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342298.png" alt="image-20230730105015421" style="zoom:50%;" /><h2 id="LSTM网络"><a href="#LSTM网络" class="headerlink" title="LSTM网络"></a>LSTM网络</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342520.png" alt="image-20230730105640418" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342112.png" alt="image-20230730105700312" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342931.png" alt="image-20230730105720455" style="zoom:50%;" /><h3 id="决定丢弃信息"><a href="#决定丢弃信息" class="headerlink" title="决定丢弃信息"></a>决定丢弃信息</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342946.png" alt="image-20230730105812956" style="zoom:50%;" /><h3 id="确定更新的信息"><a href="#确定更新的信息" class="headerlink" title="确定更新的信息"></a>确定更新的信息</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342785.png" alt="image-20230730105921117" style="zoom:50%;" /><h1 id="26-词向量模型Word2Vec通俗解释"><a href="#26-词向量模型Word2Vec通俗解释" class="headerlink" title="26 词向量模型Word2Vec通俗解释"></a>26 词向量模型Word2Vec通俗解释</h1><h2 id="文本向量化"><a href="#文本向量化" class="headerlink" title="文本向量化"></a>文本向量化</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342561.png" alt="image-20230730110856920" style="zoom:50%;" /><h1 id="27-模型整体框架"><a href="#27-模型整体框架" class="headerlink" title="27 模型整体框架"></a>27 模型整体框架</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301345452.png" alt="image-20230730110939662" style="zoom:50%;" /><h2 id="Word2Vec把词转换成向量"><a href="#Word2Vec把词转换成向量" class="headerlink" title="Word2Vec把词转换成向量"></a>Word2Vec把词转换成向量</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342809.png" alt="image-20230730111109393" style="zoom:50%;" /><ul><li>向量的维度指坐标个数。</li><li>二维张量可以表示为 [[1, 2, 3], [4, 5, 6]]，其中有两个维度，每个维度包含三个元素。所以该张量的维度是 (2, 3)。</li></ul><h2 id="热度图"><a href="#热度图" class="headerlink" title="热度图"></a>热度图</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342806.png" alt="image-20230730130428560" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342914.png" alt="image-20230730130539094" style="zoom:50%;" /><h2 id="词向量的输入和输出"><a href="#词向量的输入和输出" class="headerlink" title="词向量的输入和输出"></a>词向量的输入和输出</h2><p>能够根据输入预测下一个词（输出）</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342813.png" alt="image-20230730130813203" style="zoom:50%;" /><p>输出显示每个词的概率</p><h2 id="embeddings"><a href="#embeddings" class="headerlink" title="embeddings"></a>embeddings</h2><p>根据输入从语料库中找到词向量。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342766.png" alt="image-20230730131056747" style="zoom:50%;" /><p>语料库开始随机初始化，每一轮训练会更新。</p><h1 id="28-训练数据构建"><a href="#28-训练数据构建" class="headerlink" title="28 训练数据构建"></a>28 训练数据构建</h1><h2 id="数据从哪里来"><a href="#数据从哪里来" class="headerlink" title="数据从哪里来"></a>数据从哪里来</h2><p>词语含义可以跨文本（新闻，小说）</p><h2 id="构建训练数据"><a href="#构建训练数据" class="headerlink" title="构建训练数据"></a>构建训练数据</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342151.png" alt="image-20230730131637589" style="zoom:50%;" /><p>滑动窗口</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342555.png" alt="image-20230730131659478" style="zoom:50%;" /><h1 id="29-CBOW与Skipgram模型"><a href="#29-CBOW与Skipgram模型" class="headerlink" title="29 CBOW与Skipgram模型"></a>29 CBOW与Skipgram模型</h1><h2 id="CBOW"><a href="#CBOW" class="headerlink" title="CBOW"></a>CBOW</h2><p>输入上下文，前后夹中间</p><p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342026.png" alt="image-20230730131920195"></p><h2 id="Skipgram"><a href="#Skipgram" class="headerlink" title="Skipgram"></a>Skipgram</h2><p>通过中间词预测上下文</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301342663.png" alt="image-20230730132046432" style="zoom:50%;" /><h3 id="Skip-gram模型所需训练数据集"><a href="#Skip-gram模型所需训练数据集" class="headerlink" title="Skip-gram模型所需训练数据集"></a>Skip-gram模型所需训练数据集</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343119.png" alt="image-20230730132146449" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343245.png" alt="image-20230730132159445" style="zoom:50%;" /><h2 id="如何进行训练"><a href="#如何进行训练" class="headerlink" title="如何进行训练"></a>如何进行训练</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343475.png" alt="image-20230730132332192" style="zoom:50%;" /><h2 id="结果太多解决方法"><a href="#结果太多解决方法" class="headerlink" title="结果太多解决方法"></a>结果太多解决方法</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343690.png" alt="image-20230730132611592" style="zoom:50%;" /><p>输出加入到输入，希望标签是1或0，最后一层变为二分类</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343874.png" alt="image-20230730132849105" style="zoom:50%;" /><h1 id="30-负采样方案"><a href="#30-负采样方案" class="headerlink" title="30 负采样方案"></a>30 负采样方案</h1><h2 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a>改进方案</h2><p>人为添加标签为0的词，称为负样本。推荐5个</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343813.png" alt="image-20230730133003933" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343407.png" alt="image-20230730133123612" style="zoom:50%;" /><h2 id="词向量训练过程"><a href="#词向量训练过程" class="headerlink" title="词向量训练过程"></a>词向量训练过程</h2><h3 id="初始化词向量矩阵"><a href="#初始化词向量矩阵" class="headerlink" title="初始化词向量矩阵"></a>初始化词向量矩阵</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343976.png" alt="image-20230730133210556" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343923.png" alt="image-20230730133305542" style="zoom:50%;" /><h3 id="反向传播更新"><a href="#反向传播更新" class="headerlink" title="反向传播更新"></a>反向传播更新</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307301343727.png" alt="image-20230730133402479" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning 1</title>
      <link href="/2024/02/20/Deep%20Learning/Deep%20Learning%201/"/>
      <url>/2024/02/20/Deep%20Learning/Deep%20Learning%201/</url>
      
        <content type="html"><![CDATA[<h1 id="1-深度学习要解决的问题"><a href="#1-深度学习要解决的问题" class="headerlink" title="1 深度学习要解决的问题"></a>1 深度学习要解决的问题</h1><h2 id="机器学习流程"><a href="#机器学习流程" class="headerlink" title="机器学习流程"></a>机器学习流程</h2><ul><li>数据获取</li><li>特征工程（重点）</li><li>建立模型</li><li>评估与应用</li></ul><h2 id="特征工程的作用"><a href="#特征工程的作用" class="headerlink" title="特征工程的作用"></a>特征工程的作用</h2><ul><li>数据特征决定了模型的上限</li><li>预处理和特征提取是最核心的</li><li>算法与参数选择决定了如何逼近这个上限</li></ul><p>深度学习相比机器学习的优势是能够利用神经网络提取计算机能够识别的特征。</p><h1 id="2-深度学习应用领域"><a href="#2-深度学习应用领域" class="headerlink" title="2 深度学习应用领域"></a>2 深度学习应用领域</h1><p>无人驾驶，人脸识别，医学检测，屏幕变脸，分辨率重构</p><p>问题：参数很多，移动端速度可能比较慢</p><h1 id="3-计算机视觉任务"><a href="#3-计算机视觉任务" class="headerlink" title="3 计算机视觉任务"></a>3 计算机视觉任务</h1><p>图像分类任务</p><h2 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h2><ul><li>图像表示：计算机眼中的图像</li><li>一张图片被表示成三维数组的形式，每个像素的值从0到255<ul><li>例如：300<em>100</em>3</li></ul></li></ul><h2 id="计算机视觉面临的挑战"><a href="#计算机视觉面临的挑战" class="headerlink" title="计算机视觉面临的挑战"></a>计算机视觉面临的挑战</h2><ul><li>照射角度</li><li>形状改变</li><li>部分遮蔽</li><li>背景混入</li></ul><h1 id="4-视觉任务中遇到的问题"><a href="#4-视觉任务中遇到的问题" class="headerlink" title="4 视觉任务中遇到的问题"></a>4 视觉任务中遇到的问题</h1><h2 id="机器学习常规套路"><a href="#机器学习常规套路" class="headerlink" title="机器学习常规套路"></a>机器学习常规套路</h2><ul><li>收集数据并给定标签</li><li>训练一个分类器</li><li>测试，评估</li></ul><h2 id="K近邻算法"><a href="#K近邻算法" class="headerlink" title="K近邻算法"></a>K近邻算法</h2><p>K是半径。圆内哪种形状多绿色点就是哪种结果。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292216683.png" alt="image-20230729155008726" style="zoom:50%;" /><h3 id="计算流程"><a href="#计算流程" class="headerlink" title="计算流程"></a>计算流程</h3><ul><li>计算已知类别数据集中的点与当前点的距离</li><li>按照距离依次排序</li><li>选取与当前点距离最小的K个点</li><li>确定前K个点所在类别的出现概率</li><li>返回前K个点出现频率最高的类别作为当前点预测分类</li></ul><h2 id="数据库样例CIFAR-10"><a href="#数据库样例CIFAR-10" class="headerlink" title="数据库样例CIFAR-10"></a>数据库样例CIFAR-10</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>10类标签</li><li>50000个训川练数据</li><li>10000个测试数据</li><li>大小均为32*32（像素）</li></ul><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292216698.png" alt="image-20230729155232155" style="zoom:50%;" /><h2 id="图像分类"><a href="#图像分类" class="headerlink" title="图像分类"></a>图像分类</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292216012.png" alt="image-20230729155500951" style="zoom:50%;" /><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292216757.png" alt="image-20230729155559099" style="zoom:50%;" /><h3 id="为什么K近邻不能用来图像分类"><a href="#为什么K近邻不能用来图像分类" class="headerlink" title="为什么K近邻不能用来图像分类"></a>为什么K近邻不能用来图像分类</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217567.png" alt="image-20230729155729888" style="zoom:50%;" /><h1 id="5-得分函数"><a href="#5-得分函数" class="headerlink" title="5 得分函数"></a>5 得分函数</h1><h2 id="线性函数"><a href="#线性函数" class="headerlink" title="线性函数"></a>线性函数</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217497.png" alt="image-20230729162542146" style="zoom:50%;" /><h3 id="数学表示"><a href="#数学表示" class="headerlink" title="数学表示"></a>数学表示</h3><p>10分类任务</p><p>Wi向量表示对于第i个类别，3072个像素点的权重。i &#x3D; 1, 2, 3….10</p><p>b代表对10个不同类别分别进行微调</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217044.png" alt="image-20230729163315765" style="zoom:50%;" /><h1 id="6-损失函数的作用"><a href="#6-损失函数的作用" class="headerlink" title="6 损失函数的作用"></a>6 损失函数的作用</h1><h2 id="线性函数计算方法"><a href="#线性函数计算方法" class="headerlink" title="线性函数计算方法"></a>线性函数计算方法</h2><p>3分类问题为例</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217677.png" alt="image-20230729163506345" style="zoom:50%;" /><p>权重参数越大，代表该像素点对于该类别越重要。正代表越接近该类别，负代表越不接近该类别。</p><p>W矩阵开始可以随机产生，迭代过程中调整。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217117.png" alt="image-20230729163845561" style="zoom:50%;" /><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217778.png" alt="image-20230729164014068" style="zoom:50%;" /><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>sj-sy+1代表错误类别得分-正确类别+1</p><p>1代表容忍程度，正确类别得分至少比错误大1才能说明神经网络具备分类能力</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217296.png" alt="image-20230729164541261" style="zoom:50%;" /><h1 id="7-前向传播整体流程"><a href="#7-前向传播整体流程" class="headerlink" title="7 前向传播整体流程"></a>7 前向传播整体流程</h1><h2 id="损失函数-1"><a href="#损失函数-1" class="headerlink" title="损失函数"></a>损失函数</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217591.png" alt="image-20230729165417692" style="zoom:50%;" /><h3 id="正则化惩罚项"><a href="#正则化惩罚项" class="headerlink" title="正则化惩罚项"></a>正则化惩罚项</h3><p>由于权重参数带来的损失</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217097.png" alt="image-20230729170230635" style="zoom:50%;" /><h2 id="softmax分类器"><a href="#softmax分类器" class="headerlink" title="softmax分类器"></a>softmax分类器</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217726.png" alt="image-20230729170515118" style="zoom:50%;" /><p><strong>归一化normalize</strong></p><p>概率越大，损失应该越小</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217003.png" alt="image-20230729171159611" style="zoom:50%;" /><h2 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217491.png" alt="image-20230729171303325" style="zoom:50%;" /><h1 id="8-反向传播计算方法"><a href="#8-反向传播计算方法" class="headerlink" title="8 反向传播计算方法"></a>8 反向传播计算方法</h1><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><p>逐层求偏导</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217909.png" alt="image-20230729172115751" style="zoom:50%;" /><h2 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217210.png" alt="image-20230729172257268" style="zoom:50%;" /><h1 id="9-神经网络整体架构"><a href="#9-神经网络整体架构" class="headerlink" title="9 神经网络整体架构"></a>9 神经网络整体架构</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292217767.png" alt="image-20230729195515069" style="zoom:50%;" /><h2 id="反向传播可以一大块一大块计算"><a href="#反向传播可以一大块一大块计算" class="headerlink" title="反向传播可以一大块一大块计算"></a>反向传播可以一大块一大块计算</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218066.png" alt="image-20230729195628974" style="zoom:50%;" /><h2 id="门单元"><a href="#门单元" class="headerlink" title="门单元"></a>门单元</h2><p>梯度角度考虑</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218245.png" alt="image-20230729195859202" style="zoom:50%;" /><h1 id="10-神经网络整体架构细节"><a href="#10-神经网络整体架构细节" class="headerlink" title="10 神经网络整体架构细节"></a>10 神经网络整体架构细节</h1><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218285.png" alt="image-20230729201127354" style="zoom:50%;" /><h2 id="非线性"><a href="#非线性" class="headerlink" title="非线性"></a>非线性</h2><p>如max(0,x)</p><p>在每一步矩阵计算之后添加非线性</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218823.png" alt="image-20230729201417503" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218775.png" alt="image-20230729201449122" style="zoom:50%;" /><h1 id="11-正则化与激活函数"><a href="#11-正则化与激活函数" class="headerlink" title="11 正则化与激活函数"></a>11 正则化与激活函数</h1><h2 id="正则化的作用"><a href="#正则化的作用" class="headerlink" title="正则化的作用"></a>正则化的作用</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218293.png" alt="image-20230729202538252" style="zoom:50%;" /><p>λ太小容易过拟合</p><h2 id="参数个数对结果的影响"><a href="#参数个数对结果的影响" class="headerlink" title="参数个数对结果的影响"></a>参数个数对结果的影响</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218925.png" alt="image-20230729202815827" style="zoom:50%;" /><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218631.png" alt="image-20230729202928218" style="zoom:50%;" /><h3 id="激活函数对比"><a href="#激活函数对比" class="headerlink" title="激活函数对比"></a>激活函数对比</h3><p>Sigmoid可能会出现梯度消失</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218012.png" alt="image-20230729203302449" style="zoom:50%;" /><h1 id="12-神经网络过拟合解决方法"><a href="#12-神经网络过拟合解决方法" class="headerlink" title="12 神经网络过拟合解决方法"></a>12 神经网络过拟合解决方法</h1><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218048.png" alt="image-20230729203427609" style="zoom:50%;" /><h2 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h2><p>乘上0.01使得权重差异不会过大</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218353.png" alt="image-20230729203635417" style="zoom:50%;" /><h2 id="DROP-OUT"><a href="#DROP-OUT" class="headerlink" title="DROP-OUT"></a>DROP-OUT</h2><p>每一次训练过程中，每一层随机杀死一部分神经元，不更新参数，目的是降低过拟合风险。不同的训练随机选择不同的神经元杀死。测试阶段不杀死，用所有神经元测试。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218803.png" alt="image-20230729203954229" style="zoom:50%;" /><h1 id="13-卷积神经网络应用领域"><a href="#13-卷积神经网络应用领域" class="headerlink" title="13 卷积神经网络应用领域"></a>13 卷积神经网络应用领域</h1><p>检测任务，分类与检索，超分辨率重构，医学任务，无人驾驶，人脸识别</p><h1 id="14-卷积的作用"><a href="#14-卷积的作用" class="headerlink" title="14 卷积的作用"></a>14 卷积的作用</h1><h2 id="卷积网络与神经网络的区别"><a href="#卷积网络与神经网络的区别" class="headerlink" title="卷积网络与神经网络的区别"></a>卷积网络与神经网络的区别</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218855.png" alt="image-20230729205412201" style="zoom:50%;" /><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218491.png" alt="image-20230729205539236" style="zoom:50%;" /><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218757.png" alt="image-20230729210031844" style="zoom:50%;" /><h1 id="15-卷积特征值计算方法"><a href="#15-卷积特征值计算方法" class="headerlink" title="15 卷积特征值计算方法"></a>15 卷积特征值计算方法</h1><h2 id="图像颜色通道"><a href="#图像颜色通道" class="headerlink" title="图像颜色通道"></a>图像颜色通道</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292218453.png" alt="image-20230729210250441" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219809.png" alt="image-20230729210407322" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219977.png" alt="image-20230729210439211" style="zoom:50%;" /><p>输入的通道数为3，每个卷积核也有3个通道。每个通道卷积，三个通道结果相加，再加偏置</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219282.png" alt="image-20230729211013442" style="zoom:50%;" /><h1 id="16-得到特征图表示"><a href="#16-得到特征图表示" class="headerlink" title="16 得到特征图表示"></a>16 得到特征图表示</h1><h2 id="特征图个数"><a href="#特征图个数" class="headerlink" title="特征图个数"></a>特征图个数</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219896.png" alt="image-20230729211230392" style="zoom:50%;" /><p>特征图个数与卷积核相同</p><p>两个卷积核W0和W1，得到两个特征图</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219192.png" alt="image-20230729211509585" style="zoom:50%;" /><p>平移卷积核</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219349.png" alt="image-20230729211720601" style="zoom:50%;" /><h1 id="17-步长与卷积核大小对结果的影响"><a href="#17-步长与卷积核大小对结果的影响" class="headerlink" title="17 步长与卷积核大小对结果的影响"></a>17 步长与卷积核大小对结果的影响</h1><h2 id="堆叠的卷积层"><a href="#堆叠的卷积层" class="headerlink" title="堆叠的卷积层"></a>堆叠的卷积层</h2><p>卷积核维度和输入维度相同，特征图深度和卷积核个数相同。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219065.png" alt="image-20230729212125308" style="zoom:50%;" /><h2 id="卷积层涉及参数"><a href="#卷积层涉及参数" class="headerlink" title="卷积层涉及参数"></a>卷积层涉及参数</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219281.png" alt="image-20230729212213072" style="zoom:50%;" /><h3 id="步长"><a href="#步长" class="headerlink" title="步长"></a>步长</h3><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219857.png" alt="image-20230729212258324" style="zoom:50%;" /><p>步长越大，提取特征越粗糙，得到的特征图越小。常用值为1.</p><h3 id="卷积核尺寸"><a href="#卷积核尺寸" class="headerlink" title="卷积核尺寸"></a>卷积核尺寸</h3><p>卷积核越大，特征图越小。</p><h1 id="18-边缘填充方法"><a href="#18-边缘填充方法" class="headerlink" title="18 边缘填充方法"></a>18 边缘填充方法</h1><p>卷积核移动后可能有重叠，部分点重复计算。边界点被利用次数比中间点少。为了使边界点利用更多一些，在图像外填充0。</p><h2 id="卷积核个数"><a href="#卷积核个数" class="headerlink" title="卷积核个数"></a>卷积核个数</h2><p>决定特征图个数。每个卷积核内的数字不同。</p><h1 id="19-特征图尺寸计算与参数共享"><a href="#19-特征图尺寸计算与参数共享" class="headerlink" title="19 特征图尺寸计算与参数共享"></a>19 特征图尺寸计算与参数共享</h1><h2 id="卷积结果计算公式"><a href="#卷积结果计算公式" class="headerlink" title="卷积结果计算公式"></a>卷积结果计算公式</h2><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219951.png" alt="image-20230729215040677" style="zoom:50%;" /><h2 id="卷积参数共享"><a href="#卷积参数共享" class="headerlink" title="卷积参数共享"></a>卷积参数共享</h2><p>每一个区域选用相同的卷积核，从而减少参数个数。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Deep%20Learning/Lesson1_Note/202307292219499.png" alt="image-20230729215503110" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda数据集标注</title>
      <link href="/2024/02/20/Anaconda/Anaconda%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%87%E6%B3%A8/"/>
      <url>/2024/02/20/Anaconda/Anaconda%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%87%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/ling7319/article/details/123630305">LabelIng操作</a></li><li><a href="https://zhuanlan.zhihu.com/p/550021453">标注工具Labelimg的安装与使用</a></li><li><a href="https://blog.csdn.net/lrx6666666/article/details/120539731">使用anaconda创建Python虚拟环境，并使用国内清华镜像源</a></li></ul><h2 id="打开Anaconda-Prompt"><a href="#打开Anaconda-Prompt" class="headerlink" title="打开Anaconda Prompt"></a>打开Anaconda Prompt</h2><p>在命令行中输入下列代码，若如下图显示pip版本号则证明anaconda3安装成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pip --version<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261251500.png" alt="image-20230726115913397" style="zoom:67%;" /><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda create -n pytorch python=3.7<br></code></pre></td></tr></table></figure><h2 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">activate pytorch<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261251148.png" alt="image-20230726120049721" style="zoom:67%;" /><h2 id="安装labelimg"><a href="#安装labelimg" class="headerlink" title="安装labelimg"></a>安装labelimg</h2><p>在命令行窗口中依次输入下列代码，安装labelimg依赖的第三方库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pip install PyQt5<br><br>pip install pyqt5-tools<br><br>pip install lxml<br><br>pip install labelimg<br></code></pre></td></tr></table></figure><p>（注：此处可能会因网络原因造成卡顿，请耐心等待，若因为网络问题安装失败则重试）</p><p>安装PyQt5</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261253859.png" alt="image-20230726125309767" style="zoom:50%;" /><p>安装pyqt5-tools</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261301530.png" alt="image-20230726125423742" style="zoom:50%;" /><p>安装lxml</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261255758.png" alt="image-20230726125502474" style="zoom:67%;" /><p>安装labelimg</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261256586.png" alt="image-20230726125626722" style="zoom:67%;" /><p>​       至此，环境配置步骤已经全部完成。在第三方库安装完成后，在命令行中输入labelimg指令以启动labelimg（注：环境配置完成后再次启动只需要打开anaconda prompt命令行并输入labelimg即可启动，无需再次安装第三方库）。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261257801.png" alt="image-20230726125656642" style="zoom: 50%;" /><p>进入labelimg标注工具的初始化界面如下图所示。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261251156.webp" alt="img" style="zoom:50%;" /><h2 id="labelimg使用说明"><a href="#labelimg使用说明" class="headerlink" title="labelimg使用说明"></a>labelimg使用说明</h2><h3 id="使用labelimg进行数据集标注"><a href="#使用labelimg进行数据集标注" class="headerlink" title="使用labelimg进行数据集标注"></a>使用labelimg进行数据集标注</h3><p>​       labelimg的标注模式分为VOC和YOLO两种，两种模式下生成的标注文件分别为.xml文件和.txt文件，因此在进行标注前需要优先选择好标注的模式。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261251346.webp" alt="img" style="zoom:50%;" /><p>​       labelimg左侧菜单栏中按钮功能说明如下。</p><table><thead><tr><th>按钮</th><th>功能</th></tr></thead><tbody><tr><td>Open</td><td>打开单个图像文件</td></tr><tr><td>Open Dir</td><td>打开文件夹多幅图像</td></tr><tr><td>Change Save Dir</td><td>标注后图像数据存储的路径</td></tr><tr><td>Next Image</td><td>切换到下一张图像</td></tr><tr><td>Prev Image</td><td>切换到上一张图像</td></tr><tr><td>Verify Image</td><td>校验图像</td></tr><tr><td>Save</td><td>保存图像</td></tr><tr><td>Create RectBox</td><td>画一个标注框</td></tr><tr><td>Duplicate RectBox</td><td>重复标注框</td></tr><tr><td>Delete RectBox</td><td>删除标注框</td></tr><tr><td>Zoom In</td><td>放大图像</td></tr><tr><td>Zoom Out</td><td>缩小图像</td></tr><tr><td>Fit Window</td><td>图像适应窗口</td></tr><tr><td>Fit Width</td><td>图像适应宽度</td></tr></tbody></table><p>​       在labelimg中，标注的快捷键为w，标注后用鼠标拖动锚框进行框选，框选完毕后会弹出类别选择框，如果是当前已有类则直接选择即可，若需要新加类别则在输入框中输入类别标签并确定。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261251451.webp" alt="img" style="zoom:50%;" /><h2 id="标签文件解释"><a href="#标签文件解释" class="headerlink" title="标签文件解释"></a>标签文件解释</h2><p>​       使用labelimg标注产生的结果如下。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261258867.png" alt="image-20230726125758541" style="zoom:67%;" /><p>​       使用labelimg以VOC模式进行标注产生的标注文件如下，与YOLO标注模式产生的类别标签不同，.xml标注文件不需要将类别文件单独进行存放，因为其中已经包含了标注锚框的位置信息和类别信息。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261257518.webp" alt="img" style="zoom: 50%;" /><p>​       使用labelimg以YOLO模式进行标注产生的标注文件如下，classes.txt文件中存放的是类别标签，标签文件中以类别+锚框的位置坐标信息进行保存，文件中有几行则说明对应的标注图像中有几个锚框。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261258548.png" alt="image-20230726125841207" style="zoom:50%;" /><h2 id="以YOLO为例实现数据集标注"><a href="#以YOLO为例实现数据集标注" class="headerlink" title="以YOLO为例实现数据集标注"></a>以YOLO为例实现数据集标注</h2><p>1和2文件夹为图像，labels内为标签</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261258833.png" alt="image-20230726120237516" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261258713.png" alt="image-20230726120256838" style="zoom: 50%;" /><p>如果labels内没有classes.txt文件，需要手动创建，里面写上你的类别名称。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261258276.png" alt="image-20230726120439855" style="zoom: 50%;" /><h3 id="打开labelimg"><a href="#打开labelimg" class="headerlink" title="打开labelimg"></a>打开labelimg</h3><p>点击labelImg工具的“Open Dir”按钮打开图片文件夹</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261259225.png" alt="image-20230726124441813" style="zoom:50%;" /><p>第一次打开时只有图片，没有显示标签框，之后打开会自动匹配</p><p>点击labelImg工具的“Change Save Dir”选择labels文件夹</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261259751.png" alt="image-20230726124605454" style="zoom:50%;" /><p>此时会在图片上显示之前标注过的图片。右侧也会显示标签类别，一个框对应一个类别。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261259486.png" alt="image-20230726124708863" style="zoom: 33%;" /><p>​       使用”Create RectBox”可以添加新的标签框，选取区域后输入类别，右侧就能增加新的类别。修改完后注意点击”Save”保存</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261259325.png" alt="image-20230726124850356" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Anaconda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda安装教程</title>
      <link href="/2024/02/20/Anaconda/Anaconda%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2024/02/20/Anaconda/Anaconda%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><p><a href="https://blog.csdn.net/qq_45344586/article/details/124028689">https://blog.csdn.net/qq_45344586/article/details/124028689</a> </p></li><li><p><a href="https://blog.csdn.net/weixin_42855758/article/details/122795125">https://blog.csdn.net/weixin_42855758/article/details/122795125</a>  </p></li><li><p><a href="https://www.zhihu.com/question/537507317">https://www.zhihu.com/question/537507317</a>  </p></li><li><p><a href="https://zhuanlan.zhihu.com/p/481799020?utm_id=0">https://zhuanlan.zhihu.com/p/481799020?utm_id=0</a></p></li></ul><h2 id="一、Anaconda下载（官网和清华源）"><a href="#一、Anaconda下载（官网和清华源）" class="headerlink" title="一、Anaconda下载（官网和清华源）"></a>一、Anaconda下载（官网和清华源）</h2><h3 id="1-1、Anaconda官网首页地址"><a href="#1-1、Anaconda官网首页地址" class="headerlink" title="1.1、Anaconda官网首页地址"></a>1.1、Anaconda官网首页地址</h3><p>Anaconda官网：<a href="https://www.anaconda.com/">https://www.anaconda.com/</a><br>进入官网后如下图所示，点击Download即可开始下载（若无法下载，请转至清华源下载）            </p><p>​                                             <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261314009.png" alt="image-20230726130700046" style="zoom:50%;" /></p><h3 id="1-2、清华源Anaconda地址"><a href="#1-2、清华源Anaconda地址" class="headerlink" title="1.2、清华源Anaconda地址"></a>1.2、清华源Anaconda地址</h3><p>清华源：<a href="https://repo.anaconda.com/archive/">https://repo.anaconda.com/archive/</a><br>                                        <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261729268.png" alt="image-20230726131618225" style="zoom:50%;" /></p><p>下载完成后将会得到exe文件，双击即可开始安装</p><p>​                                       <img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316101.png" alt="image-20230726130828614" style="zoom:67%;" /></p><h2 id="二、Anaconda安装"><a href="#二、Anaconda安装" class="headerlink" title="二、Anaconda安装"></a>二、Anaconda安装</h2><p>点击Next</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316051.png" alt="image-20230726130847191" style="zoom:50%;" /><p>点击I Agree</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316792.png" alt="image-20230726130856846" style="zoom:50%;" /><p>在此选择Just Me(recommended)—-&gt;点击Next</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316143.png" alt="image-20230726130906040" style="zoom:50%;" /><p>设置Anaconda的安装路径，路径名称最好为全英文，随后点击“Next”。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316385.png" alt="image-20230726130915205" style="zoom:50%;" /><p>点击“Install”。这里就不选择自动将Anaconda添加到系统路径了（因为我之前安装Anaconda的时候都是手动添加路径，使用的时候没有出现过问题，所以本次安装我仍然手动配置路径，我没有试过自动添加路径，所以不知道会出什么问题，大家感兴趣可以尝试。） 这里等待稍许便可</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316151.png" alt="image-20230726130923487" style="zoom:50%;" /><p>点击Next</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316555.png" alt="image-20230726130931592" style="zoom:50%;" /><p>此处为pycharm的推广，如果有需要的可以点击如图所示链接，当然pycharm也可自行下载，在此笔者直接点击Next</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316828.png" alt="image-20230726130939719" style="zoom:50%;" /><p>点击Finish</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316461.png" alt="image-20230726130946564" style="zoom:50%;" /><h2 id="三、手动配置环境变量（关键）"><a href="#三、手动配置环境变量（关键）" class="headerlink" title="三、手动配置环境变量（关键）"></a>三、手动配置环境变量（关键）</h2><p>打开环境变量：打开设置，搜索环境变量，打开“编辑系统环境变量”</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316715.png" alt="image-20230726130955599" style="zoom:67%;" /><p>点击环境变量。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316484.png" alt="image-20230726131004055" style="zoom:67%;" /><p>在系统变量（一定要看清，是系统变量，不是用户变量）一栏中，找到“Path”（这个Path不同电脑的书写可能不一样，所以根据自己电脑上的来，我这里是Path，但其它的电脑可能在大小写上有区别）。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316389.png" alt="image-20230726131011449" style="zoom:67%;" /><p>双击“Path”，并点击新建。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261316266.png" alt="image-20230726131020464" style="zoom:67%;" /><p>输入以下信息(Anaconda安装路径要根据自己当时安装Anaconda的路径来): Anaconda安装路径 Anaconda安装路径\Scripts Anaconda安装路径\Library\bin</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317175.png" alt="image-20230726131029132" style="zoom:67%;" /><p>(上图中的内容仅是个人安装路径的配置，大家配置的时候，只需要更改“Anaconda安装路径”，改成自己的路径)，输入完三条变量后，点击确定。 </p><h2 id="四、测试Anaconda是否安装配置成功"><a href="#四、测试Anaconda是否安装配置成功" class="headerlink" title="四、测试Anaconda是否安装配置成功"></a>四、测试Anaconda是否安装配置成功</h2><p>WIN+R键调出运行窗口，输入cmd回车</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261737659.png" alt="image-20230726131036759" style="zoom:50%;" /><p>输入“conda –version”。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317610.png" alt="image-20230726131213466" style="zoom:67%;" /><p>输入“conda info”。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317251.png" alt="image-20230726131221614" style="zoom:50%;" /><p>输入“activate”，回车，之后再输入“python”。</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317055.png" alt="image-20230726131228801" style="zoom:67%;" /><p>若显示的内容均与上图相同或类似，这说明环境变量配置成功。 至此，Anaconda的安装就完成了。</p><h2 id="五、jupyter-notebook打开失败解决方法"><a href="#五、jupyter-notebook打开失败解决方法" class="headerlink" title="五、jupyter notebook打开失败解决方法"></a>五、jupyter notebook打开失败解决方法</h2><p> 在系统变量的path路径里添加，C:&#x2F;Windows&#x2F;System32</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317910.png" alt="image-20230726131240098" style="zoom:67%;" /><p>打开命令窗口，win+R，输入cmd，回车 输入jupyter notebook –generate-config，回车</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317813.png" alt="image-20230726131328646" style="zoom:67%;" /><p>通过输出的这个路径去找到文件，右键单击，选择用记事本打开 将以下代码粘贴进记事本 import webbrowser webbrowser.register(“chrome”,None,webbrowser.GenericBrowser(u”Chrome所在路径”)) c.NotebookApp.browser &#x3D; ‘chrome’ 然后将红框部分替换成自己电脑上面Chrome的所在路径</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317994.png" alt="image-20230726131335629" style="zoom:50%;" /><p>Chrome所在路径可以右击图标，点击“属性”，在目标处就是所在路径，复制以后替换到上面红框部分</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317368.png" alt="image-20230726131342281" style="zoom:50%;" /><p>重点来了！这里一定要把\都替换成\\，否则会报错</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317733.png" alt="image-20230726131349096" style="zoom:67%;" /><p>保存记事本，再启动jupyter notebook应该就自动弹出了</p><img src="https://cdn.jsdelivr.net/gh/techniquenotes/photohouse@main/Anaconda/Tutorial/202307261317231.png" alt="image-20230726131355492" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Anaconda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
